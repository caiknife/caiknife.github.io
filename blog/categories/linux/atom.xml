<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | CDEFGAB 1010110]]></title>
  <link href="http://caiknife.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2019-02-20T16:23:15+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[select poll epoll的区别]]></title>
    <link href="http://caiknife.github.io/blog/2019/02/17/select-poll-epollde-qu-bie/"/>
    <updated>2019-02-17T17:56:41+08:00</updated>
    <id>http://caiknife.github.io/blog/2019/02/17/select-poll-epollde-qu-bie</id>
    <content type="html"><![CDATA[<p>在 linux 没有实现 epoll 事件驱动机制之前，我们一般选择用 select 或者 poll 等 IO 多路复用的方法来实现并发服务程序。</p>

<p>在大数据、高并发、集群等一些名词唱的火热之年代，select 和 poll 的用武之地越来越有限了，风头已经被 epoll 占尽。</p>

<!-- more -->


<h3>select 和 poll IO 多路复用模型</h3>

<p>select 的缺点：</p>

<blockquote><p>单个进程能够监视的文件描述符的数量存在最大限制，通常是 1024，当然可以更改数量，但由于 select 采用轮询的方式扫描文件描述符，文件描述符数量越多，性能越差；</p>

<p>内核/用户空间内存拷贝问题，select 需要复制大量的句柄数据结构，产生巨大的开销；</p>

<p>select 返回的是含有整个句柄的数组，应用程序需要遍历整个数组才能发现哪些句柄发生了事件；</p>

<p>select 的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行 IO，那么之后再次 select 调用还是会将这些文件描述符通知进程。</p></blockquote>

<p>相比于 select 模型，poll 使用链表保存文件描述符，因此没有了监视文件数量的限制，但其他三个缺点依然存在。</p>

<p>拿 select 模型为例，假设我们的服务器需要支持 100 万的并发连接，则在 _FD_SETSIZE 为 1024 的情况下，则我们至少需要开辟 1K 个进程才能实现 100 万的并发连接。除了进程间上下文切换的时间消耗外，从内核/用户空间大量的无脑内存拷贝、数组轮询等，是系统难以承受的。因此，基于 select 模型的服务器程序，要达到 10 万级别的并发访问，是一个很难完成的任务。</p>

<h3>epoll IO多路复用模型实现机制</h3>

<p>由于 epoll 的实现机制与 select/poll 机制完全不同，上面所说的 select 的缺点在 epoll 上不复存在。</p>

<p>设想一下如下场景：有 100 万个客户端同时与一个服务器进程保持着 TCP 连接。而每一时刻，通常只有几百上千个 TCP 连接是活跃的。如何实现这样的高并发？</p>

<p>在 select/poll 时代，服务器进程每次都把这 100 万个连接告诉操作系统（从用户态复制句柄数据结构到内核态），让操作系统内核去查询这些套接字上是否有事件发生，轮询完后，再将句柄数据复制到用户态，让服务器应用程序轮询处理已发生的网络事件，这一过程资源消耗较大，因此，select/poll 一般只能处理几千的并发连接。</p>

<p>epoll 的设计和实现 select 完全不同。epoll 通过在 linux 内核中申请一个简易的文件系统（文件系统一般用什么数据结构实现？B+ 树）。把原先的 select/poll 调用分成了 3 个部分：</p>

<blockquote><p>1）调用 epoll_create 建立一个 epoll 对象（在 epoll 文件系统中为这个句柄对象分配资源）</p>

<p>2）调用 epoll_ctl 向 epoll 对象中添加这 100 万个连接的套接字</p>

<p>3）调用 epoll_wait 收集发生的事件的连接</p></blockquote>

<p>如此一来，要实现上面说的场景，只需要在进程启动时建立一个 epoll 对象，然后在需要的时候向这个 epoll 对象中添加或者删除连接。同时，epoll_wait 的效率也非常高，因为调用 epoll_wait 时，并没有一股脑的向操作系统复制这 100 万个连接的句柄数据，内核也不需要去遍历全部的连接。</p>

<p>上面的 3 个部分非常清晰，首先要调用 epoll_create 创建一个 epoll 对象。然后使用 epoll_ctl 可以操作上面建立的 epoll 对象，例如，将刚建立的 socket 加入到 epoll 中让其监控，或者把 epoll 正在监控的某个 socket 句柄移出 epoll，不再监控它等等。</p>

<p>epoll_wait 在调用时，在给定的 timeout 时间内，当在监控的所有句柄中有事件发生时，就返回用户态的进程。</p>

<p>从上面的调用方式就可以看到 epoll 比 select/poll 的优越之处：因为后者每次调用时都要传递你所要监控的所有 socket 给 select/poll 系统调用，这意味着需要将用户态的 socket 列表 copy 到内核态，如果以万计的句柄会导致每次都要 copy 几十几百 KB 的内存到内核态，非常低效。而我们调用 epoll_wait 时就相当于以往调用 select/poll，但是这时却不用传递 socket 句柄给内核，因为内核已经在 epoll_ctl 中拿到了要监控的句柄列表。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP安装IMAP扩展]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan/"/>
    <updated>2018-11-21T20:43:49+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan</id>
    <content type="html"><![CDATA[<p>在经历了 macOS 上的 homebrew 升级之后，imap 就不再是 homebrew 的 PHP 里默认安装的扩展了，这样如果你在 composer.json 中引用了一个需要用到 imap 扩展的库，那么久没有办法更新 composer 库，这样着实让人内伤。</p>

<p>所以今天就来解决这个问题。</p>

<!-- more -->


<h3>第一步</h3>

<p>你需要通过 brew 安装 imap-uw
<code>bash
brew install imap-uw
</code>
注：在完成第一步之后，你需要安装 openssl，不管通过何种方式。这里简单介绍一下通过 brew 安装openssl，非常的简单。</p>

<p><code>bash
brew install openssl
</code></p>

<p>这就是安装拓展的准备工作，接下来才开始：</p>

<h3>第二步</h3>

<p>你需要去官网下载跟你现在环境所对应的PHP版本，我的是 7.1 的，所以我下载了 PHP 7.1 的，然后解压。</p>

<p><code>bash
tar -zxvf ~/Downloads/php-7.1.24.tar.gz
</code></p>

<p>解压之后进入到当前 PHP 文件夹的 ext/imap 文件夹当中。注意，解压是解压到当前目录下，当然，你也可以指定目录。</p>

<p><code>bash
cd php-7.1.19/ext/imap
</code></p>

<p>进入到该目录后，第一个命令就是：</p>

<p><code>bash
sudo phpize
</code></p>

<p>如果你不执行该命令，是无法在这个目录下进行编译安装的。接下来就是编译安装了。</p>

<p><code>bash
./configure --with-imap=/usr/local/Cellar/imap-uw/2007f --with-kerberos --with-imap-ssl=/usr/local/opt/openssl
</code></p>

<p>注：imap 的目录就是 imap-uw 的安装目录，凡是通过 brew 安装的都是在 /usr/local/Cellar 目录下，ssl 的目录就是你之前的 openssl 的目录。这些都要改为自己的。然后再是执行之前的编译。</p>

<p><code>bash
make
</code></p>

<p>执行完成之后，会在 imap 目录下生成许多的文件，此时需要创建一个文件夹。</p>

<p><code>bash
mkdir /usr/local/opt/php71-imap
</code></p>

<p>这个文件夹用来存放刚才执行编译生成的 imap.so 文件。当前你所在的目录还是在 imap 里面，需要把 imap.so 文件拷贝到刚才创建的文件夹中。</p>

<p><code>bash
mv modules/imap.so /usr/local/opt/php71-imap/imap.so
</code></p>

<p>最后你需要在你的 /usr/local/etc/php/7.1/conf.d/imap.ini 里面添加这样一句话即可：</p>

<p><code>ini
[imap]
extension="/usr/local/opt/php71-imap/imap.so"
</code></p>

<h3>第三步</h3>

<p>检查是否安装好:</p>

<p><code>bash
php -m | grep imap
</code></p>

<p>如果出现了 imap，那么大功告成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思维导图两张]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang/"/>
    <updated>2018-11-20T14:03:41+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang</id>
    <content type="html"><![CDATA[<p>更新两张思维导图，有关于数据结构和算法，以及Linux性能优化的知识框架。</p>

<!-- more -->


<p><a href="/downloads/image/composer/ds.png" title="数据结构与算法 " class="fancybox"><img src="/downloads/image/composer/ds.png" alt="数据结构与算法 " /></a></p>

<p><a href="/downloads/image/composer/linux.png" title="Linux性能优化 " class="fancybox"><img src="/downloads/image/composer/linux.png" alt="Linux性能优化 " /></a></p>

<p>一时偷懒造成的问题可能花数十倍的时间精力去善后。</p>

<p>人生艰难。</p>

<p>人间不值得，我自己最值得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLI 环境高级配置]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/14/cli-improvement/"/>
    <updated>2018-11-14T12:40:07+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/14/cli-improvement</id>
    <content type="html"><![CDATA[<p>最近又发现了几个在 CLI 环境下，对几个已有命令的强化，可以提高用户体验，现在来总结一下。</p>

<!-- more -->


<h2>bat</h2>

<p>安装方式 <code>brew install bat</code></p>

<p>这是一个取代 <code>cat</code> 的命令。通常情况下 <code>cat</code> 只显示普通文本的内容，而 <code>bat</code> 还会根据文件的扩展名高亮显示语法。效果如下图：</p>

<p><a href="/downloads/image/cli/bat.gif" title="bat " class="fancybox"><img src="/downloads/image/cli/bat.gif" alt="bat " /></a></p>

<h2>prettyping</h2>

<p>安装方式 <code>brew install prettyping</code></p>

<p>这是一个取代 <code>ping</code> 的命令。可以更加直观地显示 ping 的进度。</p>

<p><a href="/downloads/image/cli/ping.gif" title="prettyping " class="fancybox"><img src="/downloads/image/cli/ping.gif" alt="prettyping " /></a></p>

<p>可以用别名来替换已有的 <code>ping</code> 命令：<code>alias ping='prettyping --nolegend'</code></p>

<h2>fd</h2>

<p>安装方式 <code>brew install fd</code></p>

<p>这个命令自然是用来取代 <code>find</code> 。</p>

<p><a href="/downloads/image/cli/fd.png" title="fd " class="fancybox"><img src="/downloads/image/cli/fd.png" alt="fd " /></a></p>

<p>下面是一些常用的例子：</p>

<p><code>bash
fd cli # all filenames containing "cli"
fd -e md # all with .md extension
fd cli -x wc -w # find "cli" and run `wc -w` on each file
</code></p>

<h2>ncdu</h2>

<p>安装方式 <code>brew install ncdu</code></p>

<p>这个命令可以取代 <code>du</code> 。而且还可以在界面内进行操作，通过操作光标进入不同的目录查看文件大小。</p>

<p><a href="/downloads/image/cli/ncdu.png" title="ncdu " class="fancybox"><img src="/downloads/image/cli/ncdu.png" alt="ncdu " /></a></p>

<p>别名配置可以写成：<code>alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"</code></p>

<hr />

<p>今天就先到这里，下回再继续吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH配置备忘]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/22/zhi-bei-wang/"/>
    <updated>2018-10-22T19:46:38+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/22/zhi-bei-wang</id>
    <content type="html"><![CDATA[<p>记录一下我机器上的SSHConfig，防止将来忘记了。</p>

<!-- more -->


<p>```
Host jserver</p>

<pre><code>HostName ********
User caiknife
</code></pre>

<p>Host j2server</p>

<pre><code>HostName ********
User caiknife
StrictHostKeyChecking no
Port 2222
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
