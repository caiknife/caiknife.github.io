<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | 但行好事，莫问前程]]></title>
  <link href="http://caiknife.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2018-11-27T22:54:08+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP安装IMAP扩展]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan/"/>
    <updated>2018-11-21T20:43:49+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan</id>
    <content type="html"><![CDATA[<p>在经历了MacOS上的homebrew升级之后，imap就不再是homebrew的PHP里默认安装的扩展了，这样如果你在composer.json中引用了一个需要用到imap扩展的库，那么久没有办法更新composer库，这样着实让人内伤。</p>

<p>所以今天就来解决这个问题。</p>

<!-- more -->


<h3>第一步</h3>

<p>你需要通过brew安装imap-uw
<code>bash
brew install imap-uw
</code>
注：在完成第一步之后，你需要安装openssl，不管通过何种方式。这里简单介绍一下通过brew安装openssl，非常的简单。</p>

<p><code>bash
brew install openssl
</code></p>

<p>这就是安装拓展的准备工作，接下来才开始：</p>

<h3>第二步</h3>

<p>你需要去官网下载跟你现在环境所对应的PHP版本，我的是7.1的，所以我下载了PHP7.1的，然后解压。</p>

<p><code>bash
tar -zxvf ~/Downloads/php-7.1.24.tar.gz
</code></p>

<p>解压之后进入到当前PHP文件的ext/imap文件当中。注意，解压是解压到当前目录下，当然，你也可以指定目录。</p>

<p><code>bash
cd php-7.1.19/ext/imap
</code></p>

<p>进入到该目录后，第一个命令就是：</p>

<p><code>bash
sudo phpize
</code></p>

<p>如果你不执行该命令，是无法在这个目录下进行编译安装的。接下来就是编译安装了。</p>

<p><code>bash
./configure --with-imap=/usr/local/Cellar/imap-uw/2007f --with-kerberos --with-imap-ssl=/usr/local/opt/openssl
</code></p>

<p>注：imap的目录就是imap-uw的安装目录，凡是通过brew安装的都是在/usr/local/Cellar目录下，ssl的目录就是你之前的openssl的目录。这些都要改为自己的。然后再是执行之前的编译。</p>

<p><code>bash
make
</code></p>

<p>执行完成之后，会在imap目录下生成许多的文件，此时需要创建一个文件夹。</p>

<p><code>bash
mkdir /usr/local/opt/php71-imap
</code></p>

<p>这个文件夹用来存放刚才执行编译生成的imap.so文件。当前你所在的目录还是在imap里面，需要把imap.so文件拷贝到刚才创建的文件夹中。</p>

<p><code>bash
mv modules/imap.so /usr/local/opt/php71-imap/imap.so
</code></p>

<p>最后你需要在你的/usr/local/etc/php/7.1/conf.d/imap.ini里面添加这样一句话即可：</p>

<p><code>ini
[imap]
extension="/usr/local/opt/php71-imap/imap.so"
</code></p>

<h3>第三步</h3>

<p>检查是否安装好:</p>

<p><code>bash
php -m | grep imap
</code></p>

<p>如果出现了imap，那么大功告成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思维导图两张]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang/"/>
    <updated>2018-11-20T14:03:41+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang</id>
    <content type="html"><![CDATA[<p>更新两张思维导图，有关于数据结构和算法，以及Linux性能优化的知识框架。</p>

<!-- more -->


<p><a href="/downloads/image/composer/ds.png" title="数据结构与算法 " class="fancybox"><img src="/downloads/image/composer/ds.png" alt="数据结构与算法 " /></a></p>

<p><a href="/downloads/image/composer/linux.png" title="Linux性能优化 " class="fancybox"><img src="/downloads/image/composer/linux.png" alt="Linux性能优化 " /></a></p>

<p>一时偷懒造成的问题可能花数十倍的时间精力去善后。</p>

<p>人生艰难。</p>

<p>人间不值得，我自己最值得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLI 环境高级配置]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/14/cli-improvement/"/>
    <updated>2018-11-14T12:40:07+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/14/cli-improvement</id>
    <content type="html"><![CDATA[<p>最近又发现了几个在 CLI 环境下，对几个已有命令的强化，可以提高用户体验，现在来总结一下。</p>

<!-- more -->


<h2>bat</h2>

<p>安装方式 <code>brew install bat</code></p>

<p>这是一个取代 <code>cat</code> 的命令。通常情况下 <code>cat</code> 只显示普通文本的内容，而 <code>bat</code> 还会根据文件的扩展名高亮显示语法。效果如下图：</p>

<p><a href="/downloads/image/cli/bat.gif" title="bat " class="fancybox"><img src="/downloads/image/cli/bat.gif" alt="bat " /></a></p>

<h2>prettyping</h2>

<p>安装方式 <code>brew install prettyping</code></p>

<p>这是一个取代 <code>ping</code> 的命令。可以更加直观地显示 ping 的进度。</p>

<p><a href="/downloads/image/cli/ping.gif" title="prettyping " class="fancybox"><img src="/downloads/image/cli/ping.gif" alt="prettyping " /></a></p>

<p>可以用别名来替换已有的 <code>ping</code> 命令：<code>alias ping='prettyping --nolegend'</code></p>

<h2>fd</h2>

<p>安装方式 <code>brew install fd</code></p>

<p>这个命令自然是用来取代 <code>find</code> 。</p>

<p><a href="/downloads/image/cli/fd.png" title="fd " class="fancybox"><img src="/downloads/image/cli/fd.png" alt="fd " /></a></p>

<p>下面是一些常用的例子：</p>

<p><code>bash
fd cli # all filenames containing "cli"
fd -e md # all with .md extension
fd cli -x wc -w # find "cli" and run `wc -w` on each file
</code></p>

<h2>ncdu</h2>

<p>安装方式 <code>brew install ncdu</code></p>

<p>这个命令可以取代 <code>du</code> 。而且还可以在界面内进行操作，通过操作光标进入不同的目录查看文件大小。</p>

<p><a href="/downloads/image/cli/ncdu.png" title="ncdu " class="fancybox"><img src="/downloads/image/cli/ncdu.png" alt="ncdu " /></a></p>

<p>别名配置可以写成：<code>alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"</code></p>

<hr />

<p>今天就先到这里，下回再继续吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH配置备忘]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/22/zhi-bei-wang/"/>
    <updated>2018-10-22T19:46:38+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/22/zhi-bei-wang</id>
    <content type="html"><![CDATA[<p>记录一下我机器上的SSHConfig，防止将来忘记了。</p>

<!-- more -->


<p>```
Host jserver</p>

<pre><code>HostName ********
User caiknife
</code></pre>

<p>Host j2server</p>

<pre><code>HostName ********
User caiknife
StrictHostKeyChecking no
Port 2222
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 查看系统性能和配置的常用命令整理]]></title>
    <link href="http://caiknife.github.io/blog/2014/03/07/linux-commands/"/>
    <updated>2014-03-07T11:53:02+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/03/07/linux-commands</id>
    <content type="html"><![CDATA[<p>常用 Linux 命令存档。</p>

<!-- more -->


<p>查看CPU信息（型号）</p>

<p>``` bash
$ cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</p>

<pre><code>8  Intel(R) Xeon(R) CPU            E5410   @ 2.33GHz
</code></pre>

<p>```</p>

<p>（看到有8个逻辑CPU, 也知道了CPU型号）</p>

<p>``` bash
$ cat /proc/cpuinfo | grep physical | uniq -c</p>

<pre><code>4 physical id      : 0
4 physical id      : 1
</code></pre>

<p>```</p>

<p>（说明实际上是两颗4核的CPU）</p>

<p>``` bash
$ getconf LONG_BIT</p>

<pre><code>32
</code></pre>

<p>```</p>

<p>（说明当前CPU运行在32bit模式下, 但不代表CPU不支持64bit）</p>

<p><code>bash
$ cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l
   8
</code></p>

<p>（结果大于0, 说明支持64bit计算. lm指long mode, 支持lm则是64bit）</p>

<p>再完整看cpu详细信息, 不过大部分我们都不关心而已。</p>

<p><code>bash
$ dmidecode | grep -A81 'Processor Information'
</code></p>

<p>查看主板型号：</p>

<p><code>bash
$ dmidecode | grep -A16 "System Information$"
</code></p>

<p>内存槽及内存条：</p>

<p><code>bash
$ dmidecode | grep -A16 "Memory Device$"
</code></p>

<p>查看内存信息
<code>bash
$ cat /proc/meminfo
</code></p>

<p>``` bash
$ uname -a</p>

<pre><code>Linux euis1 2.6.9-55.ELsmp #1 SMP Fri Apr 20 17:03:35 EDT 2007 i686 i686 i386 GNU/Linux
</code></pre>

<p>```</p>

<p>（查看当前操作系统内核信息）</p>

<p><code>bash
$ hostname      # 主机名
$ lspci -tv     # 列出所有pci设备
$ lsusb -tv     # 列出所有use设备
</code></p>

<p>``` bash
$ cat /etc/issue | grep Linux</p>

<pre><code>Red Hat Enterprise Linux AS release 4 (Nahant Update 5)
</code></pre>

<p>```</p>

<p>（查看当前操作系统发行版信息）</p>

<p>查看机器型号：</p>

<p><code>bash
$ dmidecode | grep "Product Name"  
</code></p>

<p>查看网卡信息：
<code>bash
$ dmesg | grep -i eth
$ mii-tool
</code></p>

<p>硬盘：
<code>bash
$ fdisk -l
$ smartctl -a /dev/sda
</code></p>

<p><code>bash
$ hostname                      # 查看计算机名
$ lspci -tv                     # 列出所有PCI设备
$ lsusb -tv                     # 列出所有USB设备
$ lsmod                         # 列出加载的内核模块
$ env                           # 查看环境变量资源
$ free -m                       # 查看内存使用量和交换区使用量
$ df -h                         # 查看各分区使用情况
$ du -sh                        # 查看指定目录的大小
$ grep MemTotal /proc/meminfo   # 查看内存总量
$ grep MemFree /proc/meminfo    # 查看空闲内存量
$ uptime                        # 查看系统运行时间、用户数、负载
$ cat /proc/loadavg             # 查看系统负载磁盘和分区
$ mount | column -t             # 查看挂接的分区状态
$ fdisk -l                      # 查看所有分区
$ swapon -s                     # 查看所有交换分区
$ hdparm -i /dev/hda            # 查看磁盘参数(仅适用于IDE设备)
$ dmesg | grep IDE              # 查看启动时IDE设备检测状况网络
$ ifconfig                      # 查看所有网络接口的属性
$ iptables -L                   # 查看防火墙设置
$ route -n                      # 查看路由表
$ netstat -lntp                 # 查看所有监听端口
$ netstat -antp                 # 查看所有已经建立的连接
$ netstat -s                    # 查看网络统计信息进程
$ ps -ef                        # 查看所有进程
$ top                           # 实时显示进程状态用户
$ w                             # 查看活动用户
$ id                            # 查看指定用户信息
$ last                          # 查看用户登录日志
$ cut -d: -f1 /etc/passwd       # 查看系统所有用户
$ cut -d: -f1 /etc/group        # 查看系统所有组
$ crontab -l                    # 查看当前用户的计划任务服务
$ chkconfig –list               # 列出所有系统服务
$ chkconfig –list | grep on     # 列出所有启动的系统服务程序
$ rpm -qa                       # 查看所有安装的软件包
$ cat /proc/cpuinfo             # 查看CPU相关参数
$ cat /proc/partitions          # 查看硬盘和分区
$ cat /proc/meminfo             # 查看内存信息
$ cat /proc/version             # 查看版本，类似uname -r
$ cat /proc/ioports             # 查看设备io端口
$ cat /proc/interrupts          # 查看中断
$ cat /proc/pci                 # 查看pci设备的信息
$ cat /proc/swaps               # 查看所有swap分区的信息
</code></p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
</feed>
