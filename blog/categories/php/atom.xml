<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | 但行好事，莫问前程]]></title>
  <link href="http://caiknife.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2018-11-21T20:57:16+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP安装IMAP扩展]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan/"/>
    <updated>2018-11-21T20:43:49+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan</id>
    <content type="html"><![CDATA[<p>在经历了MacOS上的homebrew升级之后，imap就不再是homebrew的PHP里默认安装的扩展了，这样如果你在composer.json中引用了一个需要用到imap扩展的库，那么久没有办法更新composer库，这样着实让人内伤。</p>

<p>所以今天就来解决这个问题。</p>

<!-- more -->


<h3>第一步</h3>

<p>你需要通过brew安装imap-uw
<code>bash
brew install imap-uw
</code>
注：在完成第一步之后，你需要安装openssl，不管通过何种方式。这里简单介绍一下通过brew安装openssl，非常的简单。</p>

<p><code>bash
brew install openssl
</code></p>

<p>这就是安装拓展的准备工作，接下来才开始：</p>

<h3>第二步</h3>

<p>你需要去官网下载跟你现在环境所对应的PHP版本，我的是7.1的，所以我下载了PHP7.1的，然后解压。</p>

<p><code>bash
tar -zxvf ~/Downloads/php-7.1.24.tar.gz
</code></p>

<p>解压之后进入到当前PHP文件的ext/imap文件当中。注意，解压是解压到当前目录下，当然，你也可以指定目录。</p>

<p><code>bash
cd php-7.1.19/ext/imap
</code></p>

<p>进入到该目录后，第一个命令就是：</p>

<p><code>bash
sudo phpize
</code></p>

<p>如果你不执行该命令，是无法在这个目录下进行编译安装的。接下来就是编译安装了。</p>

<p><code>bash
./configure --with-imap=/usr/local/Cellar/imap-uw/2007f --with-kerberos --with-imap-ssl=/usr/local/opt/openssl
</code></p>

<p>注：imap的目录就是imap-uw的安装目录，凡是通过brew安装的都是在/usr/local/Cellar目录下，ssl的目录就是你之前的openssl的目录。这些都要改为自己的。然后再是执行之前的编译。</p>

<p><code>bash
make
</code></p>

<p>执行完成之后，会在imap目录下生成许多的文件，此时需要创建一个文件夹。</p>

<p><code>bash
mkdir /usr/local/opt/php71-imap
</code></p>

<p>这个文件夹用来存放刚才执行编译生成的imap.so文件。当前你所在的目录还是在imap里面，需要把imap.so文件拷贝到刚才创建的文件夹中。</p>

<p><code>bash
mv modules/imap.so /usr/local/opt/php71-imap/imap.so
</code></p>

<p>最后你需要在你的/usr/local/etc/php/7.1/conf.d/imap.ini里面添加这样一句话即可：</p>

<p><code>ini
[imap]
extension="/usr/local/opt/php71-imap/imap.so"
</code></p>

<h3>第三步</h3>

<p>检查是否安装好:</p>

<p><code>bash
php -m | grep imap
</code></p>

<p>如果出现了imap，那么大功告成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[composer问题排查]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/19/composepai-cha/"/>
    <updated>2018-10-19T14:48:38+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/19/composepai-cha</id>
    <content type="html"><![CDATA[<p>今天更新 composer 库的时候出现了一个问题：</p>

<p><a href="/downloads/image/composer/1.png" title="Composer Issue " class="fancybox"><img src="/downloads/image/composer/1.png" alt="Composer Issue " /></a></p>

<p>上图不是我的电脑出现的问题，是通过搜索引擎搜到的图片，我和提出这个问题的题主碰到了一样的问题。</p>

<!-- more -->


<p>查了半天没找到原因是什么，后来在查当前代码库的时候，composer.json 文件里的配置是这样的：</p>

<p>``` json
{
  &ldquo;repositories&rdquo;: {</p>

<pre><code>"packagist": {
  "type": "composer",
  "url": "packagist.phpcomposer.com"
}
</code></pre>

<p>  }
}
```</p>

<p>搜索了问题之后，发现 packagist.phpcomposer.com 这个镜像已经很久没有更新了，所以就造成了目前的问题。只需要把仓库换个镜像源就可以了。</p>

<p>用下面的命令将镜像地址替换为 <a href="https://packagist.laravel-china.org">https://packagist.laravel-china.org</a> 即可。</p>

<p>``` bash
composer config -g repo.packagist composer <a href="https://packagist.laravel-china.org">https://packagist.laravel-china.org</a></p>

<p>composer config repo.packagist composer <a href="https://packagist.laravel-china.org">https://packagist.laravel-china.org</a>
```</p>

<p>Problem resolved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP知识体系]]></title>
    <link href="http://caiknife.github.io/blog/2018/09/13/phpzhi-shi-ti-xi/"/>
    <updated>2018-09-13T10:06:52+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/09/13/phpzhi-shi-ti-xi</id>
    <content type="html"><![CDATA[<p>最近花了几天时间写了一个有关PHP的思维导图。</p>

<!-- more -->


<p>虽然已经工作了很多年了，但是之前一直很少静下来给自己做一次深刻的总结。</p>

<p>这一次，就当写了一次给自己的My Back Pages。</p>

<p><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=x01784z0bba&auto=0" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>思维导图源文件下载点击这里：<a href="/downloads/image/php/php.xmind">PHP知识体系</a></p>

<p>原图在下面：</p>

<p><a href="/downloads/image/php/php.png" title="PHP知识体系 " class="fancybox"><img src="/downloads/image/php/php.png" alt="PHP知识体系 " /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[字符串拼接性能测试]]></title>
    <link href="http://caiknife.github.io/blog/2014/03/05/little-php-benchmark/"/>
    <updated>2014-03-05T16:35:37+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/03/05/little-php-benchmark</id>
    <content type="html"><![CDATA[<p>写这篇文章的目的是因为某天在群里有人出了一到笔试题——下面三种拼接字符串方式，哪一种的性能最快？</p>

<p>``` php 字符串拼接性能测试
&lt;?php
$z = $x . $y;</p>

<p>$z = &ldquo;$x$y&rdquo;;</p>

<p>$z = sprintf(&lsquo;%s%s&rsquo;, $x, $y);
```</p>

<!-- more -->


<p>我的第一直觉——第三种方式肯定是最慢的，因为要调用函数做额外的开销。在 PHP 中，使用语言特性要比使用函数的效率高，所以在平常工作中我会用 <code>$foo === null</code> 来代替 <code>is_null($foo)</code> 这样类似的技巧。</p>

<p>但是第一种和第二种方式哪个更快呢？于是我写了下面的这个测试脚本：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (bench.php)</span> <a href='/downloads/code/bench/bench.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: zcai</span>
</span><span class='line'><span class="sd"> * Date: 14-3-4</span>
</span><span class='line'><span class="sd"> * Time: 上午10:33</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * 比较三种方式下，字符串拼接最快的方法。</span>
</span><span class='line'><span class="sd"> * 1、字符串直接连接</span>
</span><span class='line'><span class="sd"> * 2、双引号内变量转义</span>
</span><span class='line'><span class="sd"> * 3、sprintf格式化</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Benchmark</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_timeStart</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_timeEnd</span>   <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_repeatTimes</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_formatters</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_repeatTimes</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setRepeatTimes</span><span class="p">(</span><span class="nv">$repeatTimes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_repeatTimes</span> <span class="o">=</span> <span class="nv">$repeatTimes</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addFormatter</span><span class="p">(</span><span class="nx">StringFormatter</span> <span class="nv">$formatter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_formatters</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$formatter</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">bench</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_formatters</span> <span class="k">as</span> <span class="nv">$formatter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_invokeFormatter</span><span class="p">(</span><span class="nv">$formatter</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">_invokeFormatter</span><span class="p">(</span><span class="nx">StringFormatter</span> <span class="nv">$formatter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_timeStart</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_repeatTimes</span><span class="p">;</span> <span class="o">++</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$formatter</span><span class="o">-&gt;</span><span class="na">format</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_timeEnd</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_timeEnd</span> <span class="o">-</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_timeStart</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">StringFormatter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_firstString</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_secondString</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_result</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$firstString</span><span class="p">,</span> <span class="nv">$secondString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span> <span class="o">=</span> <span class="nv">$firstString</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span> <span class="o">=</span> <span class="nv">$secondString</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getResult</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getFirstString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getSecondString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">format</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StringContactFormatter</span> <span class="k">extends</span> <span class="nx">StringFormatter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">format</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DoubleQuoteFormatter</span> <span class="k">extends</span> <span class="nx">StringFormatter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">format</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span><span class="si">}{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SprintfFormatter</span> <span class="k">extends</span> <span class="nx">StringFormatter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">format</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_result</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;%s%s&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$benchmark</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Benchmark</span><span class="p">();</span>
</span><span class='line'><span class="nv">$benchmark</span><span class="o">-&gt;</span><span class="na">addFormatter</span><span class="p">(</span><span class="k">new</span> <span class="nx">StringContactFormatter</span><span class="p">(</span><span class="s1">&#39;cai&#39;</span><span class="p">,</span> <span class="s1">&#39;knife&#39;</span><span class="p">))</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">addFormatter</span><span class="p">(</span><span class="k">new</span> <span class="nx">DoubleQuoteFormatter</span><span class="p">(</span><span class="s1">&#39;cai&#39;</span><span class="p">,</span> <span class="s1">&#39;knife&#39;</span><span class="p">))</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">addFormatter</span><span class="p">(</span><span class="k">new</span> <span class="nx">SprintfFormatter</span><span class="p">(</span><span class="s1">&#39;cai&#39;</span><span class="p">,</span> <span class="s1">&#39;knife&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$benchmark</span><span class="o">-&gt;</span><span class="na">bench</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在笔记本上执行了若干次，得到下面的结果：</p>

<p>``` bash benchmark result
[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.025658130645752)
double(0.026356935501099)
double(0.050467967987061)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026144981384277)
double(0.025960922241211)
double(0.053239107131958)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.029561042785645)
double(0.026247978210449)
double(0.051438093185425)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026479005813599)
double(0.026005983352661)
double(0.05446195602417)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026879072189331)
double(0.026219129562378)
double(0.051171064376831)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026100873947144)
double(0.025912046432495)
double(0.051729917526245)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.025666952133179)
double(0.025691986083984)
double(0.051711082458496)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.025789022445679)
double(0.050994873046875)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.024961948394775)
double(0.025660991668701)
double(0.051864147186279)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.025777101516724)
double(0.025542020797729)
double(0.05191707611084)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.0258629322052)
double(0.02587890625)
double(0.050651073455811)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.027279138565063)
double(0.026965141296387)
double(0.05425500869751)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.027122020721436)
double(0.026250123977661)
double(0.053034067153931)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026654005050659)
double(0.02558708190918)
double(0.052467823028564)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.02632212638855)
double(0.026074171066284)
double(0.051969051361084)
```</p></blockquote>

<p>比较之下，第二种方法的性能最快，第一种方法稍微有点慢，而第三种方法则慢了一倍。</p>

<p>不过这下我又有点迷茫了——平常在做字符串拼接的时候，我都是用第一种方法，并且都是使用单引号来做字面量，因为一直觉得第二种方法里的双引号要对变量进行预先转义会有性能损失。可是这一次测试结果算下来，我之前的经验完全被推翻了啊！</p>

<p>哦，对了，忘记提到测试环境了：</p>

<p>``` bash environment
[17:11] caiknife@caiknife-ThinkPad-T400:~</p>

<blockquote><p>uname -a
Linux caiknife-ThinkPad-T400 3.2.0-59-generic #90-Ubuntu SMP Tue Jan 7 22:43:51 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
[17:11] caiknife@caiknife-ThinkPad-T400:~
php -v
PHP 5.4.25-1+sury.org~precise+2 (cli) (built: Feb 12 2014 10:45:30)
Copyright &copy; 1997-2014 The PHP Group
Zend Engine v2.4.0, Copyright &copy; 1998-2014 Zend Technologies</p>

<pre><code>with Xdebug v2.2.3, Copyright (c) 2002-2013, by Derick Rethans
</code></pre>

<p>```</p></blockquote>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给 CakePHP 的 Session Flash 做点小修改]]></title>
    <link href="http://caiknife.github.io/blog/2014/02/25/hack-session-flash-for-cakephp/"/>
    <updated>2014-02-25T11:59:36+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/02/25/hack-session-flash-for-cakephp</id>
    <content type="html"><![CDATA[<p>在 CakePHP 的教程中，CRUD 操作结束后跳转到新页面时，一般会做一个提示框显示在页面上。这个做法在教程中是按照下面的这么个流程写的：</p>

<!-- more -->


<p>首先在 Controller 里面做跳转之前：</p>

<p>``` php
public function add() {</p>

<pre><code>if ($this-&gt;request-&gt;is('post')) {
    $this-&gt;Post-&gt;create();
    if ($this-&gt;Post-&gt;save($this-&gt;request-&gt;data)) {
        /**
         * 跳转之前设置一条 Session 信息
         */
        $this-&gt;Session-&gt;setFlash(__('Your post has been saved.'));
        return $this-&gt;redirect(array('action' =&gt; 'index'));
    }
    $this-&gt;Session-&gt;setFlash(__('Unable to add your post.'));
}
</code></pre>

<p>}
```</p>

<p>在 View 上要做下面修改：</p>

<p>``` php</p>

<div id="content">
    <?php echo $this->Session->flash(); ?>
    <?php echo $this->fetch('content'); ?>
</div>


<p>```</p>

<p>上面代码中的 <code>&lt;?php echo $this-&gt;Session-&gt;flash(); ?&gt;</code> 的作用就是将前一次跳转中设置的 Session 跳转信息显示在页面上，随后删除 Session 中的跳转信息，以确保下一次不会再显示。</p>

<p>但是，默认情况下，这段跳转信息的 HTML 结构是这样的：</p>

<p>``` php</p>

<div id="flashMessage" class="message">Hello, world!</div>


<p>```</p>

<p>那么，如果要配合 BootStrap 一起使用的话，应该如何设置呢？咱们先来看看 SessionComponent 和 SessionHelper 的部分源代码。</p>

<p>``` php SessionComponent
public function setFlash($message, $element = &lsquo;default&rsquo;, $params = array(), $key = &lsquo;flash&rsquo;) {</p>

<pre><code>CakeSession::write('Message.' . $key, compact('message', 'element', 'params'));
</code></pre>

<p>}</p>

<p>```</p>

<p>很明显，在跳转之前调用 $this->Session->setFlash(__(&lsquo;Your post has been saved.&rsquo;)); ，会在 Session 中以 <code>Message{$key}</code> 作为 Key 写入对应的 <code>$message</code> ，<code>$element</code> ，<code>$params</code>。接着会在 SessionHelper 中调用：</p>

<p>``` php SessionHelper
public function flash($key = &lsquo;flash&rsquo;, $attrs = array()) {</p>

<pre><code>$out = false;

if (CakeSession::check('Message.' . $key)) {
    $flash = CakeSession::read('Message.' . $key);
    $message = $flash['message'];
    unset($flash['message']);

    if (!empty($attrs)) {
        $flash = array_merge($flash, $attrs);
    }

    if ($flash['element'] === 'default') {
        $class = 'message';
        if (!empty($flash['params']['class'])) {
            $class = $flash['params']['class'];
        }
        $out = '&lt;div id="' . $key . 'Message" class="' . $class . '"&gt;' . $message . '&lt;/div&gt;';
    } elseif (!$flash['element']) {
        $out = $message;
    } else {
        $options = array();
        if (isset($flash['params']['plugin'])) {
            $options['plugin'] = $flash['params']['plugin'];
        }
        $tmpVars = $flash['params'];
        $tmpVars['message'] = $message;
        $out = $this-&gt;_View-&gt;element($flash['element'], $tmpVars, $options);
    }
    CakeSession::delete('Message.' . $key);
}
return $out;
</code></pre>

<p>}
```</p>

<p>从上面默认的代码可以看出，如果 <code>$element</code> 为 <code>default</code> 的话，就是之前默认的 HTML 结构；如果没设置的话，则直接显示 <code>$message</code> 文本信息；如果设置成其他的值，就会到 <code>View/Elements</code> 下调用相对应的模板文件。</p>

<p>为此，我特别写了一个模板：</p>

<p>``` php notify.ctp</p>

<div id="flashMessage" class="alert <?php echo isset($status) ? 'alert-' . $status : ''; ?> <?php echo isset($block) && $block ? 'alert-block' : ''; ?> text-center">
    <a class="close" data-dismiss="alert">×</a>
    <?php echo h($message)?>
</div>


<p>```</p>

<p>这样调用的时候，只需要在 Controller 里用下面的代码即可，View 中不需要更改。最终在显示的时候，就会呈现出一个通栏的提示框，当然你也可以把它放在特定的 DIV 里，让它的样式能够符合你的需求。</p>

<p><code>php
$this-&gt;Session-&gt;setFlash("Hello, world!", 'notify' , array('status'=&gt;'success'));
</code></p>

<p>第三个参数中的 <code>status</code> 就是用来定制显示信息的样式，具体有哪些配置可以参考 <a href="http://v2.bootcss.com/components.html#alerts">http://v2.bootcss.com/components.html#alerts</a> 。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
</feed>
