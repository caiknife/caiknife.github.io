<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | 但行好事，莫问前程]]></title>
  <link href="http://caiknife.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2018-07-27T16:23:44+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[字符串拼接性能测试]]></title>
    <link href="http://caiknife.github.io/blog/2014/03/05/little-php-benchmark/"/>
    <updated>2014-03-05T16:35:37+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/03/05/little-php-benchmark</id>
    <content type="html"><![CDATA[<p>写这篇文章的目的是因为某天在群里有人出了一到笔试题——下面三种拼接字符串方式，哪一种的性能最快？</p>

<p>``` php 字符串拼接性能测试
&lt;?php
$z = $x . $y;</p>

<p>$z = &ldquo;$x$y&rdquo;;</p>

<p>$z = sprintf(&lsquo;%s%s&rsquo;, $x, $y);
```</p>

<!-- more -->


<p>我的第一直觉——第三种方式肯定是最慢的，因为要调用函数做额外的开销。在 PHP 中，使用语言特性要比使用函数的效率高，所以在平常工作中我会用 <code>$foo === null</code> 来代替 <code>is_null($foo)</code> 这样类似的技巧。</p>

<p>但是第一种和第二种方式哪个更快呢？于是我写了下面的这个测试脚本：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (bench.php)</span> <a href='/downloads/code/bench/bench.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: zcai</span>
</span><span class='line'><span class="sd"> * Date: 14-3-4</span>
</span><span class='line'><span class="sd"> * Time: 上午10:33</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * 比较三种方式下，字符串拼接最快的方法。</span>
</span><span class='line'><span class="sd"> * 1、字符串直接连接</span>
</span><span class='line'><span class="sd"> * 2、双引号内变量转义</span>
</span><span class='line'><span class="sd"> * 3、sprintf格式化</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Benchmark</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_timeStart</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_timeEnd</span>   <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_repeatTimes</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_formatters</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_repeatTimes</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">setRepeatTimes</span><span class="p">(</span><span class="nv">$repeatTimes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_repeatTimes</span> <span class="o">=</span> <span class="nv">$repeatTimes</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">addFormatter</span><span class="p">(</span><span class="nx">StringFormatter</span> <span class="nv">$formatter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_formatters</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$formatter</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">bench</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_formatters</span> <span class="k">as</span> <span class="nv">$formatter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_invokeFormatter</span><span class="p">(</span><span class="nv">$formatter</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">_invokeFormatter</span><span class="p">(</span><span class="nx">StringFormatter</span> <span class="nv">$formatter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_timeStart</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_repeatTimes</span><span class="p">;</span> <span class="o">++</span><span class="nv">$i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$formatter</span><span class="o">-&gt;</span><span class="na">format</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_timeEnd</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_timeEnd</span> <span class="o">-</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_timeStart</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">abstract</span> <span class="k">class</span> <span class="nc">StringFormatter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_firstString</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_secondString</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_result</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nv">$firstString</span><span class="p">,</span> <span class="nv">$secondString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span> <span class="o">=</span> <span class="nv">$firstString</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span> <span class="o">=</span> <span class="nv">$secondString</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getResult</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_result</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getFirstString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getSecondString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">abstract</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">format</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StringContactFormatter</span> <span class="k">extends</span> <span class="nx">StringFormatter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">format</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DoubleQuoteFormatter</span> <span class="k">extends</span> <span class="nx">StringFormatter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">format</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_result</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span><span class="si">}{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SprintfFormatter</span> <span class="k">extends</span> <span class="nx">StringFormatter</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">format</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_result</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;%s%s&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_firstString</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondString</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$benchmark</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Benchmark</span><span class="p">();</span>
</span><span class='line'><span class="nv">$benchmark</span><span class="o">-&gt;</span><span class="na">addFormatter</span><span class="p">(</span><span class="k">new</span> <span class="nx">StringContactFormatter</span><span class="p">(</span><span class="s1">&#39;cai&#39;</span><span class="p">,</span> <span class="s1">&#39;knife&#39;</span><span class="p">))</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">addFormatter</span><span class="p">(</span><span class="k">new</span> <span class="nx">DoubleQuoteFormatter</span><span class="p">(</span><span class="s1">&#39;cai&#39;</span><span class="p">,</span> <span class="s1">&#39;knife&#39;</span><span class="p">))</span>
</span><span class='line'>          <span class="o">-&gt;</span><span class="na">addFormatter</span><span class="p">(</span><span class="k">new</span> <span class="nx">SprintfFormatter</span><span class="p">(</span><span class="s1">&#39;cai&#39;</span><span class="p">,</span> <span class="s1">&#39;knife&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$benchmark</span><span class="o">-&gt;</span><span class="na">bench</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在笔记本上执行了若干次，得到下面的结果：</p>

<p>``` bash benchmark result
[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.025658130645752)
double(0.026356935501099)
double(0.050467967987061)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026144981384277)
double(0.025960922241211)
double(0.053239107131958)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.029561042785645)
double(0.026247978210449)
double(0.051438093185425)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026479005813599)
double(0.026005983352661)
double(0.05446195602417)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026879072189331)
double(0.026219129562378)
double(0.051171064376831)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026100873947144)
double(0.025912046432495)
double(0.051729917526245)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.025666952133179)
double(0.025691986083984)
double(0.051711082458496)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.025789022445679)
double(0.050994873046875)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.024961948394775)
double(0.025660991668701)
double(0.051864147186279)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.025777101516724)
double(0.025542020797729)
double(0.05191707611084)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.0258629322052)
double(0.02587890625)
double(0.050651073455811)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.027279138565063)
double(0.026965141296387)
double(0.05425500869751)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.027122020721436)
double(0.026250123977661)
double(0.053034067153931)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.026654005050659)
double(0.02558708190918)
double(0.052467823028564)</p></blockquote>

<p>[16:44] caiknife@caiknife-ThinkPad-T400:~/www/phptest/benchmark</p>

<blockquote><p>php string.php
double(0.02632212638855)
double(0.026074171066284)
double(0.051969051361084)
```</p></blockquote>

<p>比较之下，第二种方法的性能最快，第一种方法稍微有点慢，而第三种方法则慢了一倍。</p>

<p>不过这下我又有点迷茫了——平常在做字符串拼接的时候，我都是用第一种方法，并且都是使用单引号来做字面量，因为一直觉得第二种方法里的双引号要对变量进行预先转义会有性能损失。可是这一次测试结果算下来，我之前的经验完全被推翻了啊！</p>

<p>哦，对了，忘记提到测试环境了：</p>

<p>``` bash environment
[17:11] caiknife@caiknife-ThinkPad-T400:~</p>

<blockquote><p>uname -a
Linux caiknife-ThinkPad-T400 3.2.0-59-generic #90-Ubuntu SMP Tue Jan 7 22:43:51 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
[17:11] caiknife@caiknife-ThinkPad-T400:~
php -v
PHP 5.4.25-1+sury.org~precise+2 (cli) (built: Feb 12 2014 10:45:30)
Copyright &copy; 1997-2014 The PHP Group
Zend Engine v2.4.0, Copyright &copy; 1998-2014 Zend Technologies</p>

<pre><code>with Xdebug v2.2.3, Copyright (c) 2002-2013, by Derick Rethans
</code></pre>

<p>```</p></blockquote>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给 CakePHP 的 Session Flash 做点小修改]]></title>
    <link href="http://caiknife.github.io/blog/2014/02/25/hack-session-flash-for-cakephp/"/>
    <updated>2014-02-25T11:59:36+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/02/25/hack-session-flash-for-cakephp</id>
    <content type="html"><![CDATA[<p>在 CakePHP 的教程中，CRUD 操作结束后跳转到新页面时，一般会做一个提示框显示在页面上。这个做法在教程中是按照下面的这么个流程写的：</p>

<!-- more -->


<p>首先在 Controller 里面做跳转之前：</p>

<p>``` php
public function add() {</p>

<pre><code>if ($this-&gt;request-&gt;is('post')) {
    $this-&gt;Post-&gt;create();
    if ($this-&gt;Post-&gt;save($this-&gt;request-&gt;data)) {
        /**
         * 跳转之前设置一条 Session 信息
         */
        $this-&gt;Session-&gt;setFlash(__('Your post has been saved.'));
        return $this-&gt;redirect(array('action' =&gt; 'index'));
    }
    $this-&gt;Session-&gt;setFlash(__('Unable to add your post.'));
}
</code></pre>

<p>}
```</p>

<p>在 View 上要做下面修改：</p>

<p>``` php</p>

<div id="content">
    <?php echo $this->Session->flash(); ?>
    <?php echo $this->fetch('content'); ?>
</div>


<p>```</p>

<p>上面代码中的 <code>&lt;?php echo $this-&gt;Session-&gt;flash(); ?&gt;</code> 的作用就是将前一次跳转中设置的 Session 跳转信息显示在页面上，随后删除 Session 中的跳转信息，以确保下一次不会再显示。</p>

<p>但是，默认情况下，这段跳转信息的 HTML 结构是这样的：</p>

<p>``` php</p>

<div id="flashMessage" class="message">Hello, world!</div>


<p>```</p>

<p>那么，如果要配合 BootStrap 一起使用的话，应该如何设置呢？咱们先来看看 SessionComponent 和 SessionHelper 的部分源代码。</p>

<p>``` php SessionComponent
public function setFlash($message, $element = &lsquo;default&rsquo;, $params = array(), $key = &lsquo;flash&rsquo;) {</p>

<pre><code>CakeSession::write('Message.' . $key, compact('message', 'element', 'params'));
</code></pre>

<p>}</p>

<p>```</p>

<p>很明显，在跳转之前调用 $this->Session->setFlash(__(&lsquo;Your post has been saved.&rsquo;)); ，会在 Session 中以 <code>Message{$key}</code> 作为 Key 写入对应的 <code>$message</code> ，<code>$element</code> ，<code>$params</code>。接着会在 SessionHelper 中调用：</p>

<p>``` php SessionHelper
public function flash($key = &lsquo;flash&rsquo;, $attrs = array()) {</p>

<pre><code>$out = false;

if (CakeSession::check('Message.' . $key)) {
    $flash = CakeSession::read('Message.' . $key);
    $message = $flash['message'];
    unset($flash['message']);

    if (!empty($attrs)) {
        $flash = array_merge($flash, $attrs);
    }

    if ($flash['element'] === 'default') {
        $class = 'message';
        if (!empty($flash['params']['class'])) {
            $class = $flash['params']['class'];
        }
        $out = '&lt;div id="' . $key . 'Message" class="' . $class . '"&gt;' . $message . '&lt;/div&gt;';
    } elseif (!$flash['element']) {
        $out = $message;
    } else {
        $options = array();
        if (isset($flash['params']['plugin'])) {
            $options['plugin'] = $flash['params']['plugin'];
        }
        $tmpVars = $flash['params'];
        $tmpVars['message'] = $message;
        $out = $this-&gt;_View-&gt;element($flash['element'], $tmpVars, $options);
    }
    CakeSession::delete('Message.' . $key);
}
return $out;
</code></pre>

<p>}
```</p>

<p>从上面默认的代码可以看出，如果 <code>$element</code> 为 <code>default</code> 的话，就是之前默认的 HTML 结构；如果没设置的话，则直接显示 <code>$message</code> 文本信息；如果设置成其他的值，就会到 <code>View/Elements</code> 下调用相对应的模板文件。</p>

<p>为此，我特别写了一个模板：</p>

<p>``` php notify.ctp</p>

<div id="flashMessage" class="alert <?php echo isset($status) ? 'alert-' . $status : ''; ?> <?php echo isset($block) && $block ? 'alert-block' : ''; ?> text-center">
    <a class="close" data-dismiss="alert">×</a>
    <?php echo h($message)?>
</div>


<p>```</p>

<p>这样调用的时候，只需要在 Controller 里用下面的代码即可，View 中不需要更改。最终在显示的时候，就会呈现出一个通栏的提示框，当然你也可以把它放在特定的 DIV 里，让它的样式能够符合你的需求。</p>

<p><code>php
$this-&gt;Session-&gt;setFlash("Hello, world!", 'notify' , array('status'=&gt;'success'));
</code></p>

<p>第三个参数中的 <code>status</code> 就是用来定制显示信息的样式，具体有哪些配置可以参考 <a href="http://v2.bootcss.com/components.html#alerts">http://v2.bootcss.com/components.html#alerts</a> 。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 平台上安装 xdebug 扩展]]></title>
    <link href="http://caiknife.github.io/blog/2014/02/19/install-xdebug-on-windows/"/>
    <updated>2014-02-19T20:18:27+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/02/19/install-xdebug-on-windows</id>
    <content type="html"><![CDATA[<p><code>xdebug</code> 是一个非常非常好用的调试程序、追踪错误、性能分析的 PHP 扩展，可以在 <a href="http://xdebug.org/">http://xdebug.org/</a> 这里找到相关的文档。在 Ubuntu 下面安装 xdebug 非常简单，直接执行下面的命令即可。</p>

<p><code>bash
$ sudo apt-get install php5-xdebug
</code></p>

<!-- more -->


<p>但是在 Windows 上安装 xdebug ，就有点小麻烦了。首先我们一般是在 <a href="http://windows.php.net/download/">http://windows.php.net/download/</a> 这里下载 PHP 环境，我用的 PHP 版本是 5.4.X 系列，只有 x86 架构的环境。</p>

<p>首先配置好 PHP 环境，我使用的是 PHP 5.4.X Thread Safe 版本，所以在安装 xdebug 的时候，应该要用对应的文件是—— <a href="http://xdebug.org/files/php_xdebug-2.2.3-5.4-vc9.dll">php_xdebug-2.2.3-5.4-vc9.dll</a> ，千万不要选 64 位或者是 NTS 的版本，这样都无法正常启动 xdebug 。</p>

<p>下载好 DLL 文件之后，在 php.ini 文件中写入：</p>

<p>``` ini
zend_extension=D:/PHP5.4/ext/php_xdebug-2.2.3-5.4-vc9.dll</p>

<p>[xdebug]
xdebug.auto_trace=on<br/>
xdebug.collect_params=on
xdebug.collect_return=on
xdebug.profiler_enable=on
xdebug.trace_output_dir=&ldquo;D:/PHP5.4/xdebug/trace&rdquo;
xdebug.profiler_output_dir=&ldquo;D:/PHP5.4/xdebug/profiler&rdquo;
xdebug.remote_enable=on
xdebug.idekey=&ldquo;&rdquo;
xdebug.remote_handler=dbgp
xdebug.remote_host=localhost
xdebug.remote_port=9000
```</p>

<p>重启 Apache 之后，命令行下输入 <code>php -v</code>，就应该能看到如下的信息：</p>

<p>``` bash
PHP 5.4.23 (cli) (built: Dec 11 2013 00:56:37)
Copyright &copy; 1997-2013 The PHP Group
Zend Engine v2.4.0, Copyright &copy; 1998-2013 Zend Technologies</p>

<pre><code>with Xdebug v2.2.3, Copyright (c) 2002-2013, by Derick Rethans
</code></pre>

<p>```</p>

<p>今后，如果在程序中发生错误的话，就会出现经典的橙色背景，并且还有非常详细的 stack strace 信息，看看下面的图：</p>

<p><a href="/downloads/image/xdebug/1.jpg" title="" class="fancybox"><img src="/downloads/image/xdebug/1.jpg" alt="" /></a></p>

<p><a href="/downloads/image/xdebug/2.png" title="" class="fancybox"><img src="/downloads/image/xdebug/2.png" alt="" /></a></p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[递归与迭代]]></title>
    <link href="http://caiknife.github.io/blog/2014/02/15/recursion-and-iteration/"/>
    <updated>2014-02-15T12:01:21+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/02/15/recursion-and-iteration</id>
    <content type="html"><![CDATA[<p>虽然题目写的是《递归与迭代》这么一个 <code>geek</code> 的标题，不过接下来的故事我其实是想写一个<code>文艺女与理工男</code>的故事。</p>

<p>写这篇文章的动机来自 <a href="http://weibo.com/1649186337/AmLoK2Upy">http://weibo.com/1649186337/AmLoK2Upy</a> 。未来的社会，会写代码的人越来越多，编程就像今天的外语技能一样，会成为一项基本技能。</p>

<!-- more -->


<p>OK，先来设定一下故事背景：文艺女与理工男目前处在暧昧期，目前还没有确立关系，不过经常混在一起，理工男给文艺女普及一些电脑知识，文艺女教会理工男享受生活。</p>

<p>这一天，理工男又给文艺女上编程课了，当然教她的语言是世界上最好的语言——PHP，文艺女已经了解了这门语言的基本语法，今天理工男就要教她<code>递归</code>。</p>

<p>男：好，今天我们来学习递归。你知道递归是什么吗？</p>

<p>女：不知道，那我先去 Google 一下～咦，怎么会是这个样子？</p>

<p><a href="/downloads/image/recursion/recursion.jpg" title="递归 " class="fancybox"><img src="/downloads/image/recursion/recursion.jpg" alt="递归 " /></a></p>

<p>男：哈哈，果然让你碰到了这个坑。其实递归是指在函数的定义中使用函数自身的方法。高中的时候学过 fibonacci 数列吧？</p>

<p>女：嗯，这个我知道。f(x) = f(x-1) + f(x-2)，其中 f(1) = 1，f(2) = 1。</p>

<p>男：很好，你从这个公式里就可以看到函数调用了自身，之前你已经学过了函数如何定义和调用，下面来试着自己写一下代码吧？</p>

<p>女：好，我来试试。你看下面这个行不行？</p>

<p>``` php 使用递归的 fibonacci 数列
&lt;?php
/<em>*
 * 使用递归的 fibonacci 数列
 *
 * @param $n
 * @return bool|int
 </em>/
function fibonacci($n) {</p>

<pre><code>if ($n &lt; 0) {
    return false;
}
if ($n === 0) {
    return 0;
} elseif ($n === 1) {
    return 1;
}
return fibonacci($n - 1) + fibonacci($n - 2);
</code></pre>

<p>}</p>

<p>echo fibonacci(10);
```</p>

<p>男：哇，一下子就写对了，你是我见过最有编程天赋的女孩子，不如改行当程序员吧！你可以做 PHP 女神！</p>

<p>女：哼，本姑娘冰雪聪明，这点小意思难不倒我。</p>

<p>男：哦，那好吧，那你算一下 fibonacci 数列第 1000 个数字是多少？</p>

<p>女：换个参数就行了，看我的～咦，怎么结果是这样？</p>

<p><code>bash 栈溢出了
Fatal error: Maximum function nesting level of '100' reached, aborting!
</code></p>

<p>男：这牵涉到计算机系统中<code>栈</code>的概念和编程语言中使用<code>栈</code>来保存递归状态。你这个情况就是碰到栈溢出了。</p>

<p>女：栈是什么？溢出又是什么意思？</p>

<p>男：打个比方吧。你有一个瓶子和一堆小球，用来给递归的层数做一个计数器，每当递归的层数深入一层的时候，你就往瓶子里放一颗小球，直到把瓶子放满了……</p>

<p>女：瓶子放满了，后面的小球就再也放不进去了，递归层数就没办法继续做计数了，所以计算机就报错了，对不对？</p>

<p>男：Bingo！你真是太聪明了，一点就通啊，真的不考虑听我的建议转行当程序员？</p>

<p>女：哼，才不要～原来递归就好像《盗梦空间》里的多层梦境，栈的溢出就好比进入了 limbo 层，诺兰导演原来是个程序员！</p>

<p>男：你的这个解释很有新意……</p>

<p>女：那有没有别的办法求出第 1000 项的数字呢？</p>

<p>男：可以的，用迭代来代替递归即可。我之前教过你循环语句，你要不要试着改写一下代码，用循环来做？</p>

<p>女：好，那我试试。</p>

<p>``` php 使用迭代的 fibonacci 数列
&lt;?php
/<em>*
 * 使用迭代的 fibonacci 数列
 *
 * @param $n
 * @return bool|int
 </em>/
function fibonacci_with_iteration($n) {</p>

<pre><code>if ($n &lt; 0) {
    return false;
}
$fibo = array(0, 1);
for ($i = 2; $i &lt;= $n; ++$i) {
    $fibo[$i] = $fibo[$i - 1] + $fibo[$i - 2];
}
return $fibo[$n];
</code></pre>

<p>}</p>

<p>echo fibonacci_with_iteration(1000);
```</p>

<p>男：一点就通，果然很棒，不过你这个解法会造成大量内存空间的浪费，我重写一个版本给你吧。</p>

<p>``` php 节省内存空间的做法
&lt;?php
/<em>*
 * 节省内存空间的做法
 *
 * @param $n
 * @return bool|int
 </em>/
function fibonacci($n) {</p>

<pre><code>list($f0, $f1, $result) = array(0, 1, 1);
if ($n &lt; 0) {
    return false;
}
if ($n &lt; 2) {
    return 1;
}
for ($i = 2; $i &lt;= $n; ++$i) {
    $result = $f0 + $f1;
    $f0 = $f1;
    $f1 = $result;
}
return $result;
</code></pre>

<p>}</p>

<p>echo fibonacci(1000);
```</p>

<p>女：迭代这里看不懂啊……</p>

<p>男：呵呵，看不懂那我下次解释给你听，下回我再教你用面向对象的方式重写 fibonacci 数列的解决方案。</p>

<p>女：对象？你这么一个呆头呆脑的理工男还想有对象？</p>

<p>男：人艰不拆……</p>

<p>以上内容，纯属瞎掰，如有雷同，不胜荣幸。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始用 PHPStorm]]></title>
    <link href="http://caiknife.github.io/blog/2013/12/13/starting-phpstorm/"/>
    <updated>2013-12-13T10:27:54+08:00</updated>
    <id>http://caiknife.github.io/blog/2013/12/13/starting-phpstorm</id>
    <content type="html"><![CDATA[<p>一直以来都在用 Zend Studio 8 ，但是 ZS 的 Git 插件总是安装不上，实在是太坑爹了。前几天开始试用了 PHPStorm ，感觉真不错，接下来就应该开始迁移到这个新玩具上。</p>

<p>强大的插件功能也非常适合功能的扩展，现在我已经安装了 Markdown ，CakeStorm ，CodeGlance 等等插件，现在 PHPStorm 就能像 Sublime Text 一样扩展，而且更加强大。</p>

<!-- more -->


<p><a href="/downloads/image/phpstorm/phpstorm.png" title="PHPStorm " class="fancybox"><img src="/downloads/image/phpstorm/phpstorm.png" alt="PHPStorm " /></a></p>

<p><a href="/downloads/image/phpstorm/phpstorm2.png" title="PHPStorm " class="fancybox"><img src="/downloads/image/phpstorm/phpstorm2.png" alt="PHPStorm " /></a></p>

<p><a href="/downloads/image/phpstorm/phpstorm3.png" title="PHPStorm " class="fancybox"><img src="/downloads/image/phpstorm/phpstorm3.png" alt="PHPStorm " /></a></p>
]]></content>
  </entry>
  
</feed>
