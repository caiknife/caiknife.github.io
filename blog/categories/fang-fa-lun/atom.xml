<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 方法论 | CDEFGAB 1010110]]></title>
  <link href="http://caiknife.github.io/blog/categories/fang-fa-lun/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2019-02-21T12:21:03+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FEED流系统实现思想]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/28/zhong-xiao-xing-fedliu-xi-tong-shi-xian/"/>
    <updated>2018-11-28T17:21:04+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/28/zhong-xiao-xing-fedliu-xi-tong-shi-xian</id>
    <content type="html"><![CDATA[<p>从最早的Twitter、Facebook，到后来的微信朋友圈、信息流咨询，这些产品其实都是常见的FEED流系统。</p>

<p>那么今天思考一下，如何实现一个中小型FEED流系统。</p>

<!-- more -->


<p>在系统刚开始创建的时候，可以先考虑下面这两种方式：推模式和拉模式。</p>

<h3>推模式</h3>

<p>推模式，是发生在用户触发行为（发布新的动态，关注某个人，点赞）的时候。在触发时，用户的自身行为会记录到对应的行为表中，其次用户的行为也会记录到自己的粉丝对应动态表中。</p>

<p><a href="/downloads/image/feed/推模式.png" title="推模式 " class="fancybox"><img src="/downloads/image/feed/推模式.png" alt="推模式 " /></a></p>

<p>上面的流程大概是：</p>

<p><code>
用户A发布新的帖子（动态），帖子记录到帖子表（主表）中。
发帖行为塞到队列中。触发异步操作，消费者会先读取用户的粉丝列表（UID分表），依次写入到用户的动态表（UID分表）中。
前端读取用户动态FEED，使用过滤条件，读取用户的动态表（关联查询帖子表）。
</code></p>

<p>使用推方式，对需求变更是易适应的。</p>

<p>因为用户每一次的行为，我们都有存储相应的数据。即使变更，只需更改逻辑层代码。另外性能较好，后台数据已经准备好了，无需复杂的SQL查询。当然这样做，也存在很多弊端。</p>

<p><code>
如果在用户A发完动态后，其粉丝B取消关注了A。在这个时间差内，内容已经推送给粉丝B了。
数据量存储成本较大，假如一个用户的粉丝数是100万，在发帖后会写入100万条数据。
</code></p>

<h3>拉模式</h3>

<p>拉方式，是发生在粉丝拉取FEED时。粉丝拉取自己的动态，首先会检索自己的关注用户（UID分表）。得到关注的UID之后，再根据UID去查询关注用户发布的帖子。</p>

<p><a href="/downloads/image/feed/拉模式.png" title="拉模式 " class="fancybox"><img src="/downloads/image/feed/拉模式.png" alt="拉模式 " /></a></p>

<p>拉的模式相对是比较简单易实现的，另外对用户关系变更（新增，删除用户）是敏感的。其次也不存在数据存储压力。但在查询的时候，对帖子表本身压力是很大的。尤其是用户本身关注的人很多的话，会有很严重的性能问题。</p>

<p>下面可以使用另外一种方式来优化拉模式。</p>

<h3>拉方式优化-伪实时拉取</h3>

<p>用户在登录APP时，会发送用户活跃态到服务端。活跃信号塞到队列中，消费者依次读取活跃态UID，得到用户的关注者列表。得到关注者列表后，会去帖子表，查询关注人的发布的帖子。写到用户自己的FEED中。</p>

<p><a href="/downloads/image/feed/伪实时拉取.png" title="伪实时拉取 " class="fancybox"><img src="/downloads/image/feed/伪实时拉取.png" alt="伪实时拉取 " /></a></p>

<p>这种方式和对拉方式而言，能有效避免接口性能问题，相当于通过定时任务提前把用户的动态FEED跑出来。</p>

<p>和推方式比较，推是比较盲目的，这种方式只需针对活跃用户即可，能避免存储浪费。缺点在于实时性不好，用户登录APP后马上进入自己的FEED页，此时如果后台用户动态还没跑完，接口读取的就是历史数据了。当然这种方式不适合知乎，微博这种类型的APP的。</p>

<h3>拉方式优化-分区拉取</h3>

<p>分区拉取，是为了避免频繁查询单一帖子表所采用的一种优化手段。通过对帖子按照时间片分表，每次查询都能均摊到不同的表中，以此减轻主表的压力。</p>

<h3>推方式优化-定时推</h3>

<p>定时推，是以常驻进程的方式读取用户的发帖行为，再批量写入到粉丝的动态表中。这种方式和推方式差不多，只不过可以对多个发帖行为做聚合。</p>

<h3>推方式优化-特定用户推</h3>

<p>特定用户推，是推方式的一种优化方法。用户发送帖子时，只对活跃的粉丝用户写入。当然活跃用户的判定策略，是需要商定的。</p>

<h3>总结</h3>

<p>以上几种方案，都有自己的利弊和适用场景。选择最适合自己的就是最好的。</p>

<p>以上的方案还需要不断扩充完善。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思维导图：如何设计一个秒杀系统]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/24/ru-he-she-ji-ge-miao-sha-xi-tong/"/>
    <updated>2018-11-24T12:13:21+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/24/ru-he-she-ji-ge-miao-sha-xi-tong</id>
    <content type="html"><![CDATA[<p>秒杀是一个非常常见的应用场景了，我也做过一些秒杀类的需求。</p>

<p>做过这么多同类型的需求之后，我查阅了一些资料，总结了一下在设计一个秒杀系统中，可能会用到的一些知识点。</p>

<!-- more -->


<p><a href="/downloads/image/miaosha/miaosha.png" title="如何设计一个秒杀系统 " class="fancybox"><img src="/downloads/image/miaosha/miaosha.png" alt="如何设计一个秒杀系统 " /></a></p>

<p>这个思维导图我还会不断完善，不断迭代。</p>

<p>无规矩不成方圆，方法论就是规矩，动手实操才能成方圆。</p>

<p>这就是知识带来的力量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP知识体系]]></title>
    <link href="http://caiknife.github.io/blog/2018/09/13/phpzhi-shi-ti-xi/"/>
    <updated>2018-09-13T10:06:52+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/09/13/phpzhi-shi-ti-xi</id>
    <content type="html"><![CDATA[<p>最近花了几天时间写了一个有关PHP的思维导图。</p>

<!-- more -->


<p>虽然已经工作了很多年了，但是之前一直很少静下来给自己做一次深刻的总结。</p>

<p>这一次，就当写了一次给自己的My Back Pages。</p>

<p><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=x01784z0bba&auto=0" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>思维导图源文件下载点击这里：<a href="/downloads/image/php/php.xmind">PHP知识体系</a></p>

<p>原图在下面：</p>

<p><a href="/downloads/image/php/php.png" title="PHP知识体系 " class="fancybox"><img src="/downloads/image/php/php.png" alt="PHP知识体系 " /></a></p>
]]></content>
  </entry>
  
</feed>
