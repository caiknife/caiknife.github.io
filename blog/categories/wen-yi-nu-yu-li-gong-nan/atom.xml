<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 文艺女与理工男 | 但行好事，莫问前程]]></title>
  <link href="http://caiknife.github.io/blog/categories/wen-yi-nu-yu-li-gong-nan/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2018-09-13T10:53:20+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[递归与迭代]]></title>
    <link href="http://caiknife.github.io/blog/2014/02/15/recursion-and-iteration/"/>
    <updated>2014-02-15T12:01:21+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/02/15/recursion-and-iteration</id>
    <content type="html"><![CDATA[<p>虽然题目写的是《递归与迭代》这么一个 <code>geek</code> 的标题，不过接下来的故事我其实是想写一个<code>文艺女与理工男</code>的故事。</p>

<p>写这篇文章的动机来自 <a href="http://weibo.com/1649186337/AmLoK2Upy">http://weibo.com/1649186337/AmLoK2Upy</a> 。未来的社会，会写代码的人越来越多，编程就像今天的外语技能一样，会成为一项基本技能。</p>

<!-- more -->


<p>OK，先来设定一下故事背景：文艺女与理工男目前处在暧昧期，目前还没有确立关系，不过经常混在一起，理工男给文艺女普及一些电脑知识，文艺女教会理工男享受生活。</p>

<p>这一天，理工男又给文艺女上编程课了，当然教她的语言是世界上最好的语言——PHP，文艺女已经了解了这门语言的基本语法，今天理工男就要教她<code>递归</code>。</p>

<p>男：好，今天我们来学习递归。你知道递归是什么吗？</p>

<p>女：不知道，那我先去 Google 一下～咦，怎么会是这个样子？</p>

<p><a href="/downloads/image/recursion/recursion.jpg" title="递归 " class="fancybox"><img src="/downloads/image/recursion/recursion.jpg" alt="递归 " /></a></p>

<p>男：哈哈，果然让你碰到了这个坑。其实递归是指在函数的定义中使用函数自身的方法。高中的时候学过 fibonacci 数列吧？</p>

<p>女：嗯，这个我知道。f(x) = f(x-1) + f(x-2)，其中 f(1) = 1，f(2) = 1。</p>

<p>男：很好，你从这个公式里就可以看到函数调用了自身，之前你已经学过了函数如何定义和调用，下面来试着自己写一下代码吧？</p>

<p>女：好，我来试试。你看下面这个行不行？</p>

<p>``` php 使用递归的 fibonacci 数列
&lt;?php
/<em>*
 * 使用递归的 fibonacci 数列
 *
 * @param $n
 * @return bool|int
 </em>/
function fibonacci($n) {</p>

<pre><code>if ($n &lt; 0) {
    return false;
}
if ($n === 0) {
    return 0;
} elseif ($n === 1) {
    return 1;
}
return fibonacci($n - 1) + fibonacci($n - 2);
</code></pre>

<p>}</p>

<p>echo fibonacci(10);
```</p>

<p>男：哇，一下子就写对了，你是我见过最有编程天赋的女孩子，不如改行当程序员吧！你可以做 PHP 女神！</p>

<p>女：哼，本姑娘冰雪聪明，这点小意思难不倒我。</p>

<p>男：哦，那好吧，那你算一下 fibonacci 数列第 1000 个数字是多少？</p>

<p>女：换个参数就行了，看我的～咦，怎么结果是这样？</p>

<p><code>bash 栈溢出了
Fatal error: Maximum function nesting level of '100' reached, aborting!
</code></p>

<p>男：这牵涉到计算机系统中<code>栈</code>的概念和编程语言中使用<code>栈</code>来保存递归状态。你这个情况就是碰到栈溢出了。</p>

<p>女：栈是什么？溢出又是什么意思？</p>

<p>男：打个比方吧。你有一个瓶子和一堆小球，用来给递归的层数做一个计数器，每当递归的层数深入一层的时候，你就往瓶子里放一颗小球，直到把瓶子放满了……</p>

<p>女：瓶子放满了，后面的小球就再也放不进去了，递归层数就没办法继续做计数了，所以计算机就报错了，对不对？</p>

<p>男：Bingo！你真是太聪明了，一点就通啊，真的不考虑听我的建议转行当程序员？</p>

<p>女：哼，才不要～原来递归就好像《盗梦空间》里的多层梦境，栈的溢出就好比进入了 limbo 层，诺兰导演原来是个程序员！</p>

<p>男：你的这个解释很有新意……</p>

<p>女：那有没有别的办法求出第 1000 项的数字呢？</p>

<p>男：可以的，用迭代来代替递归即可。我之前教过你循环语句，你要不要试着改写一下代码，用循环来做？</p>

<p>女：好，那我试试。</p>

<p>``` php 使用迭代的 fibonacci 数列
&lt;?php
/<em>*
 * 使用迭代的 fibonacci 数列
 *
 * @param $n
 * @return bool|int
 </em>/
function fibonacci_with_iteration($n) {</p>

<pre><code>if ($n &lt; 0) {
    return false;
}
$fibo = array(0, 1);
for ($i = 2; $i &lt;= $n; ++$i) {
    $fibo[$i] = $fibo[$i - 1] + $fibo[$i - 2];
}
return $fibo[$n];
</code></pre>

<p>}</p>

<p>echo fibonacci_with_iteration(1000);
```</p>

<p>男：一点就通，果然很棒，不过你这个解法会造成大量内存空间的浪费，我重写一个版本给你吧。</p>

<p>``` php 节省内存空间的做法
&lt;?php
/<em>*
 * 节省内存空间的做法
 *
 * @param $n
 * @return bool|int
 </em>/
function fibonacci($n) {</p>

<pre><code>list($f0, $f1, $result) = array(0, 1, 1);
if ($n &lt; 0) {
    return false;
}
if ($n &lt; 2) {
    return 1;
}
for ($i = 2; $i &lt;= $n; ++$i) {
    $result = $f0 + $f1;
    $f0 = $f1;
    $f1 = $result;
}
return $result;
</code></pre>

<p>}</p>

<p>echo fibonacci(1000);
```</p>

<p>女：迭代这里看不懂啊……</p>

<p>男：呵呵，看不懂那我下次解释给你听，下回我再教你用面向对象的方式重写 fibonacci 数列的解决方案。</p>

<p>女：对象？你这么一个呆头呆脑的理工男还想有对象？</p>

<p>男：人艰不拆……</p>

<p>以上内容，纯属瞎掰，如有雷同，不胜荣幸。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[段子]]></title>
    <link href="http://caiknife.github.io/blog/2014/02/10/duanzi/"/>
    <updated>2014-02-10T15:27:32+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/02/10/duanzi</id>
    <content type="html"><![CDATA[<p>作为一个程序猿和理工男，要积极勇敢地开展批评与自我批评，不留余力地黑别人和自黑，于是，我想开始写点段子。</p>

<p>这个段子系列就叫<code>文艺女与理工男</code>吧，当然还是不定期更新，至于好不好笑嘛，我也不知道……</p>

<p>以下内容，纯属虚构，如有雷同，你咬我啊！</p>

<!-- more -->


<h3>Vol 1</h3>

<p>女：“你知道《夜空中最亮的星》吗？”</p>

<p>男：“哦，是金星。有些人说是天狼星，其实那是不对的，在地球上看到金星的星等是-4以上，比任何恒星都要明亮，天狼星的星等只有-1.5”</p>

<p>女：“……你们理工男真没情调。”</p>

<h3>Vol 2</h3>

<p>女：“你知道《消失的光年》吗？”</p>

<p>男：“光年是天文学上的长度单位，是指光在真空中用一年时间传播的距离，你看维基百科 <a href="http://zh.wikipedia.org/wiki/%E5%85%89%E5%B9%B4">http://zh.wikipedia.org/wiki/%E5%85%89%E5%B9%B4</a>，至于这个什么消失的光年吧，你确定这么说不是逻辑有问题？”</p>

<p>女：“……你们理工男真没情调”</p>

<h3>Vol 3</h3>

<p>男：“你知道莱特币吗？”</p>

<p>女：“知道啊，几十年前就有这首歌了。”</p>

<p>男：“什么……？”</p>

<p>女：“披头四乐队啊，他们有首歌叫《Let it be》，副歌部分就是这么唱的——let it be~ let it be~ let it be~ let it be~”</p>

<p>男：“你让我冷静一下……”</p>

<p>当程序猿不能太严肃了，得有点幽默感，嗯哼～ Have a nice day！</p>
]]></content>
  </entry>
  
</feed>
