<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | 但行好事，莫问前程]]></title>
  <link href="http://caiknife.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2018-10-16T16:54:02+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RVM使用]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/16/rvmshi-yong/"/>
    <updated>2018-10-16T16:07:18+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/16/rvmshi-yong</id>
    <content type="html"><![CDATA[<p>之前因为 Ruby 版本的问题，博客一直用不了。前段时间使用了 RVM 来管理 Ruby 的版本，所以博客又复活了。</p>

<p>所以今天就来总结一下如何用 RVM 来管理不同的 Ruby 版本。</p>

<!-- more -->


<h2>RVM 的安装</h2>

<p>先安装 RVM
``` bash
gpg &mdash;keyserver hkp://keys.gnupg.net &mdash;recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</p>

<p>\curl -sSL <a href="https://get.rvm.io">https://get.rvm.io</a> | bash -s stable
```</p>

<h2>Ruby 的安装和切换</h2>

<p>列出已知的 Ruby 版本
<code>bash
rvm list known
</code></p>

<p>安装一个 Ruby 版本
<code>bash
rvm install 2.2.0
</code></p>

<p>切换 Ruby 版本
<code>bash
rvm use 2.2.0
</code></p>

<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本
<code>bash
rvm use 2.2.0 --default
</code></p>

<p>查询已经安装的ruby
<code>bash
rvm list
</code></p>

<p>卸载一个已安装版本
<code>bash
rvm remove 1.8.7
</code></p>

<h2>gemset 的使用</h2>

<p>RVM 不仅可以提供一个多 Ruby 版本共存的环境，还可以根据项目管理不同的 gemset。gemset 可以理解为是一个独立的虚拟 gem 环境，每一个 gemset 都是相互独立的。</p>

<p>比如你有两个项目，一个是 Rails 2.3 一个是 rails3. gemset 可以帮你便捷的建立两套 gem 开发环境，并且方便的切换。gemset 是附加在 Ruby 语言版本下面的，例如你用了 1.9.2, 建立了一个叫 rails3 的 gemset,当切换到 1.8.7 的时候，rails3 这个 gemset 并不存在。</p>

<p>建立 gemset
<code>bash
rvm use 1.8.7
rvm gemset create rails23
</code></p>

<p>然后可以设定已建立的 gemset 做为当前环境.use 可以用来切换语言或者 gemset，前提是他们已经被安装(或者建立)。并可以在 list 命令中看到。
<code>bash
rvm use 1.8.7
rvm use 1.8.7@rails23
</code>
然后所有安装的 gem 都是安装在这个 gemset 之下。</p>

<p>列出当前 Ruby 的 gemset
<code>bash
rvm gemset list
</code></p>

<p>如果你想清空一个 gemset 的所有 gem， 想重新安装所有 gem，可以这样
<code>bash
rvm gemset empty 1.8.7@rails23
</code></p>

<p>删除一个 gemset
<code>bash
rvm gemset delete rails2-3
</code></p>

<p>RVM 还可以自动加载 gemset。 例如我们有一个 Rails 3.1.3 项目，需要 1.9.3 版本 Ruby，整个流程可以这样。
<code>bash
rvm install 1.9.3
rvm use 1.9.3
rvm gemset create rails313
rvm use 1.9.3@rails313
</code></p>

<p>下面进入到项目目录，建立一个 .rvmrc 文件。在这个文件里可以很简单的加一个命令：
<code>bash
rvm use 1.9.3@rails313
</code>
然后无论你当前 Ruby 设置是什么，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.</p>

<h2>使用 .ruby-gemset 和 .ruby-version</h2>

<p>在项目目录下创建这两个文件 <code>.ruby-gemset</code> 和 <code>.ruby-version</code>，在 <code>.ruby-gemset</code> 中填入 gemset 的名称，在 <code>.ruby-version</code> 填入 Ruby 版本的名称，当 cd 到这个目录的时候，就会自动加载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改了一下zsh主题]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/12/xiu-gai-liao-%5B%3F%5D-xia-zshzhu-ti/"/>
    <updated>2018-10-12T15:41:19+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/12/xiu-gai-liao-[?]-xia-zshzhu-ti</id>
    <content type="html"><![CDATA[<p>把原来的 zsh 主题做了一下修改。</p>

<!-- more -->


<p>``` bash</p>

<h1>Color shortcuts</h1>

<p>RED=$fg[red]
YELLOW=$fg[yellow]
GREEN=$fg[green]
WHITE=$fg[white]
BLUE=$fg[blue]
RED_BOLD=$fg_bold[red]
YELLOW_BOLD=$fg_bold[yellow]
GREEN_BOLD=$fg_bold[green]
WHITE_BOLD=$fg_bold[white]
BLUE_BOLD=$fg_bold[blue]
RESET_COLOR=$reset_color</p>

<h1>Format for git_prompt_info()</h1>

<p>ZSH_THEME_GIT_PROMPT_PREFIX=&ldquo;&rdquo;
ZSH_THEME_GIT_PROMPT_SUFFIX=&ldquo;&rdquo;</p>

<h1>Format for parse_git_dirty()</h1>

<p>ZSH_THEME_GIT_PROMPT_DIRTY=&ldquo; %{$RED%}(*)&rdquo;
ZSH_THEME_GIT_PROMPT_CLEAN=&ldquo;&rdquo;</p>

<h1>Format for git_prompt_status()</h1>

<p>ZSH_THEME_GIT_PROMPT_UNMERGED=&ldquo; %{$RED%}unmerged&rdquo;
ZSH_THEME_GIT_PROMPT_DELETED=&ldquo; %{$RED%}deleted&rdquo;
ZSH_THEME_GIT_PROMPT_RENAMED=&ldquo; %{$YELLOW%}renamed&rdquo;
ZSH_THEME_GIT_PROMPT_MODIFIED=&ldquo; %{$YELLOW%}modified&rdquo;
ZSH_THEME_GIT_PROMPT_ADDED=&ldquo; %{$GREEN%}added&rdquo;
ZSH_THEME_GIT_PROMPT_UNTRACKED=&ldquo; %{$WHITE%}untracked&rdquo;</p>

<h1>Format for git_prompt_ahead()</h1>

<p>ZSH_THEME_GIT_PROMPT_AHEAD=&ldquo; %{$RED%}(!)&rdquo;</p>

<h1>Format for git_prompt_long_sha() and git_prompt_short_sha()</h1>

<p>ZSH_THEME_GIT_PROMPT_SHA_BEFORE=&ldquo; %{$WHITE%}[%{$YELLOW%}&rdquo;
ZSH_THEME_GIT_PROMPT_SHA_AFTER=&ldquo;%{$WHITE%}]&rdquo;</p>

<h1>Prompt format</h1>

<p>PROMPT=&lsquo;%{$BLUE_BOLD%}%D{[%H:%M]}%{$RESET_COLOR%} %{$GREEN_BOLD%}%n%{$RESET_COLOR%}@%{$RED_BOLD%}%m%{$RESET_COLOR%}:%{$YELLOW_BOLD%}%~%u$(parse_git_dirty)$(git_prompt_ahead)%{$RESET_COLOR%}
%{$GREEN_BOLD%}&ndash;>%{$RESET_COLOR%}&rsquo;
RPROMPT=&lsquo;%{$GREEN_BOLD%}$(current_branch)$(git_prompt_short_sha)$(git_prompt_status)%{$RESET_COLOR%}&rsquo;
```</p>

<p>注意不要留最后一行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一句话 Shell 脚本（3）]]></title>
    <link href="http://caiknife.github.io/blog/2014/02/26/happy-shell-script/"/>
    <updated>2014-02-26T10:00:43+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/02/26/happy-shell-script</id>
    <content type="html"><![CDATA[<p>CakePHP 会在自己的项目文件夹的 <code>app/tmp</code> 下建立缓存文件，用来保存数据库表结构。在开启 debug 的情况下，每次发起请求后都会刷新缓存，但是在生产环境下，一般都是关闭了 debug 的，如果某次功能升级修改了表结构的话，缓存并不会主动更新，如此一来就会产生 InternalError 。</p>

<p>看来还是要写个脚本来手动删除这些缓存文件。</p>

<!-- more -->


<p>先看看缓存目录结构是什么样的：</p>

<p>``` bash</p>

<blockquote><p>tree
.
├── cache
│   ├── cake_toolbar_cache19c90b767c0870ceefeb6659d993da93
│   ├── models
│   │   ├── ccqo_cake_model_default_ccqo_accounts
│   │   ├── ccqo_cake_model_default_ccqo_articles
│   │   ├── ccqo_cake_model_default_ccqo_list
│   │   ├── ccqo_cake_model_default_ccqo_train_divisions
│   │   ├── ccqo_cake_model_default_ccqo_trainees
│   │   ├── ccqo_cake_model_default_ccqo_trainers
│   │   └── ccqo_cake_model_default_ccqo_train_infos
│   └── persistent
│       ├── ccqo_cake_core_cake_zh-cn
│       ├── ccqo_cake_core_debug_kit_zh-cn
│       ├── ccqo_cake_core_file_map
│       └── ccqo_cake_core_method_cache
└── logs
```</p></blockquote>

<p>要删除的是缓存文件，目录不用删除。 OK ，那么就写个脚本一次性全部搞定好了。</p>

<p>先想到的是用 <code>find</code> 命令配合管道符来用：</p>

<p>``` bash</p>

<blockquote><p>find . -type f | xargs rm -f
```</p></blockquote>

<p>结果报了权限错误：</p>

<p>``` bash</p>

<blockquote><p>find . -type f | xargs rm -f
rm: 无法删除"./cache/persistent/ccqo_cake_core_cake_zh-cn": 权限不够
rm: 无法删除"./cache/persistent/ccqo_cake_core_file_map": 权限不够
rm: 无法删除"./cache/persistent/ccqo_cake_core_debug_kit_zh-cn": 权限不够
rm: 无法删除"./cache/persistent/ccqo_cake_core_method_cache": 权限不够
rm: 无法删除"./cache/models/ccqo_cake_model_default_ccqo_list": 权限不够
rm: 无法删除"./cache/models/ccqo_cake_model_default_ccqo_train_divisions": 权限不够
rm: 无法删除"./cache/models/ccqo_cake_model_default_ccqo_trainers": 权限不够
rm: 无法删除"./cache/models/ccqo_cake_model_default_ccqo_articles": 权限不够
rm: 无法删除"./cache/models/ccqo_cake_model_default_ccqo_train_infos": 权限不够
rm: 无法删除"./cache/models/ccqo_cake_model_default_ccqo_trainees": 权限不够
rm: 无法删除"./cache/models/ccqo_cake_model_default_ccqo_accounts": 权限不够
```</p></blockquote>

<p>这些文件是由 <code>www-data</code> 帐号生成的，所以我自然不能删除，所以加上 <code>sudo</code> 再删除吧。</p>

<p>几分钟之后又想了想，其实不用管道符，完全可以用 <code>find</code> 自己就可以完成了：</p>

<p>``` bash</p>

<blockquote><p>find . -type f -exec sudo rm -f {} +
```</p></blockquote>

<p>打完收工！</p>

<p>最近越来越感觉随着年纪的增长，接触的事情越来越多，记忆力没有以前好了。高中时代特别自豪地过目不忘的本事也指望不上了，看来还是好记性不如烂笔头，得养成一个良好的记录和总结的习惯，才会对将来的工作有所帮助。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[awk 使用]]></title>
    <link href="http://caiknife.github.io/blog/2013/11/01/awk-usage/"/>
    <updated>2013-11-01T12:00:00+08:00</updated>
    <id>http://caiknife.github.io/blog/2013/11/01/awk-usage</id>
    <content type="html"><![CDATA[<p>Linux下的<code>sed</code>和<code>awk</code>是两个非常强大的文本处理工具，今天先总结一下<code>awk</code>的用法。</p>

<p>首先看看<code>awk</code>的帮助文档：</p>

<!-- more -->


<p>``` bash awk help</p>

<blockquote><p>awk &mdash;help
用法: awk [POSIX 或 GNU 风格选项] -f 脚本文件 [&mdash;] 文件 &hellip;
用法: awk [POSIX 或 GNU 风格选项] [&mdash;] &lsquo;程序&rsquo; 文件 &hellip;
POSIX 选项:           GNU 长选项:</p>

<pre><code>-f 脚本文件     --file=脚本文件
-F fs           --field-separator=fs
-v var=val      --assign=var=val
-m[fr] val
-O          --optimize
-W compat       --compat
-W copyleft     --copyleft
-W copyright        --copyright
-W dump-variables[=file]    --dump-variables[=file]
-W exec=file        --exec=file
-W gen-po       --gen-po
-W help         --help
-W lint[=fatal]     --lint[=fatal]
-W lint-old     --lint-old
-W non-decimal-data --non-decimal-data
-W profile[=file]   --profile[=file]
-W posix        --posix
-W re-interval      --re-interval
-W source=program-text  --source=program-text
-W traditional      --traditional
-W usage        --usage
-W use-lc-numeric   --use-lc-numeric
-W version      --version
</code></pre></blockquote>

<p>提交错误报告请参考“gawk.info”中的“Bugs”页，它位于打印版本中的“Reporting
Problems and Bugs”一节</p>

<p>翻译错误请发信至 <a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#116;&#114;&#97;&#110;&#115;&#x6c;&#x61;&#116;&#105;&#x6f;&#110;&#x2d;&#x74;&#101;&#x61;&#x6d;&#45;&#x7a;&#x68;&#45;&#x63;&#110;&#x40;&#x6c;&#105;&#115;&#x74;&#115;&#x2e;&#115;&#111;&#x75;&#114;&#99;&#x65;&#102;&#x6f;&#x72;&#x67;&#101;&#46;&#x6e;&#x65;&#x74;">&#x74;&#114;&#97;&#x6e;&#x73;&#x6c;&#x61;&#116;&#105;&#111;&#x6e;&#45;&#116;&#101;&#97;&#109;&#x2d;&#x7a;&#x68;&#x2d;&#x63;&#x6e;&#64;&#x6c;&#105;&#x73;&#x74;&#115;&#46;&#115;&#x6f;&#x75;&#114;&#x63;&#101;&#x66;&#x6f;&#x72;&#x67;&#x65;&#x2e;&#110;&#x65;&#116;</a></p>

<p>gawk 是一个模式扫描及处理语言。缺省情况下它从标准输入读入并写至标准输出。</p>

<p>范例:</p>

<pre><code>gawk '{ sum += $1 }; END { print sum }' file
gawk -F: '{ print $1 }' /etc/passwd
</code></pre>

<p>```</p>

<h2>上手起步</h2>

<p>以<code>/etc/passwd</code>这个文件为例，这个文件保存了linux下所有用户的信息，字段之间用<code>:</code>分割。那么，如果我想看到所有的用户和对应的主目录，用下面的命令就可以完成：</p>

<p>``` bash</p>

<blockquote><p>awk -F: &lsquo;{print $1, $6}&rsquo; /etc/passwd # 第一列是用户名，第六列是主目录
```</p></blockquote>

<p>输出结果：</p>

<p><code>bash
root /root
daemon /usr/sbin
bin /bin
sys /dev
sync /bin
games /usr/games
man /var/cache/man
lp /var/spool/lpd
mail /var/mail
news /var/spool/news
uucp /var/spool/uucp
proxy /bin
www-data /var/www
...
</code></p>

<h2>过滤记录</h2>

<p>如果想过滤记录的话，可以在语句中加上条件判断：</p>

<p>``` bash</p>

<blockquote><p>awk -F: &lsquo;$3==$4 {print $1, $6}&rsquo; /etc/passwd # 显示uid==gid的记录</p>

<p>awk -F: &lsquo;$3&lt;=100 {print $1, $6}&rsquo; /etc/passwd # 显示uid小于等于100的记录
```</p></blockquote>

<h2>指定分割符</h2>

<p><code>awk</code>的<code>-F</code>参数可以指定输入时的分割符，同时设置<code>OFS</code>参数，可以指定输出分割符：</p>

<p>``` bash</p>

<blockquote><p>awk -F: &lsquo;$3==$4 {print $1, $3, $6}&rsquo; OFS=&ldquo;\t&rdquo; /etc/passwd
root    0   /root
daemon  1   /usr/sbin
bin 2   /bin
sys 3   /dev
lp  7   /var/spool/lpd
mail    8   /var/mail
news    9   /var/spool/news
uucp    10  /var/spool/uucp
proxy   13  /bin
www-data    33  /var/www
backup  34  /var/backups
list    38  /var/list
irc 39  /var/run/ircd
gnats   41  /var/lib/gnats
nobody  65534   /nonexistent
caiknife    1000    /home/caiknife
```</p></blockquote>

<h2>字符串匹配</h2>

<p><code>awk</code>还可以使用类似正则表达式的方式来进行字符串的匹配，比如：</p>

<p>``` bash</p>

<blockquote><p>awk -F: &lsquo;$1 ~ /caiknife/ {print $1, $6}&rsquo; OFS=&ldquo;\t&rdquo; /etc/passwd
```</p></blockquote>

<p>使用<code>!</code>可以进行模式取反：</p>

<p>``` bash</p>

<blockquote><p>awk -F: &lsquo;$1 !~ /caiknife/ {print $1, $6}&rsquo; OFS=&ldquo;\t&rdquo; /etc/passwd
```</p></blockquote>

<p>常用的方法就是这些，但是还有很重要的内建变量：</p>

<table>
    <tbody>
        <tr><td>$0</td><td>当前记录（这个变量中存放着整个行的内容）</td></tr>
        <tr><td>$1~$n</td><td>当前记录的第n个字段，字段间由FS分隔</td></tr>
        <tr><td>FS</td><td>输入字段分隔符 默认是空格或Tab</td></tr>
        <tr><td>NF</td><td>当前记录中的字段个数，就是有多少列</td></tr>
        <tr><td>NR</td><td>已经读出的记录数，就是行号，从1开始，如果有多个文件话，这个值也是不断累加中。</td></tr>
        <tr><td>FNR</td><td>当前记录数，与NR不同的是，这个值会是各个文件自己的行号</td></tr>
        <tr><td>RS</td><td>输入的记录分隔符， 默认为换行符</td></tr>
        <tr><td>OFS</td><td>输出字段分隔符， 默认也是空格</td></tr>
        <tr><td>ORS</td><td>输出的记录分隔符，默认为换行符</td></tr>
        <tr><td>FILENAME</td><td>当前输入文件的名字</td></tr>
    </tbody>
</table>


<p><code>awk</code>是神器，务必一定要好好使用，深入了解。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装 zsh]]></title>
    <link href="http://caiknife.github.io/blog/2013/10/01/install-zsh/"/>
    <updated>2013-10-01T22:01:00+08:00</updated>
    <id>http://caiknife.github.io/blog/2013/10/01/install-zsh</id>
    <content type="html"><![CDATA[<p>前几天在看<a href="http://read.douban.com/ebook/1531222/">MacTalk·人生元编程</a>的时候谈到了 <code>zsh</code> 这个很有意思的 shell 。前两天安装好，用下来感觉相当不错，特别总结一下。</p>

<p>安装 zsh 并设置为默认 shell:</p>

<p>``` bash
$ sudo apt-get install zsh</p>

<p>$ chsh -s /bin/zsh
```</p>

<p>接着安装 <code>oh-my-zsh</code> 这个强大的扩展脚本：</p>

<p><code>bash
$ curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh
</code></p>

<p>或者：</p>

<p><code>bash
$ wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
</code></p>

<!-- more -->


<p>安装完成之后，就会在 home 目录下生成一个 <code>.zshrc</code> 文件，这里可以做很多的设置，比如设置插件、加载其他 bash 文件等等，<code>zsh</code> 是完全兼容 <code>bash</code> 的。我就在这个文件里加载了默认的 <code>.bash_aliases</code> 文件。</p>

<p>在这个文件里还有一个叫做 <code>ZSH_THEME</code> 的设置，用来配置 shell 的外观。目前我的外观配置如下：</p>

<p>``` bash ~/.oh-my-zsh/themes/caiknife.zsh-theme</p>

<h1>Color shortcuts</h1>

<p>RED=$fg[red]
YELLOW=$fg[yellow]
GREEN=$fg[green]
WHITE=$fg[white]
BLUE=$fg[blue]
RED_BOLD=$fg_bold[red]
YELLOW_BOLD=$fg_bold[yellow]
GREEN_BOLD=$fg_bold[green]
WHITE_BOLD=$fg_bold[white]
BLUE_BOLD=$fg_bold[blue]
RESET_COLOR=$reset_color</p>

<h1>Format for git_prompt_info()</h1>

<p>ZSH_THEME_GIT_PROMPT_PREFIX=&ldquo;&rdquo;
ZSH_THEME_GIT_PROMPT_SUFFIX=&ldquo;&rdquo;</p>

<h1>Format for parse_git_dirty()</h1>

<p>ZSH_THEME_GIT_PROMPT_DIRTY=&ldquo; %{$RED%}(*)&rdquo;
ZSH_THEME_GIT_PROMPT_CLEAN=&ldquo;&rdquo;</p>

<h1>Format for git_prompt_status()</h1>

<p>ZSH_THEME_GIT_PROMPT_UNMERGED=&ldquo; %{$RED%}unmerged&rdquo;
ZSH_THEME_GIT_PROMPT_DELETED=&ldquo; %{$RED%}deleted&rdquo;
ZSH_THEME_GIT_PROMPT_RENAMED=&ldquo; %{$YELLOW%}renamed&rdquo;
ZSH_THEME_GIT_PROMPT_MODIFIED=&ldquo; %{$YELLOW%}modified&rdquo;
ZSH_THEME_GIT_PROMPT_ADDED=&ldquo; %{$GREEN%}added&rdquo;
ZSH_THEME_GIT_PROMPT_UNTRACKED=&ldquo; %{$WHITE%}untracked&rdquo;</p>

<h1>Format for git_prompt_ahead()</h1>

<p>ZSH_THEME_GIT_PROMPT_AHEAD=&ldquo; %{$RED%}(!)&rdquo;</p>

<h1>Format for git_prompt_long_sha() and git_prompt_short_sha()</h1>

<p>ZSH_THEME_GIT_PROMPT_SHA_BEFORE=&ldquo; %{$WHITE%}[%{$YELLOW%}&rdquo;
ZSH_THEME_GIT_PROMPT_SHA_AFTER=&ldquo;%{$WHITE%}]&rdquo;</p>

<h1>Prompt format</h1>

<p>PROMPT=&lsquo;%{$fg_bold[blue]%}%D{[%H:%M]}%{$RESET_COLOR%} %{$GREEN%}%n%{$RESET_COLOR%}@%{$RED_BOLD%}%m%{$RESET_COLOR%}:%{$YELLOW%}%~%u$(parse_git_dirty)$(git_prompt_ahead)%{$RESET_COLOR%}
%{$BLUE%}>%{$RESET_COLOR%} &rsquo;
RPROMPT=&lsquo;%{$GREEN_BOLD%}$(current_branch)$(git_prompt_short_sha)$(git_prompt_status)%{$RESET_COLOR%}&rsquo;
```</p>

<p>来瞅瞅换成 <code>zsh</code> 之后变成什么样了。</p>

<p>{% fancybox /downloads/image/zsh/zsh.png zsh demo %}</p>

<p>挺有意思的，是不？ Have a nice day！</p>
]]></content>
  </entry>
  
</feed>
