<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | 但行好事，莫问前程]]></title>
  <link href="http://caiknife.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2018-11-30T19:59:17+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Python脚本抓取早期知乎页面里的图片]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/15/shi-yong-pythonjiao-ben-zhua-qu-zao-qi-zhi-hu-ye-mian-li-de-tu-pian/"/>
    <updated>2018-11-15T11:38:54+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/15/shi-yong-pythonjiao-ben-zhua-qu-zao-qi-zhi-hu-ye-mian-li-de-tu-pian</id>
    <content type="html"><![CDATA[<p>很久很久以前，我在知乎看到了一个问题<a href="https://www.zhihu.com/question/37709992">长得好看，但没有男朋友是怎样的体验？</a>。</p>

<p>出于男性本能的需求，我就花了一个中午的时间写了个脚本，专门用于抓取知乎问题页面下的图片，然后就把我的代码写到了这个问题的<a href="https://www.zhihu.com/question/37709992/answer/121184589">答案</a>里。接着，又过了几天——我的答案被折叠了……</p>

<!-- more -->


<p>使用的 <code>Python</code> 版本是 2.7 ，用到的库是 <code>requests</code> 和 <code>pyquery</code> 。</p>

<p>Python 源码如下：</p>

<p>{% include_code zhihu/dl_with_names.py %}</p>

<p>使用方法很简单：</p>

<p><code>bash
python dl_with_names.py https://www.zhihu.com/question/37709992
</code></p>

<p>嗯，由于知乎页面改版了，所以现在并没有办法再下载了…… 只能再另外通过解决登录态的问题，看到问题页之后再想办法抓取图片。</p>

<p>上面这种方法适合有一定命令行基础的人群，对于普通人来说，更简单的方法是使用 <code>javascript</code> 。</p>

<p>{% include_code zhihu/dl.js %}</p>

<p>先在地址栏里输入 <code>javascript:</code> ， 再把上面的 JS 代码复制到地址栏里，回车之后就会在页面顶端出现问题页之内图片的链接。</p>

<p>不过由于现在知乎已经不用 <code>jQuery</code> 了，所以这段代码也失效了……</p>

<p>那还是写篇文章纪念一下吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 上安装 Python 包的时候会发生错误]]></title>
    <link href="http://caiknife.github.io/blog/2013/12/31/a-bug-of-python-on-windows/"/>
    <updated>2013-12-31T09:39:35+08:00</updated>
    <id>http://caiknife.github.io/blog/2013/12/31/a-bug-of-python-on-windows</id>
    <content type="html"><![CDATA[<p>昨天在公司的电脑上安装了 Python 环境，开始用 PyCharm 来做开发，不过在安装的过程中碰到了一些问题，顺利解决后来记录一下。</p>

<p>公司的电脑是 Win7 64bit ，安装了 Python 2.7.6 之后，我需要再安装 setuptools 和 pip 来做包的管理。但是在安装这两个包的过程中，经常发生下面的警告：</p>

<!-- more -->


<p>``` bash
Upgrade packages failed.</p>

<p>The following command was executed:</p>

<p>packaging_tool.py install &mdash;build-dir C:\Users\zcai\AppData\Local\Temp\pycharm-packaging5243158917089453594.tmp -U setuptools</p>

<p>The error output of the command:</p>

<p>Downloading/unpacking setuptools from <a href="https://pypi.python.org/packages/source/s/setuptools/setuptools-2.0.2.tar.gz#md5=101b0829eca064fe47708039d66fc135">https://pypi.python.org/packages/source/s/setuptools/setuptools-2.0.2.tar.gz#md5=101b0829eca064fe47708039d66fc135</a>
  Running setup.py egg_info for package setuptools</p>

<pre><code>Traceback (most recent call last):
  File "&lt;string&gt;", line 3, in &lt;module&gt;
  File "setuptools\__init__.py", line 11, in &lt;module&gt;
    from setuptools.extension import Extension
  File "setuptools\extension.py", line 5, in &lt;module&gt;
    from setuptools.dist import _get_unpatched
  File "setuptools\dist.py", line 15, in &lt;module&gt;
    from setuptools.compat import numeric_types, basestring
  File "setuptools\compat.py", line 19, in &lt;module&gt;
    from SimpleHTTPServer import SimpleHTTPRequestHandler
  File "C:\Python27\lib\SimpleHTTPServer.py", line 27, in &lt;module&gt;
    class SimpleHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
  File "C:\Python27\lib\SimpleHTTPServer.py", line 208, in SimpleHTTPRequestHandler
    mimetypes.init() # try to read system mime.types
  File "C:\Python27\lib\mimetypes.py", line 358, in init
    db.read_windows_registry()
  File "C:\Python27\lib\mimetypes.py", line 258, in read_windows_registry
    for subkeyname in enum_types(hkcr):
  File "C:\Python27\lib\mimetypes.py", line 249, in enum_types
    ctype = ctype.encode(default_encoding) # omit in 3.x!
UnicodeDecodeError: 'ascii' codec can't decode byte 0xb0 in position 1: ordinal not in range(128)
Complete output from command python setup.py egg_info:
Traceback (most recent call last):
</code></pre>

<p>  File &ldquo;<string>&rdquo;, line 3, in <module></p>

<p>  File &ldquo;setuptools__init__.py&rdquo;, line 11, in <module></p>

<pre><code>from setuptools.extension import Extension
</code></pre>

<p>  File &ldquo;setuptools\extension.py&rdquo;, line 5, in <module></p>

<pre><code>from setuptools.dist import _get_unpatched
</code></pre>

<p>  File &ldquo;setuptools\dist.py&rdquo;, line 15, in <module></p>

<pre><code>from setuptools.compat import numeric_types, basestring
</code></pre>

<p>  File &ldquo;setuptools\compat.py&rdquo;, line 19, in <module></p>

<pre><code>from SimpleHTTPServer import SimpleHTTPRequestHandler
</code></pre>

<p>  File &ldquo;C:\Python27\lib\SimpleHTTPServer.py&rdquo;, line 27, in <module></p>

<pre><code>class SimpleHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
</code></pre>

<p>  File &ldquo;C:\Python27\lib\SimpleHTTPServer.py&rdquo;, line 208, in SimpleHTTPRequestHandler</p>

<pre><code>mimetypes.init() # try to read system mime.types
</code></pre>

<p>  File &ldquo;C:\Python27\lib\mimetypes.py&rdquo;, line 358, in init</p>

<pre><code>db.read_windows_registry()
</code></pre>

<p>  File &ldquo;C:\Python27\lib\mimetypes.py&rdquo;, line 258, in read_windows_registry</p>

<pre><code>for subkeyname in enum_types(hkcr):
</code></pre>

<p>  File &ldquo;C:\Python27\lib\mimetypes.py&rdquo;, line 249, in enum_types</p>

<pre><code>ctype = ctype.encode(default_encoding) # omit in 3.x!
</code></pre>

<p>UnicodeDecodeError: &lsquo;ascii&rsquo; codec can&rsquo;t decode byte 0xb0 in position 1: ordinal not in range(128)</p>

<hr />

<p>Cleaning up&hellip;
Command python setup.py egg_info failed with error code 1 in C:\Users\zcai\AppData\Local\Temp\pycharm-packaging5243158917089453594.tmp\setuptools
Storing complete log in C:\Users\zcai\pip\pip.log
```</p>

<p>根据错误信息，在 <code>C:\Python27\lib\mimetypes.py</code> 找到下面的代码：</p>

<p>``` python
try:</p>

<pre><code>ctype = ctype.encode(default_encoding) # omit in 3.x!
</code></pre>

<p>except UnicodeEncodeError:</p>

<pre><code>pass
</code></pre>

<p>```</p>

<p>注释掉这段代码，再重新安装就可以了。</p>

<p>Windows 上开发真的好多坑啊，还是坚持在 Linux 下开发算了。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[完美洗牌]]></title>
    <link href="http://caiknife.github.io/blog/2013/08/26/perfect-shuffle/"/>
    <updated>2013-08-26T11:20:00+08:00</updated>
    <id>http://caiknife.github.io/blog/2013/08/26/perfect-shuffle</id>
    <content type="html"><![CDATA[<p>在知乎上看到这么一个问题<a href="http://www.zhihu.com/question/21503093">http://www.zhihu.com/question/21503093</a>，里面提到了完美洗牌，就想想一副牌到底要经过多少次完美洗牌才能复原呢？写了个小程序测试一下。</p>

<!-- more -->


<p>``` python</p>

<h1>coding: utf-8</h1>

<p>&ldquo;&rdquo;&ldquo;
<a href="http://www.zhihu.com/question/21503093">http://www.zhihu.com/question/21503093</a></p>

<p>a set of cards including 52 cards tagged from 1 to 52, no joker cards
&ldquo;&rdquo;"</p>

<p>import copy</p>

<p>def perfect_shuffle(cards):</p>

<pre><code>size = len(cards)
left, right = cards[0:size/2], cards[size/2:]
new_cards = []

for i in range(size/2):
    new_cards.append(left[i])
    new_cards.append(right[i])

return new_cards
</code></pre>

<p>def main():</p>

<pre><code>cards = range(1, 53)
shuffle_times = 0
old_cards = copy.deepcopy(cards)
new_cards = []

while True:
    new_cards = perfect_shuffle(old_cards)
    shuffle_times += 1

    if new_cards == cards:
        break

    old_cards = copy.deepcopy(new_cards)

print shuffle_times
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>main()
</code></pre>

<p>```</p>

<p>最终确定是8次。</p>

<p>但是我这个完美洗牌算法不是最优解。正确的完美洗牌要求是：</p>

<blockquote><p>输入a1, a2, &hellip;, an, b1, b2, &hellip;, bn，这是一个2n大小的数组。要求用O(n)的时间，用O(1)的空间，将这个序列顺序改为a1, b1, &hellip;, an, bn。</p></blockquote>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类似Zend_Config_Ini风格的python parser]]></title>
    <link href="http://caiknife.github.io/blog/2013/08/21/python-ini-parser/"/>
    <updated>2013-08-21T18:13:00+08:00</updated>
    <id>http://caiknife.github.io/blog/2013/08/21/python-ini-parser</id>
    <content type="html"><![CDATA[<p>写完上一篇文章之后，做了一个类似Zend_Config_Ini的Python parser，可以用来解析标准和非标准格式的ini文件，但是不能写文件。如果只用来读取文件内容的话，还是挺方便的。</p>

<p>ini文件内容如下：</p>

<p>``` ini
master.host                 = stats10.mezimedia.com
master.username             = scltrk
master.password             = Mhok8homL7
master.dbname               = tracking</p>

<p>slave.host                  = stats11.mezimedia.com
slave.port                  = 3308
slave.username              = scltrk
slave.password              = Mhok8homL7
slave.dbname                = tracking</p>

<p>msgsite                     = smarter
offset                      = 20000
```</p>

<!-- more -->


<p>源代码：</p>

<p>{% include_code python-ini/pyparseini.py %}</p>

<p>测试代码：</p>

<p>{% include_code python-ini/test_parseini.py %}</p>

<p>不知道把Python的东西写成Zend的风格是不是一种好习惯。对我来说，Python很轻巧，我很喜欢，Zend虽然很重，但是大气的架构和丰富的功能以及各种设计模式的运用都非常值得学习。艺不压身，努力学习才是关键。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python读取ini文件]]></title>
    <link href="http://caiknife.github.io/blog/2013/08/21/python-read-ini-files/"/>
    <updated>2013-08-21T14:08:00+08:00</updated>
    <id>http://caiknife.github.io/blog/2013/08/21/python-read-ini-files</id>
    <content type="html"><![CDATA[<p>标准的ini文件中，应该有一个类似[section]的部分作为正文的开头，但是很多情况下，ini文件都是不标准的，比如下面这个格式：</p>

<p>``` ini
master.host                 = stats10.mezimedia.com
master.username             = scltrk
master.password             = Mhok8homL7
master.dbname               = tracking</p>

<p>slave.host                  = stats11.mezimedia.com
slave.port                  = 3308
slave.username              = scltrk
slave.password              = Mhok8homL7
slave.dbname                = tracking</p>

<p>msgsite                     = smarter
offset                      = 20000
```</p>

<p>在PHP中，对ini文件的格式容错率较高，不管是不是以[section]开头，PHP总能以正确的方式解析，不管是用原生的<code>parse_ini_file</code>函数还是<code>Zend_Config_Ini</code>类库，都可以非常方便无错地解析ini。</p>

<!-- more -->


<p>下面是用<code>parse_ini_file</code>解析文件的结果
``` php
require_once &lsquo;Zend/Loader.php&rsquo;;
Zend_Loader::registerAutoload();</p>

<p>$iniFile = &lsquo;./smus.ini&rsquo;;</p>

<p>Zend_Debug::dump(parse_ini_file($iniFile));
/<em>
输出结果
array(12) {
  [&ldquo;master.host&rdquo;] => string(21) &ldquo;stats10.mezimedia.com&rdquo;
  [&ldquo;master.username&rdquo;] => string(6) &ldquo;scltrk&rdquo;
  [&ldquo;master.password&rdquo;] => string(10) &ldquo;Mhok8homL7&rdquo;
  [&ldquo;master.dbname&rdquo;] => string(8) &ldquo;tracking&rdquo;
  [&ldquo;slave.host&rdquo;] => string(21) &ldquo;stats11.mezimedia.com&rdquo;
  [&ldquo;slave.port&rdquo;] => string(4) &ldquo;3308&rdquo;
  [&ldquo;slave.username&rdquo;] => string(6) &ldquo;scltrk&rdquo;
  [&ldquo;slave.password&rdquo;] => string(10) &ldquo;Mhok8homL7&rdquo;
  [&ldquo;slave.dbname&rdquo;] => string(8) &ldquo;tracking&rdquo;
  [&ldquo;msgsite&rdquo;] => string(7) &ldquo;smarter&rdquo;
  [&ldquo;offset&rdquo;] => string(5) &ldquo;20000&rdquo;
}
 </em>/</p>

<p>Zend_Debug::dump(parse_ini_file($iniFile, true));
/<em>
输出结果和上面的语句一样，但是如果ini文件中有[section]的话，输出数组的根key就是[&ldquo;section&rdquo;]
 </em>/
```</p>

<p>而如果用<code>Zend_Config_Ini</code>来解析的话，输出的结构会更清晰：</p>

<p>``` php
$config = new Zend_Config_Ini($iniFile);
Zend_Debug::dump($config->toArray());
/*
输出结果如下。同样如果ini文件中有[section]的话，输出数组的根key就是[&ldquo;section&rdquo;]
array(5) {
  [&ldquo;master&rdquo;] => array(4) {</p>

<pre><code>["host"] =&gt; string(21) "stats10.mezimedia.com"
["username"] =&gt; string(6) "scltrk"
["password"] =&gt; string(10) "Mhok8homL7"
["dbname"] =&gt; string(8) "tracking"
</code></pre>

<p>  }
  [&ldquo;slave&rdquo;] => array(5) {</p>

<pre><code>["host"] =&gt; string(21) "stats11.mezimedia.com"
["port"] =&gt; string(4) "3308"
["username"] =&gt; string(6) "scltrk"
["password"] =&gt; string(10) "Mhok8homL7"
["dbname"] =&gt; string(8) "tracking"
</code></pre>

<p>  }
  [&ldquo;msgsite&rdquo;] => string(7) &ldquo;smarter&rdquo;
  [&ldquo;offset&rdquo;] => string(5) &ldquo;20000&rdquo;
}
 */
```</p>

<p>但是在Python中用来解析ini文件的ConfigParser类，则对ini文件的格式有着非常严格的要求——必须在文件开头含有[section]部分，否则在读取时会抛出<code>ConfigParser.MissingSectionHeaderError</code>。为了能让Python解析ini也可以容错，有必要做一下hack。</p>

<p>{% include_code python-ini/demo.py %}</p>

<p>如此一来就能正常工作了。部分内容参考自StackOverflow——<a href="http://stackoverflow.com/questions/2819696/parsing-properties-file-in-python/2819788#2819788">parsing .properties file in Python</a> 。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
</feed>
