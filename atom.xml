<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CDEFGAB 1010110]]></title>
  <link href="http://caiknife.github.io/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2019-02-21T12:21:03+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[不要只低头干活，更要抬头看路]]></title>
    <link href="http://caiknife.github.io/blog/2019/02/21/bu-yao-zhi-di-tou-gan-huo-geng-yao-tai-tou-kan-lu/"/>
    <updated>2019-02-21T11:52:21+08:00</updated>
    <id>http://caiknife.github.io/blog/2019/02/21/bu-yao-zhi-di-tou-gan-huo-geng-yao-tai-tou-kan-lu</id>
    <content type="html"><![CDATA[<p>过去两年我有两个目标：</p>

<blockquote><p>1、考出 PMP 证书。</p>

<p>2、好好锻炼身体。</p></blockquote>

<!-- more -->


<p>结果过去这么长一段时间内的高强度加班，我只能在每周末，稍微做一些有氧运动，维持基本的锻炼，不至于让自己真的变成一个毫无运动习惯的肥宅，这第二点我稍微做到了一些；但是这第一点，我目前还没有做到。</p>

<p>订好的 PMP 目标，到现在还没达成。</p>

<p><a href="http://caiknife.github.io/downloads/image/management/pmp.jpg" title="PMP " class="fancybox"><img src="http://caiknife.github.io/downloads/image/management/pmp.jpg" alt="PMP " /></a></p>

<p>不过我现在暂时先买了一本管理学教材开始自学，在时间不充裕到足以准备 PMP 考试的情况下，先通过自学积累一定的管理学知识。</p>

<p><a href="http://caiknife.github.io/downloads/image/management/management.jpeg" title="管理学 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/management/management.jpeg" alt="管理学 " /></a></p>

<p>证书不是学习的目的，有效的方法论和知识储备才是我终生学习的目标。</p>

<p>不只是技术人员，所有人都需要保持终生学习。</p>

<p><strong>不要只低头干活，更要抬头看路。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一道MySQL的笔试题]]></title>
    <link href="http://caiknife.github.io/blog/2019/02/20/yi-dao-mysqlde-bi-shi-ti/"/>
    <updated>2019-02-20T13:32:09+08:00</updated>
    <id>http://caiknife.github.io/blog/2019/02/20/yi-dao-mysqlde-bi-shi-ti</id>
    <content type="html"><![CDATA[<p>最近一次面试时做的笔试题目，虽然很简单，但是我挺有印象的。做过很多笔试题目，这应该是第一个让我觉得挺有印象的数据库笔试题。</p>

<p>题目大概是这样的：</p>

<p>有一张表 rail 存储着上海地铁线路的信息。line 表示线路，stop 表示站点名称，sequence 表示站点在线路上的顺序。（为了简洁，我直接用 SQL 语句表示数据）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">rail</span><span class="o">`</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="n">unsigned</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">line</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="n">unsigned</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">stop</span><span class="o">`</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="o">`</span><span class="n">squence</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class='line'>  <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">9</span> <span class="k">DEFAULT</span> <span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">`</span><span class="n">rail</span><span class="o">`</span>
</span><span class='line'>    <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">line</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">stop</span><span class="o">`</span><span class="p">,</span> <span class="o">`</span><span class="n">squence</span><span class="o">`</span><span class="p">)</span>
</span><span class='line'><span class="k">VALUES</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;人民广场&#39;</span><span class="p">,</span><span class="mi">10</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;人民广场&#39;</span><span class="p">,</span><span class="mi">11</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="s1">&#39;人民广场&#39;</span><span class="p">,</span><span class="mi">9</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;世纪大道&#39;</span><span class="p">,</span><span class="mi">8</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="s1">&#39;世纪大道&#39;</span><span class="p">,</span><span class="mi">12</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="s1">&#39;曹杨路&#39;</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;静安寺&#39;</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="s1">&#39;静安寺&#39;</span><span class="p">,</span><span class="mi">9</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>题目的要求有两个：</p>

<blockquote><p>1、查询经过站点最多的站点。</p>

<p>2、给出任意两条线路，查询这两条线路换乘的站点。</p></blockquote>

<p>第一个要求很简单，直接用下面的语句完成就可以了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">`</span><span class="n">stop</span><span class="o">`</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="o">`</span><span class="n">stop</span><span class="o">`</span><span class="p">)</span> <span class="k">AS</span> <span class="n">stop_count</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">rail</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="o">`</span><span class="n">stop</span><span class="o">`</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">stop_count</span> <span class="k">DESC</span> <span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>倒是第二个要求，我在第一次思考的时候就踩坑了，我写了一个非常低级错误的 SQL。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">`</span><span class="n">stop</span><span class="o">`</span> <span class="k">FROM</span> <span class="n">tail</span> <span class="k">WHERE</span> <span class="o">`</span><span class="n">line</span><span class="o">`=@</span><span class="n">a</span> <span class="k">AND</span> <span class="o">`</span><span class="n">line</span><span class="o">`=@</span><span class="n">b</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>刚写完最后的分号我就反应过来了，这里不对，正确的做法是得让 rail 表自己和自己 join 之后查询。于是思考了一小会儿写下了第二个 SQL。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">r1</span><span class="p">.</span><span class="n">stop</span> <span class="k">FROM</span> <span class="n">rail</span> <span class="n">r1</span><span class="p">,</span> <span class="n">rail</span> <span class="n">r2</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">r1</span><span class="p">.</span><span class="n">line</span><span class="o">=@</span><span class="n">a</span> <span class="k">AND</span> <span class="n">r2</span><span class="p">.</span><span class="n">line</span><span class="o">=@</span><span class="n">b</span> <span class="k">AND</span> <span class="n">r1</span><span class="p">.</span><span class="n">stop</span><span class="o">=</span><span class="n">r2</span><span class="p">.</span><span class="n">stop</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>题目是挺简单的，只是我今后不能直接靠直觉去想解题的思路，还是要多思考一会儿，把解决问题的步骤想清楚。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[select poll epoll的区别]]></title>
    <link href="http://caiknife.github.io/blog/2019/02/17/select-poll-epollde-qu-bie/"/>
    <updated>2019-02-17T17:56:41+08:00</updated>
    <id>http://caiknife.github.io/blog/2019/02/17/select-poll-epollde-qu-bie</id>
    <content type="html"><![CDATA[<p>在 linux 没有实现 epoll 事件驱动机制之前，我们一般选择用 select 或者 poll 等 IO 多路复用的方法来实现并发服务程序。</p>

<p>在大数据、高并发、集群等一些名词唱的火热之年代，select 和 poll 的用武之地越来越有限了，风头已经被 epoll 占尽。</p>

<!-- more -->


<h3>select 和 poll IO 多路复用模型</h3>

<p>select 的缺点：</p>

<blockquote><p>单个进程能够监视的文件描述符的数量存在最大限制，通常是 1024，当然可以更改数量，但由于 select 采用轮询的方式扫描文件描述符，文件描述符数量越多，性能越差；</p>

<p>内核/用户空间内存拷贝问题，select 需要复制大量的句柄数据结构，产生巨大的开销；</p>

<p>select 返回的是含有整个句柄的数组，应用程序需要遍历整个数组才能发现哪些句柄发生了事件；</p>

<p>select 的触发方式是水平触发，应用程序如果没有完成对一个已经就绪的文件描述符进行 IO，那么之后再次 select 调用还是会将这些文件描述符通知进程。</p></blockquote>

<p>相比于 select 模型，poll 使用链表保存文件描述符，因此没有了监视文件数量的限制，但其他三个缺点依然存在。</p>

<p>拿 select 模型为例，假设我们的服务器需要支持 100 万的并发连接，则在 _FD_SETSIZE 为 1024 的情况下，则我们至少需要开辟 1K 个进程才能实现 100 万的并发连接。除了进程间上下文切换的时间消耗外，从内核/用户空间大量的无脑内存拷贝、数组轮询等，是系统难以承受的。因此，基于 select 模型的服务器程序，要达到 10 万级别的并发访问，是一个很难完成的任务。</p>

<h3>epoll IO多路复用模型实现机制</h3>

<p>由于 epoll 的实现机制与 select/poll 机制完全不同，上面所说的 select 的缺点在 epoll 上不复存在。</p>

<p>设想一下如下场景：有 100 万个客户端同时与一个服务器进程保持着 TCP 连接。而每一时刻，通常只有几百上千个 TCP 连接是活跃的。如何实现这样的高并发？</p>

<p>在 select/poll 时代，服务器进程每次都把这 100 万个连接告诉操作系统（从用户态复制句柄数据结构到内核态），让操作系统内核去查询这些套接字上是否有事件发生，轮询完后，再将句柄数据复制到用户态，让服务器应用程序轮询处理已发生的网络事件，这一过程资源消耗较大，因此，select/poll 一般只能处理几千的并发连接。</p>

<p>epoll 的设计和实现 select 完全不同。epoll 通过在 linux 内核中申请一个简易的文件系统（文件系统一般用什么数据结构实现？B+ 树）。把原先的 select/poll 调用分成了 3 个部分：</p>

<blockquote><p>1）调用 epoll_create 建立一个 epoll 对象（在 epoll 文件系统中为这个句柄对象分配资源）</p>

<p>2）调用 epoll_ctl 向 epoll 对象中添加这 100 万个连接的套接字</p>

<p>3）调用 epoll_wait 收集发生的事件的连接</p></blockquote>

<p>如此一来，要实现上面说的场景，只需要在进程启动时建立一个 epoll 对象，然后在需要的时候向这个 epoll 对象中添加或者删除连接。同时，epoll_wait 的效率也非常高，因为调用 epoll_wait 时，并没有一股脑的向操作系统复制这 100 万个连接的句柄数据，内核也不需要去遍历全部的连接。</p>

<p>上面的 3 个部分非常清晰，首先要调用 epoll_create 创建一个 epoll 对象。然后使用 epoll_ctl 可以操作上面建立的 epoll 对象，例如，将刚建立的 socket 加入到 epoll 中让其监控，或者把 epoll 正在监控的某个 socket 句柄移出 epoll，不再监控它等等。</p>

<p>epoll_wait 在调用时，在给定的 timeout 时间内，当在监控的所有句柄中有事件发生时，就返回用户态的进程。</p>

<p>从上面的调用方式就可以看到 epoll 比 select/poll 的优越之处：因为后者每次调用时都要传递你所要监控的所有 socket 给 select/poll 系统调用，这意味着需要将用户态的 socket 列表 copy 到内核态，如果以万计的句柄会导致每次都要 copy 几十几百 KB 的内存到内核态，非常低效。而我们调用 epoll_wait 时就相当于以往调用 select/poll，但是这时却不用传递 socket 句柄给内核，因为内核已经在 epoll_ctl 中拿到了要监控的句柄列表。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单线程redis为什么这么快？]]></title>
    <link href="http://caiknife.github.io/blog/2019/02/16/dan-xian-cheng-rediswei-shi-yao-zhe-yao-kuai/"/>
    <updated>2019-02-16T15:47:07+08:00</updated>
    <id>http://caiknife.github.io/blog/2019/02/16/dan-xian-cheng-rediswei-shi-yao-zhe-yao-kuai</id>
    <content type="html"><![CDATA[<p>redis 采用的是基于内存的采用的是单进程单线程模型的 KV 数据库，由 C 语言编写，官方提供的数据是可以达到 100000+ 的 QPS。这个数据不比采用单进程多线程的同样基于内存的 KV 数据库 Memcached 差。</p>

<p>有兴趣的可以参考官方的基准程序测试《How fast is Redis？》<a href="https://redis.io/topics/benchmarks">https://redis.io/topics/benchmarks</a></p>

<p><a href="http://caiknife.github.io/downloads/image/redis/benchmark.png" title="redis benchmark " class="fancybox"><img src="http://caiknife.github.io/downloads/image/redis/benchmark.png" alt="redis benchmark " /></a></p>

<!-- more -->


<p>Redis快的主要原因是：</p>

<blockquote><p>完全基于内存</p>

<p>数据结构简单，对数据操作也简单</p>

<p>使用多路 I/O 复用模型</p></blockquote>

<p>下面主要围绕第三点采用多路 I/O 复用技术来展开。</p>

<p>多路 I/O 复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有 I/O 事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll 是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），且Redis在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了 redis 具有很高的吞吐量。</p>

<p>和 Memcached 不同，redis 并没有直接使用 libevent，而是自己完成了一个非常轻量级的对 select、epoll、evport、kqueue 这些通用的接口的实现。在不同的系统调用选用适合的接口，linux 下默认是 epoll。因为 libevent 比较重更通用代码量也就很庞大，拥有很多 redis 用不上的功能，redis为了追求“轻巧”并且去除依赖，就选择自己去封装了一套。</p>

<p>至于为什么 redis 要使用单进程单线程：</p>

<blockquote><p>代码更清晰，处理逻辑更简单</p>

<p>不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗</p>

<p>不存在多进程或者多线程导致的切换而消耗CPU</p></blockquote>

<p>至于弊端，那也是显而易见的——无法发挥多核 CPU 性能，不过可以通过在单机开多个 redis 实例来完善。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何保障项目成功]]></title>
    <link href="http://caiknife.github.io/blog/2018/12/22/ru-he-bao-zhang-xiang-mu-cheng-gong/"/>
    <updated>2018-12-22T01:37:59+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/12/22/ru-he-bao-zhang-xiang-mu-cheng-gong</id>
    <content type="html"><![CDATA[<p>凡事都是学问，最好都能有一定的方法论进行指导，如果只会蛮干硬上，靠本能驱动的话会造成非常可怕的后果。</p>

<p>千万不能迷信<strong><em>“有条件要上，没有条件创造条件也要上”</em></strong>。</p>

<!-- more -->


<blockquote><p>思路要开阔点，一个项目成功可不仅仅是写代码这么简单。你也做过很多项目效益分析，你自己想想，有几个项目是真的死于技术不行的。如果老板期望过高呢？如果给的资源不够呢？如果其他部门不配合你呢？你做精准营销，人家一线销售根本不鸟你，你怎么精准？如果你能从结果出发，倒推做成项目需要什么。用这些分析去影响业务部门，岂不是比别人挖好了坑，自己边骂边填更好？</p></blockquote>

<p>确实，为什么要一辈子做爬坑的那个，而不试着拿过挖坑的锹呢？</p>

<p>上一个台阶看问题，就发现影响项目成功的因素有很多，技术只占其中一部分。特别是销售、市场、运营类项目。这些项目本质上还是要和人打交道。无论是做经营分析、做精准营销、做个性化推送、最后还是要靠各部门通力合作。从做好项目的角度来看，还是有很多发挥余空间的。</p>

<p>最后写了一张图。</p>

<p><a href="http://caiknife.github.io/downloads/image/about/pm.png" title="如何保障项目成功 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/about/pm.png" alt="如何保障项目成功 " /></a></p>

<p>可能还会有缺陷，希望每当我跨上一个新的台阶的时候，我能够将这张图做得更加完善。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开始刷leetcode]]></title>
    <link href="http://caiknife.github.io/blog/2018/12/17/kai-shi-shua-leetcode/"/>
    <updated>2018-12-17T09:50:09+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/12/17/kai-shi-shua-leetcode</id>
    <content type="html"><![CDATA[<p>周末开始刷<code>Leetcode</code>，是不是有点太晚了？</p>

<!-- more -->


<p>目前只能从简单的题目开始入手，周末主要把数据库和Bash的题目刷掉了，算法和数据结构的题目还是慢慢入手，毕竟已经不用这些很久了。</p>

<p><code>Leetcode</code>账号在这里：<a href="https://leetcode-cn.com/caiknife/">https://leetcode-cn.com/caiknife/</a></p>

<p>源代码在这里：<a href="https://github.com/caiknife/leetcode">https://github.com/caiknife/leetcode</a></p>

<p>题目描述和单元测试都有，我觉得我做得还行。</p>

<p>加油。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术人员的发展之路]]></title>
    <link href="http://caiknife.github.io/blog/2018/12/11/ji-zhu-ren-yuan-de-fa-zhan-zhi-lu/"/>
    <updated>2018-12-11T15:02:42+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/12/11/ji-zhu-ren-yuan-de-fa-zhan-zhi-lu</id>
    <content type="html"><![CDATA[<p>看过左耳朵耗子的这篇文章<a href="https://coolshell.cn/articles/17583.html">《技术人员的发展之路》</a>有感而发，技术人员年纪大了之后的出路真的是一个问题。</p>

<p>多年以来一直在看coolshell的文章，从很早就在Google Reader里订阅了RSS。直到Google Reader死掉，coolshell都没停更过。我一直从这里面吸取着营养。</p>

<!-- more -->


<p>这篇文章真的给我不少启示，确实可以从此思考一下，作为一个普通人的发展到底可以做成什么样？</p>

<p><a href="http://caiknife.github.io/downloads/image/about/career.png" title="技术人员的发展之路 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/about/career.png" alt="技术人员的发展之路 " /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法题：羊生羊问题]]></title>
    <link href="http://caiknife.github.io/blog/2018/12/01/yang-sheng-yang-wen-ti/"/>
    <updated>2018-12-01T18:25:40+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/12/01/yang-sheng-yang-wen-ti</id>
    <content type="html"><![CDATA[<p>面试题：</p>

<blockquote><p>农夫有一只羊，这只羊在第2、3年会生一只小羊，第4年不会生小羊，第5年时羊会死亡，生出来的小羊也是这个规律。求问50年后会有多少只羊？</p></blockquote>

<!-- more -->


<p>这道题最直接的办法就是用递归来做，不过我暂时还没想到递归怎么做，所以先用最笨的方法——遍历50年，每一年遍历羊的数组，根据年纪来进行对应的处理。详细见下面的代码：</p>

<figure class='code'><figcaption><span> (sheep.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/sheep.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/12/1</span>
</span><span class='line'><span class="sd"> * Time: 18:29</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sheep</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">ini_set</span><span class="p">(</span><span class="s2">&quot;memory_limit&quot;</span><span class="p">,</span> <span class="s2">&quot;2048M&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$sheeps</span>    <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="nv">$startTime</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$sheeps</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$age</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$sheeps</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">switch</span> <span class="p">(</span><span class="nv">$sheeps</span><span class="p">[</span><span class="nv">$key</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>                        <span class="c1">// do nothing</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>                        <span class="nv">$sheeps</span><span class="p">[]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 刚出生算0岁</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>                        <span class="nb">unset</span><span class="p">(</span><span class="nv">$sheeps</span><span class="p">[</span><span class="nv">$key</span><span class="p">]);</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$endTime</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Time cost:&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="nv">$endTime</span> <span class="o">-</span> <span class="nv">$startTime</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$sheeps</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是这个方法是有问题的，那就是数组占用的内存太大，用PHP来跑的话，50的数据量根本就没办法解决。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-&gt;php cli.php Sheep.main                                                                                                   master [08f1c0ba] modified
</span><span class='line'>PHP Fatal error:  Allowed memory size of 1073741824 bytes exhausted (tried to allocate 1073741832 bytes) in /Users/caiknife/Projects/PHPLib/src/Cron/Sheep.php on line 34
</span><span class='line'>PHP Stack trace:
</span><span class='line'>PHP   1. {main}() /Users/caiknife/Projects/PHPLib/cli.php:0
</span><span class='line'>PHP   2. App\Cron\Sheep-&gt;main() /Users/caiknife/Projects/PHPLib/cli.php:34
</span><span class='line'>
</span><span class='line'>Fatal error: Allowed memory size of 1073741824 bytes exhausted (tried to allocate 1073741832 bytes) in /Users/caiknife/Projects/PHPLib/src/Cron/Sheep.php on line 34
</span><span class='line'>
</span><span class='line'>Call Stack:
</span><span class='line'>    0.0003     369648   1. {main}() /Users/caiknife/Projects/PHPLib/cli.php:0
</span><span class='line'>    0.0335    5328840   2. App\Cron\Sheep-&gt;main() /Users/caiknife/Projects/PHPLib/cli.php:34</span></code></pre></td></tr></table></div></figure>


<p>下面尝试一下用递归的解法。</p>

<figure class='code'><figcaption><span> (sheep_recursive.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/sheep_recursive.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/12/1</span>
</span><span class='line'><span class="sd"> * Time: 18:54</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SheepRecursive</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">ini_set</span><span class="p">(</span><span class="s2">&quot;memory_limit&quot;</span><span class="p">,</span> <span class="s2">&quot;2048M&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_countSheep</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">_countSheep</span><span class="p">(</span><span class="nv">$year</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$year</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$year</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$year</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// $year &gt;= 5时，表示有羊死去</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nv">$year</span> <span class="o">&gt;=</span> <span class="mi">5</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_countSheep</span><span class="p">(</span><span class="nv">$year</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_countSheep</span><span class="p">(</span><span class="nv">$year</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后再使用一个移动窗口的解法。</p>

<figure class='code'><figcaption><span> (sheep_window.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/sheep_window.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/12/1</span>
</span><span class='line'><span class="sd"> * Time: 22:11</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SheepWindow</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">ini_set</span><span class="p">(</span><span class="s2">&quot;memory_limit&quot;</span><span class="p">,</span> <span class="s2">&quot;2048M&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$startTime</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$arr</span>       <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">];</span> <span class="c1">// 这个数组分别表示一到五年</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">50</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$tmp</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nv">$arr</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span> <span class="c1">// 只有2岁和3岁的羊会生小羊</span>
</span><span class='line'>            <span class="nb">array_unshift</span><span class="p">(</span><span class="nv">$arr</span><span class="p">,</span> <span class="nv">$tmp</span><span class="p">);</span> <span class="c1">// 这表示新一年生的小羊数</span>
</span><span class='line'>            <span class="nb">array_pop</span><span class="p">(</span><span class="nv">$arr</span><span class="p">);</span> <span class="c1">// 将5岁的小羊消灭</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$endTime</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Time cost:&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="nv">$endTime</span> <span class="o">-</span> <span class="nv">$startTime</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nb">array_sum</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">another</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$startTime</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$arr</span>       <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="mi">50</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">list</span><span class="p">(</span><span class="nv">$one</span><span class="p">,</span> <span class="nv">$two</span><span class="p">,</span> <span class="nv">$three</span><span class="p">,</span> <span class="nv">$four</span><span class="p">,</span> <span class="nv">$five</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$two</span> <span class="o">+</span> <span class="nv">$three</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$one</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$arr</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$two</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$three</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$arr</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$four</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$endTime</span> <span class="o">=</span> <span class="nb">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Time cost:&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="nv">$endTime</span> <span class="o">-</span> <span class="nv">$startTime</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="k">echo</span> <span class="nb">array_sum</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用redis实现分布式锁]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/30/shi-yong-redisshi-xian-fen-bu-shi-suo/"/>
    <updated>2018-11-30T19:03:54+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/30/shi-yong-redisshi-xian-fen-bu-shi-suo</id>
    <content type="html"><![CDATA[<p>redis除了是很强大的存储/缓存工具之外，还可以实现分布式锁。</p>

<p>下面我们来看看到底怎么样用redis来实现分布式锁。</p>

<!-- more -->


<h3>为什么要使用锁？</h3>

<p>第一个是正确性，这个众人皆知。就像Java里的synchronize，就是用来保证多线程并发场景下，程序的正确性。在redis的场合下，并发访问的单位，不再是线程，而是进程。</p>

<p>举个例子，一个文件系统，为了提高性能，部署了三台文件服务器。当服务器A在修改文件A的时候，其他服务器就不能对文件A进行修改，否则A的修改就会被覆盖掉。</p>

<p>锁还有第二个用处——效率。比如应用A有一个耗时的统计任务，每天凌晨两点，定时执行，这时我们给应用A部署了三台机器，如果不加锁，那么每天凌晨两点一到，这三台机器就都会去执行这个很耗时的统计任务，而实际上，我们最后只需要一份统计结果。</p>

<p>这时候，就可以在定时任务开始前，先去获取锁，获取到锁的，执行统计任务，获取不到的，就直接结束。</p>

<h3>分布式锁和本地锁的区别是什么？</h3>

<p>单机，并发的单位是线程，分布式，并发的单位是多进程。并发单位的等级上去了，锁的等级自然也得上去。以前锁是进程自己的，进程下的线程都看这个锁的眼色行事，谁拿到锁，谁才可以放行。进程外面还有别的进程，你要跟别人合作，就不能光看着自己了，得有一个大家都看得到的，光明正大的地方，来放这把锁。</p>

<h3>获取锁</h3>

<p>要怎么在redis里获取一把锁呢？貌似很简单，执行set命令就好了，还是上面文件系统的例子，比如你想修改文件id是9527的文件，那就往redis里，添加一个key为file:9527，value为任意字符串的值即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set file:9527 ${random_value}</span></code></pre></td></tr></table></div></figure>


<p>set成功了，就说明获取到锁。</p>

<p>这样可以吗？很明显不行，set方法默认是会覆盖的，也就是说，就算file:9527已经有值了，set还是可以成功，这样锁就起不到互斥的作用。</p>

<p>那在set之前，先用get判断一下，如果是null，再去set？也不行，原因很简单，get和set都在客户端执行，不具有原子性。</p>

<p>要实现原子性，唯一的办法，就是只给redis发送一条命令，来完成获取锁的动作。</p>

<p>于是就有了下面这条命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set file:9527 ${random_value} NX</span></code></pre></td></tr></table></div></figure>


<p>NX = If Not Existed 如果不存在，才执行set。</p>

<p>完美了吗？非也，这个值没有设置过期时间，如果后面获得锁的客户端，因为挂掉了，或者其他原因，没有释放锁，那其他进程也都获取不到锁了，结果就是死锁。</p>

<p>所以有了终极版的获取锁命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set file:9527 ${random_value} NX EX ${timeout}</span></code></pre></td></tr></table></div></figure>


<p>使用EX参数，可以设置过期时间，单位是秒，另一个参数PX，也可以设置过期时间，单位是毫秒。</p>

<h3>释放锁</h3>

<p>好，最后再来看看释放锁。</p>

<p>有人说，释放锁，简单，直接del：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>del file:9527</span></code></pre></td></tr></table></div></figure>


<p>有问题吗？当然有，这会把别人的锁给释放掉。</p>

<p>举个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>A拿到了锁，过期时间5s
</span><span class='line'>5s过去了，A还没释放锁，也许是发生了GC，也许是某个耗时操作
</span><span class='line'>锁过期了，B抢到了锁
</span><span class='line'>A缓过神来了，以为锁还是自己的，执行del file:9527
</span><span class='line'>C抢到了锁，也进来了
</span><span class='line'>B看看屋里的C，有看看刚出门的A，对着A吼了一句：尼玛，你干嘛把我的锁释放了</span></code></pre></td></tr></table></div></figure>


<p>所以，为了防止把别人的锁释放了，必须检查一下，当前的value是不是自己设置进去的value，如果不是，就说明锁不是自己的了，不能释放。</p>

<p>显然，这个过程，如果放在客户端做，就又不满足原子性了，只能整在一起，一次性让redis server执行完。</p>

<p>这下redis可没有一条命令，可以做这么多事情的，好在redis提供了lua脚本的调用方式，只需使用eval命令调用以下脚本即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="k">if</span> <span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">get&quot;</span><span class="p">,</span><span class="n">KEYS</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="n">ARGV</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">then</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">redis</span><span class="p">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">del&quot;</span><span class="p">,</span><span class="n">KEYS</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>其实还有问题</h3>

<p>了解完如何释放锁，再加上之前的获取锁，我们似乎已经可以用redis来实现分布式锁了。</p>

<p>但是，一如既往，问自己一句，完美了吗？没有漏洞了？嗯，很明显不是，上面讲的算法，都有一个前提：只有一台redis实例。</p>

<p>而生产环境里，我们是不可能只部署一个实例的，至少，我们也是主从的架构。redis的数据同步，不是强一致性的，毕竟作为一个缓存，要保证读写性能。</p>

<p>如果A往Master放入了一把锁，然后再数据同步到Slave之前，Master crash，Slave被提拔为Master，这时候Master上面就没有锁了，这样其他进程也可以拿到锁，违法了锁的互斥性。</p>

<p>如何解决这个问题？</p>

<h3>Redlock算法</h3>

<p>针对Redis集群架构，redis的作者antirez提出了Redlock算法，来实现集群架构下的分布式锁。</p>

<p>Redlock算法并不复杂，我们先简单描述一下，假设我们Redis分片下，有三个Master的节点，这三个Master，又各自有一个Slave。</p>

<p>好，现在客户端想获取一把分布式锁：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>记下开始获取锁的时间 startTime
</span><span class='line'>按照A-&gt;B-&gt;C的顺序，依次向这三台Master发送获取锁的命令。客户端在等待每台Master回响应时，都有超时时间 timeout。举个例子，客户端向A发送获取锁的命令，在等了 timeout 时间之后，都没收到响应，就会认为获取锁失败，继续尝试获取下一把锁
</span><span class='line'>如果获取到超过半数的锁，也就是 3/2+1 <span class="o">=</span> 2把锁，这时候还没完，要记下当前时间 endTime
</span><span class='line'>计算拿到这些锁花费的时间 <span class="nv">costTime</span> <span class="o">=</span> endTime - startTime，如果costTime小于锁的过期时间 expireTime，则认为获取锁成功
</span><span class='line'>如果获取不到超过一半的锁，或者拿到超过一半的锁时，计算出 costTime &gt;<span class="o">=</span> expireTime，这两种情况下，都视为获取锁失败
</span><span class='line'>如果获取锁失败，需要向全部Master节点，都发生释放锁的命令，也就是那段Lua脚本
</span></code></pre></td></tr></table></div></figure>


<p>当然这个Redlock算法也并不是万能的，也会有缺陷，我也在思考在哪些场景下会有这样的问题。但是在目前绝大情况下来说，Redlock已经足够用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FEED流系统实现思想]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/28/zhong-xiao-xing-fedliu-xi-tong-shi-xian/"/>
    <updated>2018-11-28T17:21:04+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/28/zhong-xiao-xing-fedliu-xi-tong-shi-xian</id>
    <content type="html"><![CDATA[<p>从最早的Twitter、Facebook，到后来的微信朋友圈、信息流咨询，这些产品其实都是常见的FEED流系统。</p>

<p>那么今天思考一下，如何实现一个中小型FEED流系统。</p>

<!-- more -->


<p>在系统刚开始创建的时候，可以先考虑下面这两种方式：推模式和拉模式。</p>

<h3>推模式</h3>

<p>推模式，是发生在用户触发行为（发布新的动态，关注某个人，点赞）的时候。在触发时，用户的自身行为会记录到对应的行为表中，其次用户的行为也会记录到自己的粉丝对应动态表中。</p>

<p><a href="http://caiknife.github.io/downloads/image/feed/推模式.png" title="推模式 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/feed/推模式.png" alt="推模式 " /></a></p>

<p>上面的流程大概是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>用户A发布新的帖子（动态），帖子记录到帖子表（主表）中。
</span><span class='line'>发帖行为塞到队列中。触发异步操作，消费者会先读取用户的粉丝列表（UID分表），依次写入到用户的动态表（UID分表）中。
</span><span class='line'>前端读取用户动态FEED，使用过滤条件，读取用户的动态表（关联查询帖子表）。</span></code></pre></td></tr></table></div></figure>


<p>使用推方式，对需求变更是易适应的。</p>

<p>因为用户每一次的行为，我们都有存储相应的数据。即使变更，只需更改逻辑层代码。另外性能较好，后台数据已经准备好了，无需复杂的SQL查询。当然这样做，也存在很多弊端。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>如果在用户A发完动态后，其粉丝B取消关注了A。在这个时间差内，内容已经推送给粉丝B了。
</span><span class='line'>数据量存储成本较大，假如一个用户的粉丝数是100万，在发帖后会写入100万条数据。</span></code></pre></td></tr></table></div></figure>


<h3>拉模式</h3>

<p>拉方式，是发生在粉丝拉取FEED时。粉丝拉取自己的动态，首先会检索自己的关注用户（UID分表）。得到关注的UID之后，再根据UID去查询关注用户发布的帖子。</p>

<p><a href="http://caiknife.github.io/downloads/image/feed/拉模式.png" title="拉模式 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/feed/拉模式.png" alt="拉模式 " /></a></p>

<p>拉的模式相对是比较简单易实现的，另外对用户关系变更（新增，删除用户）是敏感的。其次也不存在数据存储压力。但在查询的时候，对帖子表本身压力是很大的。尤其是用户本身关注的人很多的话，会有很严重的性能问题。</p>

<p>下面可以使用另外一种方式来优化拉模式。</p>

<h3>拉方式优化-伪实时拉取</h3>

<p>用户在登录APP时，会发送用户活跃态到服务端。活跃信号塞到队列中，消费者依次读取活跃态UID，得到用户的关注者列表。得到关注者列表后，会去帖子表，查询关注人的发布的帖子。写到用户自己的FEED中。</p>

<p><a href="http://caiknife.github.io/downloads/image/feed/伪实时拉取.png" title="伪实时拉取 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/feed/伪实时拉取.png" alt="伪实时拉取 " /></a></p>

<p>这种方式和对拉方式而言，能有效避免接口性能问题，相当于通过定时任务提前把用户的动态FEED跑出来。</p>

<p>和推方式比较，推是比较盲目的，这种方式只需针对活跃用户即可，能避免存储浪费。缺点在于实时性不好，用户登录APP后马上进入自己的FEED页，此时如果后台用户动态还没跑完，接口读取的就是历史数据了。当然这种方式不适合知乎，微博这种类型的APP的。</p>

<h3>拉方式优化-分区拉取</h3>

<p>分区拉取，是为了避免频繁查询单一帖子表所采用的一种优化手段。通过对帖子按照时间片分表，每次查询都能均摊到不同的表中，以此减轻主表的压力。</p>

<h3>推方式优化-定时推</h3>

<p>定时推，是以常驻进程的方式读取用户的发帖行为，再批量写入到粉丝的动态表中。这种方式和推方式差不多，只不过可以对多个发帖行为做聚合。</p>

<h3>推方式优化-特定用户推</h3>

<p>特定用户推，是推方式的一种优化方法。用户发送帖子时，只对活跃的粉丝用户写入。当然活跃用户的判定策略，是需要商定的。</p>

<h3>总结</h3>

<p>以上几种方案，都有自己的利弊和适用场景。选择最适合自己的就是最好的。</p>

<p>以上的方案还需要不断扩充完善。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据延迟的情况下如何解决缓存脏数据]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/27/huan-cun-shuang-tao-tai/"/>
    <updated>2018-11-27T21:24:20+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/27/huan-cun-shuang-tao-tai</id>
    <content type="html"><![CDATA[<p>通常使用缓存的情况下，如果先删缓存，再更新数据库，有这样一个场景：</p>

<blockquote><p>单库情况下，服务层在进行长时间的逻辑计算，在这个过程中，可能读到旧数据入缓存。</p>

<p>主从库+读写分离情况下，在主从同步延时过程中，可能读到旧数据入缓存。</p></blockquote>

<!-- more -->


<p><strong><em>第一个问题产生的原因可能是同时有一个请求A进行更新操作，另一个请求B进行查询操作，那么可能会出现下面的情况：</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>请求A进行写操作，删除缓存
</span><span class='line'>请求B查询发现缓存不存在
</span><span class='line'>请求B去数据库查询得到旧值
</span><span class='line'>请求B将旧值写入缓存
</span><span class='line'>请求A将新值写入数据库</span></code></pre></td></tr></table></div></figure>


<p><strong><em>第二个问题产生的原因可能是，还是两个请求，一个请求A进行更新操作，另一个请求B进行查询操作，可能会出现下面的情况：</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>请求A进行写操作，删除缓存
</span><span class='line'>请求A将数据写入数据库了
</span><span class='line'>请求B查询缓存发现，缓存没有值
</span><span class='line'>请求B去从库查询，这时，还没有完成主从同步，因此查询到的是旧值
</span><span class='line'>请求B将旧值写入缓存
</span><span class='line'>数据库完成主从同步，从库变为新值</span></code></pre></td></tr></table></div></figure>


<p>上面的这两种情况，都可以使用在写操作更新数据库之后，休眠一小段时间之后第二次再删除缓存。休眠的时间根据系统评估下来的写入时间或者是主从数据库的延迟时间上再加上几百毫秒即可。这样在增加一次cache miss的前提下，只花费了很少的成本，就避免了脏数据的长时间存在，保障了数据一致性。</p>

<p>而如果你并不想因为这个休眠时间导致影响到用户体验的话，其实可以使用异步的方式，通过队列来进行第二次删除，在队列里进行这段时间的休眠，从而保证用户体验，加大系统的吞吐量。</p>

<p><strong><em>如果在第二次删除缓存时失败了怎么办？</em></strong></p>

<p>假设有一个请求A进行更新操作，另一个请求B进行查询操作，为了方便，假设是单库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>请求A进行写操作，删除缓存
</span><span class='line'>请求B查询发现缓存不存在
</span><span class='line'>请求B去数据库查询得到旧值
</span><span class='line'>请求B将旧值写入缓存
</span><span class='line'>请求A将新值写入数据库
</span><span class='line'>请求A试图去删除请求B写入的缓存值，结果失败了</span></code></pre></td></tr></table></div></figure>


<p>即如果第二次删除缓存失败，会再次出现缓存和数据库不一致的问题。这种情况下，可以往队列中插入要删除的缓存key，在队列中处理删除缓存直到成功为止，如果可以接受的话，这未尝不是一种可行的解决方案。</p>

<p>暂时先想到这么多，如果有更好的解决方案，我会继续更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法题：三针重叠问题]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/27/san-zhen-zhong-die-wen-ti/"/>
    <updated>2018-11-27T19:23:06+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/27/san-zhen-zhong-die-wen-ti</id>
    <content type="html"><![CDATA[<p>经典问题——三针重叠问题。</p>

<blockquote><p>在时针走满一圈的情况下，也就是12小时内，时针、分针、秒针会重合多少次？</p></blockquote>

<p>分析一下：秒针60s走完一整圈，每秒的旋转角度是6度，分针速度是秒针的1/60，每s的旋转角度是1/10度，时针速度是分针的1/12，每s的旋转角度是1/120度。那么就需要计算出12个小时的时间内，也就是12*3600秒内，每秒钟三个指针的位置即可。如果度数相同，那么就认为三针重合。</p>

<!-- more -->


<p>更简单地来说，假设把时针的最小步长定位1，那么分针的步长就是12，而秒针的步长就是720。再针对各自一圈的步长取模，就可以得到每秒时每个位置的偏移量，如果三个偏移量相等的话，</p>

<p>编写程序如下：</p>

<figure class='code'><figcaption><span> (clock.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/clock.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/11/27</span>
</span><span class='line'><span class="sd"> * Time: 10:51</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="no">TOTAL_TIME</span> <span class="o">=</span> <span class="mi">12</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_hourNeedle</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_minuteNeedle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_secondNeedle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_nextMinuteNeedle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">date_default_timezone_set</span><span class="p">(</span><span class="s1">&#39;Asia/Shanghai&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$baseTime</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s1">&#39;2018-01-01 00:00:00&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="k">static</span><span class="o">::</span><span class="na">TOTAL_TIME</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 求时针的偏移量</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_hourNeedle</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">%</span> <span class="k">static</span><span class="o">::</span><span class="na">TOTAL_TIME</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 求分针的偏移量</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_minuteNeedle</span> <span class="o">=</span> <span class="p">(</span><span class="mi">12</span> <span class="o">*</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">%</span> <span class="k">static</span><span class="o">::</span><span class="na">TOTAL_TIME</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 求秒针的偏移量</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondNeedle</span> <span class="o">=</span> <span class="p">(</span><span class="mi">720</span> <span class="o">*</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">%</span> <span class="k">static</span><span class="o">::</span><span class="na">TOTAL_TIME</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_hourNeedle</span> <span class="o">==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_minuteNeedle</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_minuteNeedle</span> <span class="o">==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondNeedle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">echo</span> <span class="nv">$i</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>                <span class="k">echo</span> <span class="nb">date</span><span class="p">(</span><span class="s2">&quot;H:i:s&quot;</span><span class="p">,</span> <span class="nv">$baseTime</span> <span class="o">+</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，在12个小时内，三针重合只有在0点和12点的时候才会出现。这个时候是真正的停止重合。</p>

<p>而在其他的条件下，时针和分针只会出现划过重合，不会出现停止重合。</p>

<p>下面更新一个Golang写的版本，了解一下Golang时间处理的奇葩……</p>

<figure class='code'><figcaption><span> (clock.go)</span> <a href='http://caiknife.github.io/downloads/code/quiz/clock.go'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">const</span> <span class="p">(</span>
</span><span class='line'>  <span class="nx">TotalTime</span> <span class="p">=</span> <span class="mi">12</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span>
</span><span class='line'>  <span class="nx">FDateTime</span> <span class="p">=</span> <span class="s">&quot;2006-01-02 15:04:05&quot;</span> <span class="c1">// 奇葩的时间点，格式化必须是这个格式……</span>
</span><span class='line'>  <span class="nx">FDate</span>     <span class="p">=</span> <span class="s">&quot;2006-01-02&quot;</span>
</span><span class='line'>  <span class="nx">FTime</span>     <span class="p">=</span> <span class="s">&quot;15:04:05&quot;</span>
</span><span class='line'>  <span class="nx">StartTime</span> <span class="p">=</span> <span class="s">&quot;2018-01-01 00:00:00&quot;</span> <span class="c1">// 我们设置的起点时间</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Format</span><span class="p">(</span><span class="nx">FDate</span><span class="p">))</span> <span class="c1">// 先试试格式化日期</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">Format</span><span class="p">(</span><span class="nx">FTime</span><span class="p">))</span> <span class="c1">// 再试试格式化时间</span>
</span><span class='line'>  <span class="c1">// 下面定个时间起点</span>
</span><span class='line'>  <span class="nx">fromDate</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nx">ParseInLocation</span><span class="p">(</span><span class="nx">FDateTime</span><span class="p">,</span> <span class="nx">StartTime</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Local</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">TotalTime</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">hourNeedle</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="nx">TotalTime</span>
</span><span class='line'>      <span class="nx">minuteNeedle</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">12</span><span class="p">)</span> <span class="o">%</span> <span class="nx">TotalTime</span>
</span><span class='line'>      <span class="nx">secondNeedle</span> <span class="o">:=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">720</span><span class="p">)</span> <span class="o">%</span> <span class="nx">TotalTime</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="nx">hourNeedle</span> <span class="o">==</span> <span class="nx">minuteNeedle</span> <span class="o">&amp;&amp;</span> <span class="nx">minuteNeedle</span> <span class="o">==</span> <span class="nx">secondNeedle</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;Three needles get together!&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Unix</span><span class="p">(</span><span class="nx">fromDate</span><span class="p">.</span><span class="nx">Unix</span><span class="p">()</span><span class="o">+</span><span class="nb">int64</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">0</span><span class="p">).</span><span class="nx">Format</span><span class="p">(</span><span class="nx">FTime</span><span class="p">))</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PSR标准备忘]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/26/psrbiao-zhun-bei-wang/"/>
    <updated>2018-11-26T10:35:19+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/26/psrbiao-zhun-bei-wang</id>
    <content type="html"><![CDATA[<p>PSR 是 PHP Standard Recommendations 的简写，由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。</p>

<p>项目的目的在于：通过框架作者或者框架的代表之间讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，避免各家自行发展的风格阻碍了 PHP 的发展，解决这个程序设计师由来已久的困扰。</p>

<!-- more -->


<p>目前的 PSR 中文翻译地址：<a href="https://laravel-china.org/docs/psr">https://laravel-china.org/docs/psr</a></p>

<p>基本的规范要求应该达到 PSR-4，随着项目工程的增长、人员的扩招，最终遵循的标准必须越来越高。</p>

<p>以下是从PSR-0到PSR-4的内容，需要详细了解。PSR-5已经废弃，PSR-6以上的有一定概念即可。</p>

<ul>
<li><p>PSR-0 自动加载规范（已弃用）- <a href="https://laravel-china.org/docs/psr/psr-0-automatic-loading-specification/1603">https://laravel-china.org/docs/psr/psr-0-automatic-loading-specification/1603</a></p></li>
<li><p>PSR-1 基础编码规范 &ndash; <a href="https://laravel-china.org/docs/psr/basic-coding-standard/1605">https://laravel-china.org/docs/psr/basic-coding-standard/1605</a></p></li>
<li><p>PSR-2 编码风格规范 &ndash; <a href="https://laravel-china.org/docs/psr/psr-2-coding-style-guide/1606">https://laravel-china.org/docs/psr/psr-2-coding-style-guide/1606</a></p></li>
<li><p>PSR-3 日志接口规范 &ndash; <a href="https://laravel-china.org/docs/psr/psr-3-logger-interface/1607">https://laravel-china.org/docs/psr/psr-3-logger-interface/1607</a></p></li>
<li><p>PSR-4 自动加载规范 &ndash; <a href="https://laravel-china.org/docs/psr/psr-4-autoloader/1608">https://laravel-china.org/docs/psr/psr-4-autoloader/1608</a></p></li>
<li><p>PSR-4 自动加载规范 &ndash; 示例文档 &ndash; <a href="https://laravel-china.org/docs/psr/psr-4-autoloader-example/1609">https://laravel-china.org/docs/psr/psr-4-autoloader-example/1609</a></p></li>
<li><p>PSR-4 自动加载规范 &ndash; 说明文档 &ndash; <a href="https://laravel-china.org/docs/psr/psr-4-autoloader-meta/1610">https://laravel-china.org/docs/psr/psr-4-autoloader-meta/1610</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思考题：直播弹幕系统的设计]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/25/zhi-bo-dan-mu-xi-tong-de-she-ji/"/>
    <updated>2018-11-25T20:45:36+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/25/zhi-bo-dan-mu-xi-tong-de-she-ji</id>
    <content type="html"><![CDATA[<p>从来没有开发过弹幕系统，今天在被问到这个问题的时候有点不知所措，以为是传统的像 BiliBili 这样的弹幕视频网站一样，从存储系统中拉取已有弹幕数据交付给前端按时间顺序显示就好，但是事后重新思考这个的问题的时候，发现不对——绝对不是这么简单。当时我应该误解了对方的意思，没有及时作出沟通，一下子就懵了。</p>

<p>面试官想考察我的真正场景是——<strong><em>如何设计一个直播平台的弹幕系统</em></strong>。</p>

<p>晚上回来赶紧再复盘一下这个问题。</p>

<!-- more -->


<p>我依稀记得面试官的问题是这样的：</p>

<blockquote><p>不使用PUSH方式，不使用长连接的方案下，如何设计一个（直播平台的）弹幕系统，并且能够突出显示我自己发的弹幕。</p></blockquote>

<p>在B站这样的弹幕网站里，除开直播频道之外，每个单独的视频应该都是把已有的弹幕都存储起来，而且由于B站每个视频的弹幕是有上限的，这样就保证了数据不会超载，所以最简单的方式就是可以直接使用 redis 的 list 来实现，单条数据存储的可能是像下面这样的数据结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;member_id&quot;</span><span class="p">,</span> <span class="c1">// 用户ID</span>
</span><span class='line'>    <span class="s2">&quot;content&quot;</span><span class="p">,</span> <span class="c1">// 弹幕内容</span>
</span><span class='line'>    <span class="s2">&quot;offset_time&quot;</span><span class="p">,</span> <span class="c1">// 相对于视频时长的偏移时间，用于确定弹幕出现的位置</span>
</span><span class='line'>    <span class="s2">&quot;timestamp&quot;</span><span class="p">,</span> <span class="c1">// 用户真正发表弹幕的时间</span>
</span><span class='line'>    <span class="s2">&quot;extra&quot;</span> <span class="c1">// 扩展字段，比如弹幕的效果（顶端，底端）、样式（颜色，字体大小）等等</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然如果稍做一些修改的话，也可以用 redis 的 sorted set 来实现。在这样的场景下，只需要在后端从存储中获取到每个视频对应的弹幕数据，排序好之后交给前端处理就好，甚至还可以不用后端做排序，让前端根据偏移时间自行做排序减少服务器的资源消耗。而要突出显示我自己的弹幕的话，只需要写完弹幕发送的时候，直接由前端处理先实时显示在屏幕上，然后再上报给后端接口存储起来就好。</p>

<p><strong><em>但是，直播系统的弹幕和这上面的思路完全不一样！！！</em></strong></p>

<p>直播间消息，相对于 IM 的场景，有其几个特点：1、消息要求及时，过时的消息对于用户来说不重要；2、松散的群聊，用户随时进群，随时退群；3、用户进群后，离线期间的消息不需要重发。</p>

<p>对于用户来说，在直播间有三个典型的操作：1、进入直播间，拉取正在观看直播的用户列表；2、接收直播间持续接收弹幕消息；3、自己发消息。</p>

<p>在这样的场景下，初步的设计可以做成这样——选择了 redis 的 sorted set 存储消息，基本操作如下:</p>

<blockquote><p>用户发弹幕，通过 zAdd 添加数据，其中 score 是弹幕的发送时间；</p>

<p>接收直播间的消息，通过 zRangeByScore 操作，两秒一次轮询；</p>

<p>进入直播间，获取用户的列表，通过 zRange 操作来完成；</p></blockquote>

<p>整个系统的流程应该是：</p>

<blockquote><p>写流程是:  前端提交弹幕给后端 &ndash;> 后端将弹幕推入队列 &ndash;> 队列处理机进行处理 &ndash;> 存储到 redis</p>

<p>读流程是:  前端轮询请求后端 &ndash;> 后端使用 zRangeByScore查询 redis &ndash;> 前端按时间顺序显示弹幕</p></blockquote>

<p>这个初步方案可能只能在直播人数较少的情况下起效，随着人数越来越多，瓶颈很快就能达到，会产生一些问题。</p>

<p>第一个问题——<strong><em>消息串行写入 redis，如果某个直播间消息量很大，那么消息会堆积在队列中，消息延迟较大。</em></strong></p>

<p>这个问题需要使用合适的消息队列来进行处理，由于我目前使用的最多的消息队列只有基于 redis 的 resque 和基于 Golang 的 nsque。没有做过详尽的性能测试来确定这两种队列能处理多大的 QPS，如果可以的话那就自然最好；如果不行的话，那就要选择更高性能的比如 Kafka 或者其他的分布式消息队列。</p>

<p>第二个问题——<strong><em>用户轮询最新消息，需要进行 redis 的 zRangeByScore 操作，redis slave 的性能瓶颈较大。</em></strong></p>

<p>解决这个问题可以额外增加一层缓存。后端每隔 1 秒左右取拉取一次直播间的弹幕，前端轮询数据时，从该缓存读取数据。弹幕的返回条数根据直播间的大小自动调整，小直播间返回允许时间跨度大一些的弹幕，大直播间则对时间跨度以及弹幕条数做更严格的限制。这里缓存与平常使用的本地缓存问题，有一个最大区别：成本问题。如果所有直播间的弹幕都进行缓存，假设同时有 1000 个直播间，每个直播间有5种弹幕类型，缓存每隔 1 秒拉取一次数据，40 台缓存处理机器，那么对 redis 的访问 QPS 是 1000 * 5 * 40 = 20W。成本太高，因此我们只有大直播间才自动开启缓存，小直播间不开启。</p>

<p>第三个问题——<strong><em>弹幕数据也支持回放，直播结束后，这些数据存放于 redis 中，在回放时，会与直播的数据竞争 redis 的 CPU 资源。</em></strong></p>

<p>解决方案——直播结束后，数据备份到 MySQL；增加一组回放的 redis；增加回放的缓存。回放时，读取数据顺序是: 缓存 &ndash;> redis &ndash;> MySQL。缓存与回放 redis 都可以只存某个直播间某种弹幕类型的部分数据，有效控制容量；缓存与回放 redis 使用 sorted set数据结构，这样整个系统的数据结构都保持一致。</p>

<p>我个人能力有限，暂时只能想到这么多。除了上面这些之外，还需要考虑整个系统的高可用保障——包括机房部署、降级和熔断、全面的业务监控、轮询方案的优化等等。</p>

<p>暂时就这些，我的知识面还需要不断完善，业务场景还需要不断扩充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法题：爬楼梯算法]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/25/pa-lou-ti-suan-fa/"/>
    <updated>2018-11-25T18:16:40+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/25/pa-lou-ti-suan-fa</id>
    <content type="html"><![CDATA[<p>有这样一个题目：应该是大学时代的经典算法题了——小孩上楼梯。</p>

<blockquote><p>有个小孩正在上楼梯，楼梯有s阶台阶，小孩一次可以上1阶或2阶。实现一个算法，计算小孩有多少种上楼梯的方式。输入n，返回一个整数。</p></blockquote>

<p>稍微想了一下，这个题目可以用递归来解决。根据题目的规则，最后一步只有两种走法：要么走1阶，要么走2阶。所以可以得出这么一个递归公式：<code>f(s) = f(s-1) + f(s-2)</code>。好像就是一个斐波那契数列公式？</p>

<!-- more -->


<p>这个问题的边界值就是在只有1阶的情况下，只有1种方式(1)；在只有2阶的情况下，有两种方式(1,1)、(2)。</p>

<p>编写程序如下：</p>

<figure class='code'><figcaption><span> (stair.go)</span> <a href='http://caiknife.github.io/downloads/code/stair/stair.go'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 默认走10阶</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">GoStair</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GoStair</span><span class="p">(</span><span class="nx">s</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="mi">3</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">s</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">GoStair</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">GoStair</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用正常的递归，在递归层数过多的情况下，可能会有stack overflow的风险，所以可以改写为用循环处理的方式：</p>

<figure class='code'><figcaption><span> (stair_with_loop.go)</span> <a href='http://caiknife.github.io/downloads/code/stair/stair_with_loop.go'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 默认走10阶</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">GoStairWithLoop</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GoStairWithLoop</span><span class="p">(</span><span class="nx">s</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// f(1) = 1</span>
</span><span class='line'>  <span class="c1">// f(2) = 2</span>
</span><span class='line'>  <span class="c1">// result是f(1)的值 tmp是f(2)-f(1)的值</span>
</span><span class='line'>  <span class="nx">result</span><span class="p">,</span> <span class="nx">tmp</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">;</span> <span class="nx">s</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">tmp</span> <span class="p">=</span> <span class="nx">result</span> <span class="o">+</span> <span class="nx">tmp</span>
</span><span class='line'>      <span class="nx">result</span> <span class="p">=</span> <span class="nx">tmp</span> <span class="o">-</span> <span class="nx">result</span>
</span><span class='line'>      <span class="nx">s</span><span class="o">--</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将循环中使用到的变量提取出来作为函数的参数使用，就成了尾递归。在方法最后被调用时，线程栈里面的临时变量与参数此时已经没任何用了，可以被GC回收，所以理论上就是同上面的循环方法是一致的，无论有多深，都不会发生内存异常。</p>

<figure class='code'><figcaption><span> (stair_with_tail.go)</span> <a href='http://caiknife.github.io/downloads/code/stair/stair_with_tail.go'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 默认走10阶</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">GoStairWithTail</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GoStairWithTail</span><span class="p">(</span><span class="nx">s</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">result</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">tmp</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">GoStairWithTail</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">tmp</span><span class="p">,</span> <span class="nx">result</span><span class="o">+</span><span class="nx">tmp</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种情况下，该算法的时间复杂度是<code>O(n)</code>。</p>

<p>下面扩展一下思路：</p>

<blockquote><p>这小屁孩的老师作业留少了，闲着没事爬楼梯，楼梯有s阶台阶(steps)，小孩一次可以上m阶（maxStep）。计算小孩有多少种上楼梯的方式。输入s,m，返回一个整数。</p></blockquote>

<p>一样分析可以得到公式：<code>f(s) = f(s-1) + f(s-2) + ... + f(s-m)</code>。</p>

<p>参照上例思路，我们可以在递归里分为两大部分，一部分是steps > maxStep时，参照f(s,m) = f(s-1) + f(s-2) + f(s-3) + &hellip; + f(s-m)进行累加。</p>

<p>我们现在看steps &lt;= maxStep时，怎么给出类似上例里f(2)，f(3)的返回值。其实，上例中的f(3)，就是台阶一共3级，最大可以跨2步的值，即f(2) 就是f(2,2)，f(3)就是f(3,2)。分析一下就得出下面的图解：</p>

<p><a href="http://caiknife.github.io/downloads/image/go/stair.jpg" title="爬楼梯算法 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/go/stair.jpg" alt="爬楼梯算法 " /></a></p>

<p>根据以上图解，分析如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>steps &gt; maxStep 时，f(s,m) = f(s-1) + f(s-2) + f(s-3) + ··· + f(s-m);
</span><span class='line'>steps &lt;= maxStep时，f(s,s) = f(s,s-1) +1;
</span><span class='line'>steps = 1时，return 1;
</span><span class='line'>steps = 0时，return 0;</span></code></pre></td></tr></table></div></figure>


<p>编码如下：</p>

<figure class='code'><figcaption><span> (stair_with_s_m.go)</span> <a href='http://caiknife.github.io/downloads/code/stair/stair_with_s_m.go'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 默认走10阶，每次最多2阶</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">GoStairWithSM</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GoStairWithSM</span><span class="p">(</span><span class="nx">s</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">m</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">result</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="p">&gt;</span> <span class="nx">m</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">m</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">result</span> <span class="o">+=</span> <span class="nx">GoStairWithSM</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span> <span class="nx">m</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span> <span class="p">=</span> <span class="nx">GoStairWithSM</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">s</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>打完收工。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思维导图：Go语言基础知识]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/24/goyu-yan-ji-zhi-shi/"/>
    <updated>2018-11-24T18:37:37+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/24/goyu-yan-ji-zhi-shi</id>
    <content type="html"><![CDATA[<p>工作以来一直都是用的PHP，不过其实我还会写Python，Ruby，就是没有用在公司的项目上。</p>

<p>没关系，我一样写得很溜。</p>

<p>最近又开始接触Go了，应该是很早就已经开始接触Go了，看了一些教程之后，我真的想说：真的很棒！</p>

<!-- more -->


<p><a href="http://caiknife.github.io/downloads/image/go/go.png" title="Go语言基础知识 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/go/go.png" alt="Go语言基础知识 " /></a></p>

<p>我现在只想尽快成为一个优秀的Go工程师。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思维导图：如何设计一个秒杀系统]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/24/ru-he-she-ji-ge-miao-sha-xi-tong/"/>
    <updated>2018-11-24T12:13:21+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/24/ru-he-she-ji-ge-miao-sha-xi-tong</id>
    <content type="html"><![CDATA[<p>秒杀是一个非常常见的应用场景了，我也做过一些秒杀类的需求。</p>

<p>做过这么多同类型的需求之后，我查阅了一些资料，总结了一下在设计一个秒杀系统中，可能会用到的一些知识点。</p>

<!-- more -->


<p><a href="http://caiknife.github.io/downloads/image/miaosha/miaosha.png" title="如何设计一个秒杀系统 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/miaosha/miaosha.png" alt="如何设计一个秒杀系统 " /></a></p>

<p>这个思维导图我还会不断完善，不断迭代。</p>

<p>无规矩不成方圆，方法论就是规矩，动手实操才能成方圆。</p>

<p>这就是知识带来的力量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP安装IMAP扩展]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan/"/>
    <updated>2018-11-21T20:43:49+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan</id>
    <content type="html"><![CDATA[<p>在经历了 macOS 上的 homebrew 升级之后，imap 就不再是 homebrew 的 PHP 里默认安装的扩展了，这样如果你在 composer.json 中引用了一个需要用到 imap 扩展的库，那么久没有办法更新 composer 库，这样着实让人内伤。</p>

<p>所以今天就来解决这个问题。</p>

<!-- more -->


<h3>第一步</h3>

<p>你需要通过 brew 安装 imap-uw</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install imap-uw
</span></code></pre></td></tr></table></div></figure>


<p>注：在完成第一步之后，你需要安装 openssl，不管通过何种方式。这里简单介绍一下通过 brew 安装openssl，非常的简单。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install openssl
</span></code></pre></td></tr></table></div></figure>


<p>这就是安装拓展的准备工作，接下来才开始：</p>

<h3>第二步</h3>

<p>你需要去官网下载跟你现在环境所对应的PHP版本，我的是 7.1 的，所以我下载了 PHP 7.1 的，然后解压。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -zxvf ~/Downloads/php-7.1.24.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>解压之后进入到当前 PHP 文件夹的 ext/imap 文件夹当中。注意，解压是解压到当前目录下，当然，你也可以指定目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>php-7.1.19/ext/imap
</span></code></pre></td></tr></table></div></figure>


<p>进入到该目录后，第一个命令就是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo phpize
</span></code></pre></td></tr></table></div></figure>


<p>如果你不执行该命令，是无法在这个目录下进行编译安装的。接下来就是编译安装了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --with-imap<span class="o">=</span>/usr/local/Cellar/imap-uw/2007f --with-kerberos --with-imap-ssl<span class="o">=</span>/usr/local/opt/openssl
</span></code></pre></td></tr></table></div></figure>


<p>注：imap 的目录就是 imap-uw 的安装目录，凡是通过 brew 安装的都是在 /usr/local/Cellar 目录下，ssl 的目录就是你之前的 openssl 的目录。这些都要改为自己的。然后再是执行之前的编译。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make
</span></code></pre></td></tr></table></div></figure>


<p>执行完成之后，会在 imap 目录下生成许多的文件，此时需要创建一个文件夹。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /usr/local/opt/php71-imap
</span></code></pre></td></tr></table></div></figure>


<p>这个文件夹用来存放刚才执行编译生成的 imap.so 文件。当前你所在的目录还是在 imap 里面，需要把 imap.so 文件拷贝到刚才创建的文件夹中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv modules/imap.so /usr/local/opt/php71-imap/imap.so
</span></code></pre></td></tr></table></div></figure>


<p>最后你需要在你的 /usr/local/etc/php/7.1/conf.d/imap.ini 里面添加这样一句话即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[imap]</span>
</span><span class='line'><span class="na">extension</span><span class="o">=</span><span class="s">&quot;/usr/local/opt/php71-imap/imap.so&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>第三步</h3>

<p>检查是否安装好:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>php -m | grep imap
</span></code></pre></td></tr></table></div></figure>


<p>如果出现了 imap，那么大功告成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思维导图两张]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang/"/>
    <updated>2018-11-20T14:03:41+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang</id>
    <content type="html"><![CDATA[<p>更新两张思维导图，有关于数据结构和算法，以及Linux性能优化的知识框架。</p>

<!-- more -->


<p><a href="http://caiknife.github.io/downloads/image/composer/ds.png" title="数据结构与算法 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/composer/ds.png" alt="数据结构与算法 " /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/composer/linux.png" title="Linux性能优化 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/composer/linux.png" alt="Linux性能优化 " /></a></p>

<p>一时偷懒造成的问题可能花数十倍的时间精力去善后。</p>

<p>人生艰难。</p>

<p>人间不值得，我自己最值得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[趣味题：求字符串的全排列]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-qiu-zi-fu-chuan-de-quan-pai-lie/"/>
    <updated>2018-11-17T18:47:57+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-qiu-zi-fu-chuan-de-quan-pai-lie</id>
    <content type="html"><![CDATA[<p>这是一个面试题。</p>

<blockquote><p>给定一个字符串，输出这个字符串的全排列。比如给定了字符串abc，那么输出结果就是
abc acb bac bca cab cba</p></blockquote>

<p>如果用Python来解决这个问题的话，那真的是非常非常简单的了，因为Python有个<code>itertools</code>工具包，这个包下有个工具类叫<code>permutations</code>。</p>

<p>几行代码就可以实现功能：</p>

<!-- more -->




<figure class='code'><figcaption><span> (perm.py)</span> <a href='http://caiknife.github.io/downloads/code/quiz/perm.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding:utf8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">permutations</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">permutations</span><span class="p">(</span><span class="s">&#39;abc&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">v</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然我们不能这么赖皮地使用Python的内置库来解决这个问题，更重要的是，我们需要了解全排列的算法。</p>

<p>所谓全排列，就是打印出字符串中所有字符的所有排列。例如输入字符串abc，则打印出 a、b、c 所能排列出来的所有字符串 abc、acb、bac、bca、cab 和 cba 。</p>

<p>一般最先想到的方法是暴力循环法，即对于每一位，遍历集合中可能的元素，如果在这一位之前出现过了该元素，跳过该元素。例如对于abc，第一位可以是 a 或 b 或 c 。当第一位为 a 时，第二位再遍历集合，发现 a 不行，因为前面已经出现 a 了，而 b 和 c 可以。当第二位为 b 时 ， 再遍历集合，发现 a 和 b 都不行，c 可以。可以用递归或循环来实现，但是复杂度为 O(n<sup>n</sup>) 。有没有更优雅的解法呢。</p>

<p>首先考虑bac和cba这二个字符串是如何得出的。显然这二个都是abc中的 a 与后面两字符交换得到的。然后可以将abc的第二个字符和第三个字符交换得到acb。同理可以根据bac和cba来得bca和cab。</p>

<p>因此可以知道，全排列就是从第一个数字起每个数分别与它后面的数字交换，也可以得出这种解法每次得到的结果都是正确结果，所以复杂度为 O(n!)。</p>

<p>最后我写了一个PHP版本的实现：</p>

<figure class='code'><figcaption><span> (perm.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/perm.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/11/17</span>
</span><span class='line'><span class="sd"> * Time: 15:09</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StringPlace</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stringPlace</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">stringPlace</span><span class="p">(</span><span class="nv">$stringSize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$tmpString</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$stringSize</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$tmpString</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="nx">rand</span><span class="p">(</span><span class="mi">97</span><span class="p">,</span> <span class="mi">122</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Origin string is &quot;</span> <span class="o">.</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$tmpString</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">perm</span><span class="p">(</span><span class="nv">$tmpString</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">sizeof</span><span class="p">(</span><span class="nv">$tmpString</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">perm</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$arr</span><span class="p">,</span> <span class="nv">$k</span><span class="p">,</span> <span class="nv">$m</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">==</span> <span class="nv">$m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$arr</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$k</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="nv">$m</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_swap</span><span class="p">(</span><span class="nv">$arr</span><span class="p">[</span><span class="nv">$k</span><span class="p">],</span> <span class="nv">$arr</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">perm</span><span class="p">(</span><span class="nv">$arr</span><span class="p">,</span> <span class="nv">$k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$m</span><span class="p">);</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_swap</span><span class="p">(</span><span class="nv">$arr</span><span class="p">[</span><span class="nv">$k</span><span class="p">],</span> <span class="nv">$arr</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">_swap</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$a</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$b</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">list</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span> <span class="nv">$a</span><span class="p">)</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>全排列就是这样，代码看起来还是有点点难懂，需要深入了解才能融会贯通。</p>
]]></content>
  </entry>
  
</feed>
