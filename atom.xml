<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[但行好事，莫问前程]]></title>
  <link href="http://caiknife.github.io/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2018-11-20T14:41:45+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[思维导图两张]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang/"/>
    <updated>2018-11-20T14:03:41+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang</id>
    <content type="html"><![CDATA[<p>更新两张思维导图，有关于数据结构和算法，以及Linux性能优化的知识框架。</p>

<!-- more -->


<p><a href="http://caiknife.github.io/downloads/image/composer/ds.png" title="数据结构与算法 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/composer/ds.png" alt="数据结构与算法 " /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/composer/linux.png" title="Linux性能优化 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/composer/linux.png" alt="Linux性能优化 " /></a></p>

<p>一时偷懒造成的问题可能花数十倍的时间精力去善后。</p>

<p>人生艰难。</p>

<p>人间不值得，我自己最值得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[趣味题：求字符串的全排列]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-qiu-zi-fu-chuan-de-quan-pai-lie/"/>
    <updated>2018-11-17T18:47:57+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-qiu-zi-fu-chuan-de-quan-pai-lie</id>
    <content type="html"><![CDATA[<p>这是一个面试题。</p>

<blockquote><p>给定一个字符串，输出这个字符串的全排列。比如给定了字符串abc，那么输出结果就是
abc acb bac bca cab cba</p></blockquote>

<p>如果用Python来解决这个问题的话，那真的是非常非常简单的了，因为Python有个<code>itertools</code>工具包，这个包下有个工具类叫<code>permutations</code>。</p>

<p>几行代码就可以实现功能：</p>

<!-- more -->




<figure class='code'><figcaption><span> (perm.py)</span> <a href='http://caiknife.github.io/downloads/code/quiz/perm.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding:utf8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">permutations</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">permutations</span><span class="p">(</span><span class="s">&#39;abc&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">v</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然我们不能这么赖皮地使用Python的内置库来解决这个问题，更重要的是，我们需要了解全排列的算法。</p>

<p>所谓全排列，就是打印出字符串中所有字符的所有排列。例如输入字符串abc，则打印出 a、b、c 所能排列出来的所有字符串 abc、acb、bac、bca、cab 和 cba 。</p>

<p>一般最先想到的方法是暴力循环法，即对于每一位，遍历集合中可能的元素，如果在这一位之前出现过了该元素，跳过该元素。例如对于abc，第一位可以是 a 或 b 或 c 。当第一位为 a 时，第二位再遍历集合，发现 a 不行，因为前面已经出现 a 了，而 b 和 c 可以。当第二位为 b 时 ， 再遍历集合，发现 a 和 b 都不行，c 可以。可以用递归或循环来实现，但是复杂度为 O(n<sup>n</sup>) 。有没有更优雅的解法呢。</p>

<p>首先考虑bac和cba这二个字符串是如何得出的。显然这二个都是abc中的 a 与后面两字符交换得到的。然后可以将abc的第二个字符和第三个字符交换得到acb。同理可以根据bac和cba来得bca和cab。</p>

<p>因此可以知道，全排列就是从第一个数字起每个数分别与它后面的数字交换，也可以得出这种解法每次得到的结果都是正确结果，所以复杂度为 O(n!)。</p>

<p>最后我写了一个PHP版本的实现：</p>

<figure class='code'><figcaption><span> (perm.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/perm.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/11/17</span>
</span><span class='line'><span class="sd"> * Time: 15:09</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StringPlace</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stringPlace</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">stringPlace</span><span class="p">(</span><span class="nv">$stringSize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$tmpString</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$stringSize</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$tmpString</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="nx">rand</span><span class="p">(</span><span class="mi">97</span><span class="p">,</span> <span class="mi">122</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Origin string is &quot;</span> <span class="o">.</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$tmpString</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">perm</span><span class="p">(</span><span class="nv">$tmpString</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">sizeof</span><span class="p">(</span><span class="nv">$tmpString</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">perm</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$arr</span><span class="p">,</span> <span class="nv">$k</span><span class="p">,</span> <span class="nv">$m</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">==</span> <span class="nv">$m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$arr</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$k</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="nv">$m</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_swap</span><span class="p">(</span><span class="nv">$arr</span><span class="p">[</span><span class="nv">$k</span><span class="p">],</span> <span class="nv">$arr</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">perm</span><span class="p">(</span><span class="nv">$arr</span><span class="p">,</span> <span class="nv">$k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$m</span><span class="p">);</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_swap</span><span class="p">(</span><span class="nv">$arr</span><span class="p">[</span><span class="nv">$k</span><span class="p">],</span> <span class="nv">$arr</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">_swap</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$a</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$b</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">list</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span> <span class="nv">$a</span><span class="p">)</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>全排列就是这样，代码看起来还是有点点难懂，需要深入了解才能融会贯通。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[趣味题：找出N个数字中最大的K个]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-zhao-chu-nge-shu-zi-zhong-zui-da-de-kge/"/>
    <updated>2018-11-17T17:58:40+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-zhao-chu-nge-shu-zi-zhong-zui-da-de-kge</id>
    <content type="html"><![CDATA[<p>算是一个面试题吧，内容就是如标题所写的一样：</p>

<blockquote><p>给定N个指定的数字，输出前K个最大的数字，比如给出了1，2，3，4，5，6，7，8，要求输出前3个最大的数字，那么就输出8，7，6</p></blockquote>

<p>其实这个题目，看起来很简单，其实只需要从大到小排序之后，输出前K个数字就可以了，只是排序有很多种算法——常用的就有冒泡排序、选择排序、插入排序、归并排序、快速排序等等，冒泡、选择、插入的时间复杂度是O(n<sup>2</sup>)，归并、快速的时间复杂度是O(n*lgn)。如果需要自己手动实现排序算法的话，那么使用快速排序和归并排序的效果肯定是最好的。</p>

<!-- more -->


<p>不过这道题里，我选择了PHP中自带的数据结构 <code>SplMaxHeap</code> 来完成这个问题，也就是用了堆排序。</p>

<p>其实源码很简单：</p>

<figure class='code'><figcaption><span> (heap.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/heap.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/11/17</span>
</span><span class='line'><span class="sd"> * Time: 14:54</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Number</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">printKMaxFromN</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">printKMaxFromN</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$n</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="nv">$k</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;BOTH n k must be positive.&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>            <span class="k">exit</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$n</span> <span class="o">&lt;</span> <span class="nv">$k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;n MUST geq k.&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>            <span class="k">exit</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$tmpHeap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\SplMaxHeap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$tmpHeap</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">(</span><span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$k</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="nv">$tmpHeap</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">()</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$tmpHeap</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码就是给定了10个0到50的随机数，每生成一个就放入到SplMaxHeap中。</p>

<p>堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] >= A[i]。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。</p>

<p><em>总结</em></p>

<p>在找出前K个最小(或最大)的元素时，如果元素个数较少，可以采用简单选择排序；如果元素较多，可以采用堆排序；如果元素基本有序，可以采用冒泡排序。本文采用的是堆排序，时间复杂度是O(n*lgk)。</p>

<p>虽然PHP的数组几乎是万能的，但是也别忘了PHP还是提供了更多更强大的数据结构可以让我们使用，在特定的场景下使用合适的数据结构，不要一股脑儿地只使用PHP的数组，这对于技术人员才是最重要的——要学会思考，要有自己的想法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用glide进行Go的包管理]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/16/shi-yong-glidejin-xing-gode-bao-guan-li/"/>
    <updated>2018-11-16T19:05:17+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/16/shi-yong-glidejin-xing-gode-bao-guan-li</id>
    <content type="html"><![CDATA[<p>长话短说，一切从简。</p>

<p>今天开始使用 <code>glide</code> 进行 <code>Golang</code> 的包管理。</p>

<!-- more -->


<p>先安装 <code>glide</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install glide
</span></code></pre></td></tr></table></div></figure>


<p>然后进入工作目录，使用 <code>glide</code> 进行初始化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>glide init
</span></code></pre></td></tr></table></div></figure>


<p>由于有些库放在 golang.org 上，不能直接下载，所以需要使用代理。我自己本身用了 <code>ShadowSocks</code> 作为翻墙工具，所以使用 <code>SS</code> 代理即可。</p>

<p>把下面的代码写到一个脚本里，命名为 <code>proxy</code> ，位置是 <code>/usr/local/bin/</code> 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span>socks5://127.0.0.1:1080
</span><span class='line'><span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span>socks5://127.0.0.1:1080
</span><span class='line'><span class="nv">$*</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>proxy glide install
</span></code></pre></td></tr></table></div></figure>


<p>就可以顺利下载库了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Python脚本抓取早期知乎页面里的图片]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/15/shi-yong-pythonjiao-ben-zhua-qu-zao-qi-zhi-hu-ye-mian-li-de-tu-pian/"/>
    <updated>2018-11-15T11:38:54+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/15/shi-yong-pythonjiao-ben-zhua-qu-zao-qi-zhi-hu-ye-mian-li-de-tu-pian</id>
    <content type="html"><![CDATA[<p>很久很久以前，我在知乎看到了一个问题<a href="https://www.zhihu.com/question/37709992">长得好看，但没有男朋友是怎样的体验？</a>。</p>

<p>出于男性本能的需求，我就花了一个中午的时间写了个脚本，专门用于抓取知乎问题页面下的图片，然后就把我的代码写到了这个问题的<a href="https://www.zhihu.com/question/37709992/answer/121184589">答案</a>里。接着，又过了几天——我的答案被折叠了……</p>

<!-- more -->


<p>使用的 <code>Python</code> 版本是 2.7 ，用到的库是 <code>requests</code> 和 <code>pyquery</code> 。</p>

<p>Python 源码如下：</p>

<figure class='code'><figcaption><span> (dl_with_names.py)</span> <a href='http://caiknife.github.io/downloads/code/zhihu/dl_with_names.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding:utf8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pyquery</span> <span class="kn">import</span> <span class="n">PyQuery</span> <span class="k">as</span> <span class="n">pq</span>
</span><span class='line'>
</span><span class='line'><span class="n">entity</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">images</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">get_url</span><span class="p">()</span>
</span><span class='line'>        <span class="n">load_page</span><span class="p">()</span>
</span><span class='line'>        <span class="n">save_imgs</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">e</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_url</span><span class="p">():</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span>
</span><span class='line'>    <span class="c"># 如果不是dl.py zhihu_url这种格式的话，抛出异常</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">u&quot;Wrong number for args, please use Zhihu question url!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">zhihu_url</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="c"># zhihu_url不符合问题页面url格式的话，抛出异常</span>
</span><span class='line'>    <span class="n">re_exp</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">ur&quot;^https://www\.zhihu\.com/question/(\d+)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">re_exp</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">zhihu_url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">match</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">u&quot;Zhihu url is invalid!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">entity</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">zhihu_url</span>
</span><span class='line'>    <span class="n">entity</span><span class="p">[</span><span class="s">&#39;question&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">groups</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="n">entity</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">load_page</span><span class="p">():</span>
</span><span class='line'>    <span class="n">header</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">ur&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s">ur&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Host&#39;</span><span class="p">:</span> <span class="s">ur&#39;www.zhihu.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Accept&#39;</span><span class="p">:</span> <span class="s">ur&#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Accept-Language&#39;</span><span class="p">:</span> <span class="s">ur&#39;zh-CN,zh;q=0.8,en;q=0.6&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Accept-Encoding&#39;</span><span class="p">:</span> <span class="s">ur&#39;gzip, deflate, sdch&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Connection&#39;</span><span class="p">:</span> <span class="s">ur&#39;keep-alive&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Cache-Control&#39;</span><span class="p">:</span> <span class="s">ur&#39;max-age=0&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">entity</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">],</span> <span class="n">headers</span><span class="o">=</span><span class="n">header</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">u&quot;Http error!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="n">pq</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">d</span><span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
</span><span class='line'>    <span class="n">entity</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">title</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">u&quot; &quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">imgs</span> <span class="o">=</span> <span class="n">d</span><span class="p">(</span><span class="s">&quot;img.origin_image.zh-lightbox-thumb.lazy&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">ele</span> <span class="ow">in</span> <span class="n">imgs</span><span class="p">:</span>
</span><span class='line'>        <span class="n">images</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pq</span><span class="p">(</span><span class="n">ele</span><span class="p">)</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s">&quot;data-original&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">save_imgs</span><span class="p">():</span>
</span><span class='line'>    <span class="n">dest_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span> <span class="o">+</span> <span class="s">&quot;/images/&quot;</span> <span class="o">+</span> <span class="n">entity</span><span class="p">[</span><span class="s">&#39;question&#39;</span><span class="p">]</span> <span class="o">+</span> \
</span><span class='line'>               <span class="n">entity</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">dest_dir</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">dest_dir</span><span class="p">):</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">dest_dir</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="n">images</span><span class="p">:</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span><span class='line'>        <span class="n">filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">dest_dir</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">filename</span><span class="p">,</span> <span class="s">&quot;wb&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">img</span> <span class="o">+</span> <span class="s">&quot; done.&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法很简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python dl_with_names.py https://www.zhihu.com/question/37709992
</span></code></pre></td></tr></table></div></figure>


<p>嗯，由于知乎页面改版了，所以现在并没有办法再下载了…… 只能再另外通过解决登录态的问题，看到问题页之后再想办法抓取图片。</p>

<p>上面这种方法适合有一定命令行基础的人群，对于普通人来说，更简单的方法是使用 <code>javascript</code> 。</p>

<figure class='code'><figcaption><span> (dl.js)</span> <a href='http://caiknife.github.io/downloads/code/zhihu/dl.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by caiknife on 16/9/9.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div id=&quot;showImg&quot;&gt;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">prependTo</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img.origin_image.zh-lightbox-thumb.lazy&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#showImg&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;original&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&lt;br/&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>先在地址栏里输入 <code>javascript:</code> ， 再把上面的 JS 代码复制到地址栏里，回车之后就会在页面顶端出现问题页之内图片的链接。</p>

<p>不过由于现在知乎已经不用 <code>jQuery</code> 了，所以这段代码也失效了……</p>

<p>那还是写篇文章纪念一下吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLI 环境高级配置]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/14/cli-improvement/"/>
    <updated>2018-11-14T12:40:07+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/14/cli-improvement</id>
    <content type="html"><![CDATA[<p>最近又发现了几个在 CLI 环境下，对几个已有命令的强化，可以提高用户体验，现在来总结一下。</p>

<!-- more -->


<h2>bat</h2>

<p>安装方式 <code>brew install bat</code></p>

<p>这是一个取代 <code>cat</code> 的命令。通常情况下 <code>cat</code> 只显示普通文本的内容，而 <code>bat</code> 还会根据文件的扩展名高亮显示语法。效果如下图：</p>

<p><a href="http://caiknife.github.io/downloads/image/cli/bat.gif" title="bat " class="fancybox"><img src="http://caiknife.github.io/downloads/image/cli/bat.gif" alt="bat " /></a></p>

<h2>prettyping</h2>

<p>安装方式 <code>brew install prettyping</code></p>

<p>这是一个取代 <code>ping</code> 的命令。可以更加直观地显示 ping 的进度。</p>

<p><a href="http://caiknife.github.io/downloads/image/cli/ping.gif" title="prettyping " class="fancybox"><img src="http://caiknife.github.io/downloads/image/cli/ping.gif" alt="prettyping " /></a></p>

<p>可以用别名来替换已有的 <code>ping</code> 命令：<code>alias ping='prettyping --nolegend'</code></p>

<h2>fd</h2>

<p>安装方式 <code>brew install fd</code></p>

<p>这个命令自然是用来取代 <code>find</code> 。</p>

<p><a href="http://caiknife.github.io/downloads/image/cli/fd.png" title="fd " class="fancybox"><img src="http://caiknife.github.io/downloads/image/cli/fd.png" alt="fd " /></a></p>

<p>下面是一些常用的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fd cli <span class="c"># all filenames containing &quot;cli&quot;</span>
</span><span class='line'>fd -e md <span class="c"># all with .md extension</span>
</span><span class='line'>fd cli -x wc -w <span class="c"># find &quot;cli&quot; and run `wc -w` on each file</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ncdu</h2>

<p>安装方式 <code>brew install ncdu</code></p>

<p>这个命令可以取代 <code>du</code> 。而且还可以在界面内进行操作，通过操作光标进入不同的目录查看文件大小。</p>

<p><a href="http://caiknife.github.io/downloads/image/cli/ncdu.png" title="ncdu " class="fancybox"><img src="http://caiknife.github.io/downloads/image/cli/ncdu.png" alt="ncdu " /></a></p>

<p>别名配置可以写成：<code>alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"</code></p>

<hr />

<p>今天就先到这里，下回再继续吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[摇摆舞者乐感入门指南]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/01/yao-bai-wu-zhe-le-gan-ru-men-zhi-nan/"/>
    <updated>2018-11-01T10:24:18+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/01/yao-bai-wu-zhe-le-gan-ru-men-zhi-nan</id>
    <content type="html"><![CDATA[<p>很久以前，我想成为一个牛逼的吉他手；多年以后，我致力于做音乐的传播者，提高身边朋友们的音乐素养，告诉大家如何去欣赏音乐。</p>

<p>自从 2017 年开始学习摇摆舞以来，我一直都把之前学习吉他的经验应用到学习摇摆舞中，进步还算明显，跳舞之余，还给大家分享了一些有关乐理和乐感的知识。</p>

<!-- more -->


<p>最终，我写出了一张摇摆舞者可以用得上的有关乐理和乐感的思维导图：</p>

<p><a href="http://caiknife.github.io/downloads/image/about/swing.png" title="摇摆舞者乐感入门指南 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/about/swing.png" alt="摇摆舞者乐感入门指南 " /></a></p>

<p>配合几次分享的录音，加上这张图，我相信会对各位舞者的乐感有所帮助。</p>

<p>20180819乐感讲座（1）-打拍子 <a href="https://music.163.com/program?id=1370712472">https://music.163.com/program?id=1370712472</a></p>

<p>20180909乐感讲座（2）-听乐器 <a href="https://music.163.com/program?id=2056478909">https://music.163.com/program?id=2056478909</a></p>

<p>20180916乐感讲座（3）-识风格 <a href="https://music.163.com/program?id=2056582052">https://music.163.com/program?id=2056582052</a></p>

<p>20180925乐感讲座浓缩版-打拍子&amp;听乐器 <a href="https://music.163.com/#/program?id=2056693131">https://music.163.com/#/program?id=2056693131</a></p>

<p>为了音乐，我实在是付出了不少，回报也微乎其微，苦中作乐不容易啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH配置备忘]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/22/zhi-bei-wang/"/>
    <updated>2018-10-22T19:46:38+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/22/zhi-bei-wang</id>
    <content type="html"><![CDATA[<p>记录一下我机器上的SSHConfig，防止将来忘记了。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host jserver
</span><span class='line'>    HostName ********
</span><span class='line'>    User caiknife
</span><span class='line'>
</span><span class='line'>Host j2server
</span><span class='line'>    HostName ********
</span><span class='line'>    User caiknife
</span><span class='line'>    StrictHostKeyChecking no
</span><span class='line'>    Port 2222</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[composer问题排查]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/19/composepai-cha/"/>
    <updated>2018-10-19T14:48:38+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/19/composepai-cha</id>
    <content type="html"><![CDATA[<p>今天更新 composer 库的时候出现了一个问题：</p>

<p><a href="http://caiknife.github.io/downloads/image/composer/1.png" title="Composer Issue " class="fancybox"><img src="http://caiknife.github.io/downloads/image/composer/1.png" alt="Composer Issue " /></a></p>

<p>上图不是我的电脑出现的问题，是通过搜索引擎搜到的图片，我和提出这个问题的题主碰到了一样的问题。</p>

<!-- more -->


<p>查了半天没找到原因是什么，后来在查当前代码库的时候，composer.json 文件里的配置是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;repositories&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;packagist&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;composer&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;packagist.phpcomposer.com&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>搜索了问题之后，发现 packagist.phpcomposer.com 这个景象已经很久没有更新了，所以就造成了目前的问题。只需要把仓库换个镜像源就可以了。</p>

<p>用下面的命令将镜像地址替换为 <a href="https://packagist.laravel-china.org">https://packagist.laravel-china.org</a> 即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>composer config -g repo.packagist composer https://packagist.laravel-china.org
</span><span class='line'>
</span><span class='line'>composer config repo.packagist composer https://packagist.laravel-china.org
</span></code></pre></td></tr></table></div></figure>


<p>Problem resolved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM使用]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/16/rvmshi-yong/"/>
    <updated>2018-10-16T16:07:18+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/16/rvmshi-yong</id>
    <content type="html"><![CDATA[<p>之前因为 Ruby 版本的问题，博客一直用不了。前段时间使用了 RVM 来管理 Ruby 的版本，所以博客又复活了。</p>

<p>所以今天就来总结一下如何用 RVM 来管理不同的 Ruby 版本。</p>

<!-- more -->


<h2>RVM 的安装</h2>

<p>先安装 RVM</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
</span><span class='line'>
</span><span class='line'><span class="se">\c</span>url -sSL https://get.rvm.io | bash -s stable
</span></code></pre></td></tr></table></div></figure>


<h2>Ruby 的安装和切换</h2>

<p>列出已知的 Ruby 版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm list known
</span></code></pre></td></tr></table></div></figure>


<p>安装一个 Ruby 版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm install 2.2.0
</span></code></pre></td></tr></table></div></figure>


<p>切换 Ruby 版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 2.2.0
</span></code></pre></td></tr></table></div></figure>


<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 2.2.0 --default
</span></code></pre></td></tr></table></div></figure>


<p>查询已经安装的ruby</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm list
</span></code></pre></td></tr></table></div></figure>


<p>卸载一个已安装版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm remove 1.8.7
</span></code></pre></td></tr></table></div></figure>


<h2>gemset 的使用</h2>

<p>RVM 不仅可以提供一个多 Ruby 版本共存的环境，还可以根据项目管理不同的 gemset。gemset 可以理解为是一个独立的虚拟 gem 环境，每一个 gemset 都是相互独立的。</p>

<p>比如你有两个项目，一个是 Rails 2.3 一个是 Rails3。gemset 可以帮你便捷的建立两套 gem 开发环境，并且方便的切换。gemset 是附加在 Ruby 语言版本下面的，例如你用了 1.9.2, 建立了一个叫 rails3 的 gemset,当切换到 1.8.7 的时候，rails3 这个 gemset 并不存在。</p>

<p>建立 gemset</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 1.8.7
</span><span class='line'>rvm gemset create rails23
</span></code></pre></td></tr></table></div></figure>


<p>然后可以设定已建立的 gemset 做为当前环境。use 可以用来切换语言或者 gemset，前提是他们已经被安装(或者建立)，并可以在 list 命令中看到。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 1.8.7
</span><span class='line'>rvm use 1.8.7@rails23
</span></code></pre></td></tr></table></div></figure>


<p>然后所有安装的 gem 都是安装在这个 gemset 之下。</p>

<p>列出当前 Ruby 的 gemset</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm gemset list
</span></code></pre></td></tr></table></div></figure>


<p>如果你想清空一个 gemset 的所有 gem， 想重新安装所有 gem，可以这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm gemset empty 1.8.7@rails23
</span></code></pre></td></tr></table></div></figure>


<p>删除一个 gemset</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm gemset delete rails2-3
</span></code></pre></td></tr></table></div></figure>


<p>RVM 还可以自动加载 gemset。 例如我们有一个 Rails 3.1.3 项目，需要 1.9.3 版本 Ruby，整个流程可以这样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm gemset create rails313
</span><span class='line'>rvm use 1.9.3@rails313
</span></code></pre></td></tr></table></div></figure>


<p>下面进入到项目目录，建立一个 .rvmrc 文件。在这个文件里可以很简单的加一个命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 1.9.3@rails313
</span></code></pre></td></tr></table></div></figure>


<p>然后无论你当前 Ruby 设置是什么，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.</p>

<h2>使用 .ruby-gemset 和 .ruby-version</h2>

<p>在项目目录下创建这两个文件 <code>.ruby-gemset</code> 和 <code>.ruby-version</code>，在 <code>.ruby-gemset</code> 中填入 gemset 的名称，在 <code>.ruby-version</code> 填入 Ruby 版本的名称，当 cd 到这个目录的时候，就会自动加载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改了一下zsh主题]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/12/xiu-gai-liao-%5B%3F%5D-xia-zshzhu-ti/"/>
    <updated>2018-10-12T15:41:19+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/12/xiu-gai-liao-[?]-xia-zshzhu-ti</id>
    <content type="html"><![CDATA[<p>把原来的 zsh 主题做了一下修改。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Color shortcuts</span>
</span><span class='line'><span class="nv">RED</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>red<span class="o">]</span>
</span><span class='line'><span class="nv">YELLOW</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>yellow<span class="o">]</span>
</span><span class='line'><span class="nv">GREEN</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>green<span class="o">]</span>
</span><span class='line'><span class="nv">WHITE</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>white<span class="o">]</span>
</span><span class='line'><span class="nv">BLUE</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>blue<span class="o">]</span>
</span><span class='line'><span class="nv">RED_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>red<span class="o">]</span>
</span><span class='line'><span class="nv">YELLOW_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>yellow<span class="o">]</span>
</span><span class='line'><span class="nv">GREEN_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>green<span class="o">]</span>
</span><span class='line'><span class="nv">WHITE_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>white<span class="o">]</span>
</span><span class='line'><span class="nv">BLUE_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>blue<span class="o">]</span>
</span><span class='line'><span class="nv">RESET_COLOR</span><span class="o">=</span><span class="nv">$reset_color</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for git_prompt_info()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_PREFIX</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_SUFFIX</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for parse_git_dirty()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_DIRTY</span><span class="o">=</span><span class="s2">&quot; %{$RED%}(*)&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_CLEAN</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for git_prompt_status()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_UNMERGED</span><span class="o">=</span><span class="s2">&quot; %{$RED%}unmerged&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_DELETED</span><span class="o">=</span><span class="s2">&quot; %{$RED%}deleted&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_RENAMED</span><span class="o">=</span><span class="s2">&quot; %{$YELLOW%}renamed&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_MODIFIED</span><span class="o">=</span><span class="s2">&quot; %{$YELLOW%}modified&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_ADDED</span><span class="o">=</span><span class="s2">&quot; %{$GREEN%}added&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_UNTRACKED</span><span class="o">=</span><span class="s2">&quot; %{$WHITE%}untracked&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for git_prompt_ahead()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_AHEAD</span><span class="o">=</span><span class="s2">&quot; %{$RED%}(!)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for git_prompt_long_sha() and git_prompt_short_sha()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_SHA_BEFORE</span><span class="o">=</span><span class="s2">&quot; %{$WHITE%}[%{$YELLOW%}&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_SHA_AFTER</span><span class="o">=</span><span class="s2">&quot;%{$WHITE%}]&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Prompt format</span>
</span><span class='line'><span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;%{$BLUE_BOLD%}%D{[%H:%M]}%{$RESET_COLOR%} %{$GREEN_BOLD%}%n%{$RESET_COLOR%}@%{$RED_BOLD%}%m%{$RESET_COLOR%}:%{$YELLOW_BOLD%}%~%u$(parse_git_dirty)$(git_prompt_ahead)%{$RESET_COLOR%}</span>
</span><span class='line'><span class="s1">%{$GREEN_BOLD%}-&gt;%{$RESET_COLOR%}&#39;</span>
</span><span class='line'><span class="nv">RPROMPT</span><span class="o">=</span><span class="s1">&#39;%{$GREEN_BOLD%}$(current_branch)$(git_prompt_short_sha)$(git_prompt_status)%{$RESET_COLOR%}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意不要留最后一行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入手了一个新玩具]]></title>
    <link href="http://caiknife.github.io/blog/2018/09/30/ru-shou-liao-yi-ge-xin-wan-ju/"/>
    <updated>2018-09-30T17:08:57+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/09/30/ru-shou-liao-yi-ge-xin-wan-ju</id>
    <content type="html"><![CDATA[<p>今天是2018年9月30日，按照常理，我们应该都会听一首歌。</p>

<p><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=c0668elhqi3&auto=0" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<!-- more -->


<p>同时在今天，我也给自己准备了一件礼物。</p>

<p><a href="http://caiknife.github.io/downloads/image/clarinet/1.jpeg" title="Buffet Crampon Prodige Clarinet " class="fancybox"><img src="http://caiknife.github.io/downloads/image/clarinet/1.jpeg" alt="Buffet Crampon Prodige Clarinet " /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/clarinet/2.jpeg" title="Buffet Crampon Prodige Clarinet " class="fancybox"><img src="http://caiknife.github.io/downloads/image/clarinet/2.jpeg" alt="Buffet Crampon Prodige Clarinet " /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/clarinet/3.jpeg" title="Buffet Crampon Prodige Clarinet " class="fancybox"><img src="http://caiknife.github.io/downloads/image/clarinet/3.jpeg" alt="Buffet Crampon Prodige Clarinet " /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/clarinet/4.jpeg" title="Buffet Crampon Prodige Clarinet " class="fancybox"><img src="http://caiknife.github.io/downloads/image/clarinet/4.jpeg" alt="Buffet Crampon Prodige Clarinet " /></a></p>

<p><strong>Buffet Crampon Prodige Clarinet</strong></p>

<p>在知乎的这篇回答里<a href="https://www.zhihu.com/question/39718466/answer/83423060">https://www.zhihu.com/question/39718466/answer/83423060</a>我提到了我中学时代在学校的铜管乐团里的经历，那个时候我吹的是Tenor Saxphone。</p>

<p>现在我已经30多岁了，出于对中学时代的这段经历的怀念，今天我给自己送了这件礼物，也算是今年生日的补偿——今年的生日我被需求方折腾到凌晨1点多才下班，呵呵呵。</p>

<p>年龄摆在这里，我从小练习萨克斯的基础也并没有打好，所以肯定还是要找老师学习的。学习单簧管只是想让自己开心开心，吹古典曲子我就不指望了，只希望能打好基础，积累足够的语汇，好好练习一下即兴技巧，也许过几年可以在爵士乐队中JAM一下。</p>

<p>希望将来有一天真的可以办到。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[邓宁-克鲁格效应]]></title>
    <link href="http://caiknife.github.io/blog/2018/09/14/deng-zhu-ke-lu-ge-xiao-ying/"/>
    <updated>2018-09-14T12:32:27+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/09/14/deng-zhu-ke-lu-ge-xiao-ying</id>
    <content type="html"><![CDATA[<p><a href="http://caiknife.github.io/downloads/image/dk/1.jpg" title="Dunning–Kruger effect " class="fancybox"><img src="http://caiknife.github.io/downloads/image/dk/1.jpg" alt="Dunning–Kruger effect " /></a></p>

<p>达克效应（英语：D-K effect），全称为邓宁-克鲁格效应（英语：Dunning–Kruger effect），是一种认知偏差，能力欠缺的人有一种虚幻的自我优越感，错误地认为自己比真实情况更加优秀。Kruger和Dunning将其归咎于元认知上的缺陷，能力欠缺的人无法认识到自身的无能，不能准确评估自身的能力。他们的研究还表明，反之，非常能干的人会低估自己的能力，错误地假定他们自己能够很容易完成的任务，别人也能够很容易地完成。</p>

<!-- more -->


<p>康奈尔大学的David Dunning和Justin Kruger于1999年首次在实验中观测到此认识偏差。Kruger和Dunning通过对人们阅读、驾驶、下棋或打网球等各种技能的研究发现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>能力差的人通常会高估自己的技能水准；
</span><span class='line'>能力差的人不能正确认识到其他真正有此技能的人的水准；
</span><span class='line'>能力差的人无法认知且正视自身的不足，及其不足之极端程度；
</span><span class='line'>如果能力差的人能够经过恰当训练大幅度提高能力水准，他们最终会认知到且能承认他们之前的无能程度。</span></code></pre></td></tr></table></div></figure>


<p>Dunning和Kruger认为这种效应是由于能力欠缺者的内在错觉和能干者对外界的错误认知：“无能者的错误标度源自于对自我的错误认知，而极有才能者的错误标度源自于对他人的错误认知。”</p>

<p>虽然达克效应早在1999年就被Dunningt和Kruger两人提出来了，但他们把孔子（“知之为知之，不知为不知，是知也”）、查尔斯·达尔文（“无知比知识更容易招致自信”）和伯特兰·罗素（“我们这个时代让人困扰的事之一是: 那些对事确信无疑的人其实很蠢，而那些富有想象力和理解力的人却总是怀疑和优柔寡断”）也列为发现这个现象的人。</p>

<p>Geraint Fuller评论Dunningt和Kruger的论文时，称莎士比亚在《皆大欢喜》中也说过类似的话（“愚蠢的人总认为自己很聪明，而智者却知道自己的无知”）。</p>

<p>今天写这个话题的最早的起因是来自于一个视频：日本女歌手现场唱功排行（个人向）<a href="https://www.bilibili.com/video/av944472">https://www.bilibili.com/video/av944472</a></p>

<p>如果各位打开弹幕观看这个视频的话，基本都会注意到，视频开始的时候都会有提醒，比如：“我的脸都被UP打肿”了之类。我在第一次看这个视频的时候，当看到一些我觉得还不错的女歌手，这位UP给的评价都挺低的时候，我觉得很惊讶，而弹幕中这些女歌手的粉丝会发类似“我不服”的言论（我是从来不发弹幕的……），但是越看到后面，我是越来越佩服这位UP的的点评了。除了有偶尔几位女歌手可能是因为某些光环加成，让这位UP的评价稍微高了一些，对于其他的女歌手的评价真的可以说是非常客观公正了（虽然他写的是个人向）。</p>

<p>粉圈，在我看来就是一个DK效应前期非常明显的圈子。以上面的日本女歌手现场唱功排行为例，可能部分粉丝听了自家偶像的歌，自认为懂一些音乐，但是真正的音乐素养还远远不够，甚至还没有形成对唱功的正确认识，错误地认为“旋律好听、名气大、销量好”等等因素就等同于唱功，就在弹幕和评论中对UP开杠，这一点就完全是DK效应中还在爬愚昧之山的表现。</p>

<p>另外的例子就是目前社会上盛行的各种“读书无用论”及反智主义。</p>

<p><a href="http://caiknife.github.io/downloads/image/dk/2.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/dk/2.jpg" alt="" /></a></p>

<p>DK效应中期，就是那个从愚昧之山到绝望之谷下滑的阶段，我想各位读者都有过体验——回想一下学生时代各位讨论考试的时候，非学霸听到学霸说得最多的一句话是不是“哎呀这次考试又砸了”，结果考试成绩一出来，各门成绩都是优秀，真是气skr人啊……</p>

<p>考完连声说补考，成绩出来他最好</p>

<p>到了DK效应的后期，就达到了独孤求败最终“不滞于物，草木竹石均可为剑。自此精修，渐进于无剑胜有剑之境”，而最终也将成为扫地僧一样平日低调出手惊人的大人物。</p>

<p>我们所有人都会在某个方面觉得自己的水平和专家一样好，因为我们每个人都有不擅长的领域。不过当你对某个领域有了一定认识以后，你反而会开始能够认识到自己和高手之间的差距，这就是为什么那些水平中等的人常常不自信的原因——他们开始知道自己不知道的东西。</p>

<p>那么，那些高手会怎么看待自己呢？高手知道自己知道，但是他们却会犯另一种错误——认为许多人和自己一样厉害，自己并没有什么特别的。</p>

<p>所以，不管是学霸还是学渣，都很难对自己有清晰的判断。学渣常常毫无自知之明，学霸则觉得大家都和自己一样厉害，而中游选手对自己也很没自信，所以会出现文章开头的那种情况。</p>

<p>那么，怎么才能正确地评价自己的真实水平呢？首先，忠言逆耳，多听别人的评价。若批评不自由，则赞美无意义。其次，多学习，你知道的越多，就越不容易掉入自我膨胀的陷阱。</p>

<p>这两点，能坚持做到实在是太难了。我只希望将来能时刻提醒自己牢牢记住这两点，审视自身的问题，不要犯下井底之蛙的错误。</p>

<p>按照惯例，每期的文章都会有推荐的歌曲。本期的推荐歌曲就是《My Back Pages》。</p>

<p><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=x01784z0bba&auto=0" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>这首歌我认为是对达克效应的最直接反思，适合在深夜里关着灯欣赏，并且思考一下过去的人生。</p>

<p>况且这首歌里还是由Roger McGuinn、Tom Petty、Neil Young、Eric Clapton、Bob Dylan、George Harrison联袂演出。</p>

<p>以前听过我打拍子讲座的同学，请在听的时候一起打拍子 这首歌的鼓点贼清晰，二四拍的军鼓鼓点非常明显。</p>

<p>和这个邓宁-克鲁格效应类似的，还有一个乌比冈湖效应。</p>

<p><a href="http://caiknife.github.io/downloads/image/dk/3.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/dk/3.jpg" alt="" /></a></p>

<p>乌比冈湖效应（Lake Wobegon Effect），也称沃博艮湖效应，意思是高估自己的实际水平。社会心理学借用这一词，指人的一种总觉得什么都高出平均水平的心理倾向，即给自己的许多方面打分高过实际水平。用另一种通俗的说法，就是自我拉抬偏差（self-enhancing bias）。</p>

<p><a href="http://caiknife.github.io/downloads/image/dk/4.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/dk/4.jpg" alt="" /></a></p>

<p>我今天写这么一篇文章，就在我自己身上体现了乌比冈湖效应，因为我会觉得我写的东西能让各位读者认识到这两种效应的存在并反省自身，但是直到文章的最后，我才发现——不，基本上我写的东西就是SHIT，甚至我写的东西都不会有人打开来看，推送出去还会掉关注。</p>

<p>人生真的是好艰难啊</p>

<p>我是永远没人爱的蔡老湿，下一期我们不知道什么时候再见……</p>

<p><a href="http://caiknife.github.io/downloads/image/dk/5.gif" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/dk/5.gif" alt="" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP知识体系]]></title>
    <link href="http://caiknife.github.io/blog/2018/09/13/phpzhi-shi-ti-xi/"/>
    <updated>2018-09-13T10:06:52+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/09/13/phpzhi-shi-ti-xi</id>
    <content type="html"><![CDATA[<p>最近花了几天时间写了一个有关PHP的思维导图。</p>

<!-- more -->


<p>虽然已经工作了很多年了，但是之前一直很少静下来给自己做一次深刻的总结。</p>

<p>这一次，就当写了一次给自己的My Back Pages。</p>

<p><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=x01784z0bba&auto=0" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<p>思维导图源文件下载点击这里：<a href="http://caiknife.github.io/downloads/image/php/php.xmind">PHP知识体系</a></p>

<p>原图在下面：</p>

<p><a href="http://caiknife.github.io/downloads/image/php/php.png" title="PHP知识体系 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/php/php.png" alt="PHP知识体系 " /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大陆音乐真人秀十三年]]></title>
    <link href="http://caiknife.github.io/blog/2018/07/27/da-lu-yin-le-zhen-ren-xiu-shi-san-nian/"/>
    <updated>2018-07-27T16:16:06+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/07/27/da-lu-yin-le-zhen-ren-xiu-shi-san-nian</id>
    <content type="html"><![CDATA[<p>第六季的《我是歌手》——也就是所谓的第二季《歌手》落下了帷幕。活跃于台前的乐评家们纷纷退居幕后，征战于四方的乐迷们回归圈地自萌，热议于茶余饭后的普通观众又恢复了无关音乐的往日话题，年度的盛会不过是一次赶场，一时的喧嚣最终又回归于沉寂。</p>

<p>回望历年大陆音乐真人秀，宛如十几年大陆乐坛风云变幻的缩影：“超女快男”兴衰十余载，从全民狂欢沦为小众网综；《中国好声音》与《我是歌手》写手走过六季，余温尚存却尽显疲态；《中国好歌曲》曾经带着华语乐坛的希望走来，如今却杳无音信；《中国有嘻哈》，Born to Die……</p>

<p>世间所有的一切，或许自有其规律。</p>

<!-- more -->


<h2>起·素人狂欢</h2>

<p>七十年代最后的岁月，祖国大地响起了春天的故事，大陆流行音乐这才姗姗来迟。由于起步太晚，人口基数大，音乐教育普及率低，消费观念局限，大陆流行音乐瘸着腿就上了路，赶鸭子上架使得它来不及形成以唱片工业为核心的完整音乐产业。音乐的主流传播途径不是唱片，而是电视，造就了大批一首金曲就昙花一现的乐坛流星和只能活在电视剧OST里的中流砥柱。</p>

<p>世纪之交，大陆开始逐步迈进互联网时代，时代的浪潮推动着百舸争流，在盗版资源和网络神曲的夹击下，劣币驱逐良币，尚在蹒跚学步的大陆音乐产业举步维艰。但是无论如何，载舟的永远是水，纵使没有唱片消费习惯，没有打歌欣赏平台，但人们对流行音乐的渴求总是与日俱增。</p>

<p>于是，时代的浪潮最终交汇出了大陆音乐真人秀的起点。</p>

<p>2004年，《超级女声》横空出世；2005年，《超级女声》登峰造极；这是大陆音乐真人秀的第一个时代——素人时代。</p>

<p>事物发展总是混沌与规律的调和，身临历史，人们只能随波逐流地感受到它的惊涛骇浪；回望历史，却总会发现它不过是一条蜿蜒有序的河流。</p>

<p>身临其混沌，素人时代是电视台在各种试水之后终于大获成功的一桩商业营销，它的结果也不过是粉丝狂热刷票的结果。但回望其规律，它的成功却并非偶然：常年积压流行音乐需求的人民群众，通过电视这一当时大陆最广泛的传播平台，在互联网东风的煽风点火下，以“全民普选”的方式，完成了一次必然的欲望释放。</p>

<p>而它那看似狂热的结果，更是宛如宿命般的寓言。</p>

<p>如果说04年只是懵懂少女们的一次天真试水，那么05年三强的出道更像是大陆流行音乐发展三种方向的隐喻：</p>

<p>第一种方向，向往着世界流行音乐的祖师——欧美流行音乐，希望通过更先进的唱法和音乐类型与国际接轨，追寻着大陆流行音乐奔跑的尽头。但因为有着高昂的技术成本和群众欣赏基础需求，面临着邯郸学步和水土不服的风险。</p>

<p>第二种方向，向往着大陆流行音乐的兄长——港台流行音乐，是融合了汉语语境的欧美日韩流行文化破解版。希望通过成熟的模式和接地气的演绎迎来一句“走心”，指引着大陆流行音乐临摹的方向。它虽然有着更低的门槛和更广泛的基础。但学习一个学生终究会画地为牢，在达到一定瓶颈后总需要做出跨过兄长奔祖师的努力。</p>

<p>第三种方向，是大陆流行音乐自身，无本可仿，无迹可寻，是今人当局者迷后人旁观者清的探索。它会探索出多种道路：或曰汉语诗，或曰中国风，或曰实验化，而最容易通罗马的道路，是崇拜。那是狂热人群在无意识下的有意识聚集，是无序集会形成的有序仪式，是超越Idol的Icon，是每一个平凡的我们在没有方向的道路上希望成为的那个自己。</p>

<p>而后的十几年，选秀明星千帆过尽流星闪耀，都无外乎是这三种道路的杂糅或是变体；并不是他们没有逃出这一规律，而是整个大陆乐坛始终遵循着这一规律。</p>

<p>历史总是陷入轮回。超女快男的成功迅速引领起一阵癫狂的风潮，一时间，从中央到地方，趋之若鹜的人群百花齐放，眼花缭乱的选秀百家争鸣。而后，群魔乱舞过快透支了市场，欠佳的全民音乐教育基础也被掏空了造血机能，失控的列车最终脱了轨，一而再、再而三、三而竭。</p>

<h2>承·精英盛宴</h2>

<p>在上下大环境的制约下，大陆音乐商业再度止步不前，但利益推动着资本，需求引领者人民，市场需要新的刺激将两条曲线撮合在一起。既然青苗来不及成熟，那就开仓黄粱接济市场的饥荒。2012年《中国好声音》异军突起，将一帮“老油条”包装成素人，无害的素形和成熟的技艺行程强烈反差，让广大听歌有限的普通观众意识到：“流行音乐原来还有四种唱法！”一时间，唱功成为人们谈及音乐时的第一话题。</p>

<p>这是大陆音乐真人秀的第二个时代——精英时代。</p>

<p>历史，仍然是混沌的浪潮在规律的河床中有序流淌。身临其混沌，它是市场在电视真人秀陷入低谷时操起98K的绝地求生；回望其规律，确实全民音乐教育久旱多年必然迎来的一场技术甘霖。人们在目所能及的荒漠中行走久了，总是因缘际会地看到原来在主流的芭乐世界之外，还有个更为辽阔的世界，洋溢着现场的激情和广泛的类型，那是荒漠尽头茂密繁盛的森林草原。</p>

<p>随后，历史再次开始了似曾相似的轮回。好声音的成功重燃起音乐真人秀的战火，新一轮的群魔乱舞又一次透支了羸弱的大陆音乐产业。一方面，造血效率远低于素人的民间高手急速消耗；而更深的一方面则是它们自己。</p>

<p>他们中的大多数，坐拥华丽的现场机能，却无法在录音室的打磨下生产出一张具有艺术和商业价值的唱片；更功利地说，有些人在比赛中风光无限，却维持不了更漫长的商业运作。民间艺人之所以是民间艺人，不仅仅因为他们怀才不遇，同时也因为他们早就成为了商业的弃子。</p>

<p>当然，也有没被驻场酒吧熏陶得过分油腻而心怀赤诚的少数派，能通过技术和态度的平衡脱颖而出，可这些被资本和电视台自娱自乐式选出的“音乐精英”，面对被狂热粉丝抬上去的“民选偶像”，或许能竞争下音乐价值，却总是拼不过“商业价值”。</p>

<p>于是，在精英时代再次衰落之际，山穷水尽的市场直接将真正的一二线歌手拉进战局，将战场提升至更高的维度，我们可以称之为精英时代2.0——巨星时代。这个时代让人们见识到荒漠的尽头原来不仅仅是森林草原，竟然还有山川湖泊，峡谷江河。一时间，广大从不买巨星们正版专辑的普通观众再次成为了他们的忠实粉丝，真情可贵，情怀无价。</p>

<p>然而高山峡谷终究逃不出历史轮回。消耗着一二线歌手来杂技式竞技，任何一个音乐市场都很难长期维持这种顶级而畸形的军备竞赛。对于大陆音乐发展而言，这样的竞技虽然对提升民众品位有一定积极意义，但对于大陆音乐真人秀而言，这无异于是弹尽粮绝时的饮鸩止渴。</p>

<p>精英时代，重蹈覆辙地，一而再、再而三、三而竭。</p>

<h2>转·另辟蹊径</h2>

<p>拼素人、拼精英、拼巨星，大陆音乐真人秀在拼人的道路上似乎走到了尽头。浪潮在混沌中探索，规律最终指向了另一片蓝海——拼内容。从2015年开始，市场陆续涌现出《中国好歌曲》、《蒙面歌王》、《梦想的声音》、《天籁之战》、《金曲捞》等一系列节目，大陆音乐真人秀进入了第三个时代——内容时代。</p>

<p>内容时代的节目虽然琳琅满目，但是混沌的时长仍然被时代的规律牢牢牵引，它们中的一部分主攻表层——节目内容：《蒙面歌王》、《梦想的声音》、《天籁之战》、《金曲捞》等节目以不同的主题开展各种相对新颖的竞技形式，使有限的一二线歌手资源依然能挽留观众的新鲜度。它们在形式上都是以内容为核心，本质上却都是巨星时代的变体。</p>

<p>另一些异类则主攻深层内容，即大陆音乐产业积贫积弱的根源——音乐作品。它们就是《Hi歌》和《中国好歌曲》。前者提供了一个一二线歌手为原创作者打歌的平台，后者更是抛弃了最容易吸引粉丝狂热的明星偶像，直接将一帮个人外貌和声音形态都“奇形怪状”的幕后作者拉上台前；摒弃了因为观众耳熟能像所以保险稳妥的热门经典，而是押注一票风格迥异甚至剑走偏锋的原创音乐。</p>

<p>豪赌最终取得了一定的成功，迅速传播开了《卷珠帘》、《老子明天不上班》、《喝酒Blues》、《画》、《当你老了》、《要死一定要死在你手里》、《悟空》、《阿楚姑娘》、《野子》等等等等一众兼具小众风格、音乐价值、流行传播的作品。这个小众节目对大陆音乐发展的贡献甚至更大于一众真人秀老牌豪强。</p>

<p>这是大陆音乐真人秀最具有拯救华语乐坛精神的一次尝试，将日韩音乐工业常见传播途径——打歌节目，与大陆老百姓喜闻乐见电视音乐竞技节目相结合；将大陆音乐产业羸弱的根源——好作者与好作品的利益兑现问题，与好声音式的电视营销相结合，富有“乐坛杂交水稻”一般的伟大创意。</p>

<p>然而，《中国好歌曲》仍然没有逃过历史的轮回：在经历第一季兴起、第二季鼎盛、第三季衰落之后，最后还是无疾而终。纵使上面把它吹得天花乱坠，但它的成功仍然是小范围的。有限的商业回报，过快的资源枯竭是它衰落的表因。但或许，通过一次畸形的杂交去拯救整个不成熟的时长，本身就是一种“堂吉诃德”。</p>

<p>它的诞生是因为大陆没有唱片工业，而它的消亡也是因为大陆没有唱片工业。</p>

<p>最后就是2017年爆红的《中国有嘻哈》，它既可以归入让一帮地下Rapper重见天日的精英时代，也可以归入让Hip Hop重返人间的内容时代。</p>

<p>但它的历史轮回却是最短暂的，叫嚣着Hip Hop狂妄的意识形态，生而死亡。</p>

<h2>合·今昔未来</h2>

<p>论十四年大陆音乐真人秀是否成功，答案是肯定的。因为当今大陆一二线年轻歌手中超过半数都是真人秀节目出身。但这种比例与成熟的欧美日韩音乐市场相比却是不可理喻的，这恰恰反映了大陆音乐产业自身的困境。</p>

<p>理想的音乐产业链，或许应该有着如下的因果：</p>

<blockquote><p>人们对美好的音乐有着与生俱来的需求，这一需求推动着整个社会自发地开展全民音乐教育，孕育出好的音乐人和好的听众；
唱片公司是一个平台，它发掘兼具音乐性和商业性的音乐人，他们以歌抒志，在优秀制作团队的打磨下，以唱片为载体布道作品；
听众为作品（唱片）买单，形成唱片市场；
发展的音乐环境进一步促进全民音乐素质的提升，生产端和消费端整合，商业与技术整合，螺旋上升，形成良性的音乐文化产业。</p></blockquote>

<p>其核心是作品。</p>

<p>但是，因为缺乏为作品保价护航的版权体系和版税制度，大陆音乐市场从核心上就断了链。反正造成了“作品无法盈利->创作水平停滞->市场故步自封”的恶性循环。由于唱片产业萎靡不振，资本不得不依靠音乐真人秀和其衍生产业来刺激市场。可文化产业的缺陷又导致造血能力和文化基础孱弱，反而成为了音乐真人秀的紧箍咒，将它永远困在历史的轮回中。</p>

<p>看似耀眼的真人秀产业最大的掣肘，在于其核心不是作品，是人设，是各种贴上的偶像、唱将、天籁标签而明码标价的人设。它的利益源泉不是音乐作品本身，而是人设带来的巨大流量。于是，唯有流量金字塔顶端的艺人才能依靠资本的青睐得以能够生存，音乐的衍生产业成为生存的基础，而做音乐本身却只是赔本卖吆喝。至于缺乏足够套现价值的塔下的艺人，只能抱着无人问津的作品成为过眼云烟。</p>

<p>真人秀当不了大陆音乐文化产业的救命稻草，只能成为通过刺激观众感官而为市场续命精神鸦片；而既然它拯救不了产业，就只能被产业的缺陷所吞噬，最终坠入不可逃脱的命运轮回。</p>

<p>在明确这一历史轨迹之后，大陆音乐真人秀的死局似乎就找到了症结。它的复兴必须以整个大陆音乐市场的复兴为基础：</p>

<p>需要我们携手提升全民音乐素养，充分认识世界流行音乐发展的历史，追溯源头，看清现在，探寻未来；需要我们携手参与全民音乐教育建设，培养正确的音乐价值观，认识正确的乐理知识，或参与或推广与国际接轨的现代音乐人才积累；需要我们一起为音乐版权体系添砖加瓦，巩固音乐产业真正的核心，推动音乐产业成链，实现商业与艺术的共同进步，最终把商业产业发展为文化产业。</p>

<p>如此建立起良性成体系的音乐文化产业，才能支撑起真正长青的节目。但真到了那一天，或许我们已经不再需要这些真人秀为乐坛打鸡血了，因为那样的乐坛，本身就充满了无限的活力。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知乎回答【谢霆锋的吉他弹得怎么样？】]]></title>
    <link href="http://caiknife.github.io/blog/2018/07/27/zhi-de-ji-ta-dan-de-zen-yao-yang-%3F/"/>
    <updated>2018-07-27T12:45:14+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/07/27/zhi-de-ji-ta-dan-de-zen-yao-yang-?</id>
    <content type="html"><![CDATA[<p>在知乎上回答了一个问题——谢霆锋的吉他弹得怎么样？<a href="https://www.zhihu.com/question/21680893/answer/449417217">https://www.zhihu.com/question/21680893/answer/449417217</a></p>

<p>短短几天，收获了不少的评论和赞。</p>

<!-- more -->


<p>但是知乎里的杠精还是挺多的，我一直在不遗余力地分析谢霆锋技术上的不足和缺点，但是一直有人针对我的部分字眼来杠。</p>

<p>我的脾气已经算是很好了，不拉黑不喷人，心平气和地讨论，但是似乎没有人看我的分析，就是上来直接杠。</p>

<p>累了，真的累了。</p>

<p>我一直致力于普及音乐常识，提高身边人群的音乐审美，这一次在知乎上回答问题，又一次让我意识到社会大众音乐素养的不足和审美的缺失。</p>

<p>很多人真的是连“若批评无自由，则赞美无意义”的道理都不懂，只会为了杠而杠。</p>

<p>看来还是要扩大自己的影响力，确立自身的权威，这样才不会有那么多的人来瞎抬杠，也能进一步正面影响到更多的人。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这个博客复活了]]></title>
    <link href="http://caiknife.github.io/blog/2018/06/24/zhe-ge-bo-ke-fu-huo-liao/"/>
    <updated>2018-06-24T03:53:03+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/06/24/zhe-ge-bo-ke-fu-huo-liao</id>
    <content type="html"><![CDATA[<p>这个博客复活了。</p>

<!-- more -->


<p>前几年由于更换了电脑，从 Linux 平台迁移到了 Mac 平台，Ruby 的版本发生了变化，而这个博客是基于 Jekyll 的 Octopress，依赖于 Ruby 的老版本，所以那个时候这个博客就一直没办法更新了，一直凉了很久。</p>

<p>今晚突然心血来潮，在 Mac 上安装了 rvm 来管理 Ruby 的版本，重新安装了 Ruby 1.9.3，这样这个博客总算是复活能用了，挺不容易的。</p>

<p>以后又有可以写东西的地方了，不在乎有没有人看，反正我自己能坚持写就行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入职腾讯一个月了]]></title>
    <link href="http://caiknife.github.io/blog/2014/04/23/working-in-tencent/"/>
    <updated>2014-04-23T17:24:11+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/04/23/working-in-tencent</id>
    <content type="html"><![CDATA[<p>3月24日，我正式加入腾讯。掐指一算，今天正好是一个月了。一个月以来，工作还是比较轻松的，部门内的工作气氛不错，同事们也都挺有意思的。</p>

<!-- more -->


<p>这边的工作气氛还是挺自由的。我的作息之间和之前在 VCB 差不多，早上坐班车过来一般 9 点半到公司，晚上下班没有别的事情的话 6 点半就下班了；不过我其他的同事们一般都会在公司里解决晚餐，加一会儿班之后再回家。</p>

<p>工作流程上比较严格，制度规范也很多。有专门的开发网，只能访问腾讯旗下的网站。所以这边的人一般都有两台电脑，一台连接开发网，另外一台连接体验网。我的体验机都已经等了一个月了，还是没下来，唉，我等得花儿都谢了。</p>

<p>版本管理用的是 SVN ，比之前在 VCB 用 CVS 真的是方便很多。开发方式是将远程 Linux 服务器的家目录映射为本地 Windows 的网络驱动盘，也就是 Samba ，当然这种方式比之前在 VCB 把修改过的文件一个个用 SFTP 上传到服务器上好。</p>

<p>发布项目的时候，方式又非常不同了。测试服务器完全是和外界隔离的，要上传文件的话，只能通过 Web 界面上传，异常蛋疼……好吧，看看将来有什么解决方案。</p>

<p>在新的环境里，得比以往更加努力工作。</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[爱生活爱音乐]]></title>
    <link href="http://caiknife.github.io/blog/2014/03/23/love-music/"/>
    <updated>2014-03-23T17:20:36+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/03/23/love-music</id>
    <content type="html"><![CDATA[<p>这周五办完了离职手续，于是这周末就可以完全无忧无虑地玩音乐啦~~~</p>

<!-- more -->


<p>周六下午在延安西路碰到了 <a href="http://weibo.com/p/1005051599598742">@JAMMALA</a> 鼓聚活动，于是就和他们度过了一个开心地下午。</p>

<p><a href="http://caiknife.github.io/downloads/image/jammala/1.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/jammala/1.jpg" alt="" /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/jammala/2.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/jammala/2.jpg" alt="" /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/jammala/3.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/jammala/3.jpg" alt="" /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/jammala/4.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/jammala/4.jpg" alt="" /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/jammala/5.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/jammala/5.jpg" alt="" /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/jammala/6.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/jammala/6.jpg" alt="" /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/jammala/7.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/jammala/7.jpg" alt="" /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/jammala/8.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/jammala/8.jpg" alt="" /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/jammala/9.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/jammala/9.jpg" alt="" /></a></p>

<p>和大家在一起玩音乐，才是最开心的！</p>

<p>人不是孤立的个体，是社会性动物，所以一定要聚集才一起，分享快乐，享受这美好的生活！</p>

<p>不要宅在家里！Enjoy MUSIC！</p>

<p>Have a nice day！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再见，惠击；再见，满星！]]></title>
    <link href="http://caiknife.github.io/blog/2014/03/21/byebye-vcb-byebye-mezi/"/>
    <updated>2014-03-21T22:47:45+08:00</updated>
    <id>http://caiknife.github.io/blog/2014/03/21/byebye-vcb-byebye-mezi</id>
    <content type="html"><![CDATA[<p>Bye bye，ValueClick Brands！</p>

<p>Bye bye，Mezi Media！</p>

<!-- more -->


<p><a href="http://caiknife.github.io/downloads/image/byebye/1.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/byebye/1.jpg" alt="" /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/byebye/2.jpg" title="" class="fancybox"><img src="http://caiknife.github.io/downloads/image/byebye/2.jpg" alt="" /></a></p>

<p>I will never come back again！</p>

<p>Have a nice day and have a nice life！</p>
]]></content>
  </entry>
  
</feed>
