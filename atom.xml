<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[但行好事，莫问前程]]></title>
  <link href="http://caiknife.github.io/atom.xml" rel="self"/>
  <link href="http://caiknife.github.io/"/>
  <updated>2018-11-27T22:54:08+08:00</updated>
  <id>http://caiknife.github.io/</id>
  <author>
    <name><![CDATA[CaiKnife]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[有关缓存的一些思考]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/27/huan-cun-shuang-tao-tai/"/>
    <updated>2018-11-27T21:24:20+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/27/huan-cun-shuang-tao-tai</id>
    <content type="html"><![CDATA[<p>通常使用缓存的情况下，如果先删缓存，再更新数据库，有这样一个场景：</p>

<blockquote><p>单库情况下，服务层在进行长时间的逻辑计算，在这个过程中，可能读到旧数据入缓存。</p>

<p>主从库+读写分离情况下，在主从同步延时过程中，可能读到旧数据入缓存。</p></blockquote>

<!-- more -->


<p><strong><em>第一个问题产生的原因可能是同时有一个请求A进行更新操作，另一个请求B进行查询操作，那么可能会出现下面的情况：</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>请求A进行写操作，删除缓存
</span><span class='line'>请求B查询发现缓存不存在
</span><span class='line'>请求B去数据库查询得到旧值
</span><span class='line'>请求B将旧值写入缓存
</span><span class='line'>请求A将新值写入数据库</span></code></pre></td></tr></table></div></figure>


<p><strong><em>第二个问题产生的原因可能是，还是两个请求，一个请求A进行更新操作，另一个请求B进行查询操作，可能会出现下面的情况：</em></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>请求A进行写操作，删除缓存
</span><span class='line'>请求A将数据写入数据库了
</span><span class='line'>请求B查询缓存发现，缓存没有值
</span><span class='line'>请求B去从库查询，这时，还没有完成主从同步，因此查询到的是旧值
</span><span class='line'>请求B将旧值写入缓存
</span><span class='line'>数据库完成主从同步，从库变为新值</span></code></pre></td></tr></table></div></figure>


<p>上面的这两种情况，都可以使用在写操作更新数据库之后，休眠一小段时间之后第二次再删除缓存。休眠的时间根据系统评估下来的写入时间或者是主从数据库的延迟时间上再加上几百毫秒即可。这样在增加一次cache miss的前提下，只花费了很少的成本，就避免了脏数据的长时间存在，保障了数据一致性。</p>

<p>而如果你并不想因为这个休眠时间导致影响到用户体验的话，其实可以使用异步的方式，通过队列来进行第二次删除，在队列里进行这段时间的休眠，从而保证用户体验，加大系统的吞吐量。</p>

<p><strong><em>如果在第二次删除缓存时失败了怎么办？</em></strong></p>

<p>假设有一个请求A进行更新操作，另一个请求B进行查询操作，为了方便，假设是单库：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>请求A进行写操作，删除缓存
</span><span class='line'>请求B查询发现缓存不存在
</span><span class='line'>请求B去数据库查询得到旧值
</span><span class='line'>请求B将旧值写入缓存
</span><span class='line'>请求A将新值写入数据库
</span><span class='line'>请求A试图去删除请求B写入的缓存值，结果失败了</span></code></pre></td></tr></table></div></figure>


<p>即如果第二次删除缓存失败，会再次出现缓存和数据库不一致的问题。这种情况下，可以往队列中插入要删除的缓存key，在队列中处理删除缓存直到成功为止，如果可以接受的话，这未尝不是一种可行的解决方案。</p>

<p>暂时先想到这么多，如果有更好的解决方案，我会继续更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法题：三针重叠问题]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/27/san-zhen-zhong-die-wen-ti/"/>
    <updated>2018-11-27T19:23:06+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/27/san-zhen-zhong-die-wen-ti</id>
    <content type="html"><![CDATA[<p>经典问题——三针重叠问题。</p>

<blockquote><p>在时针走满一圈的情况下，也就是12小时内，时针、分针、秒针会重合多少次？</p></blockquote>

<p>分析一下：秒针60s走完一整圈，每秒的旋转角度是6度，分针速度是秒针的1/60，每s的旋转角度是1/10度，时针速度是分针的1/12，每s的旋转角度是1/120度。那么就需要计算出12个小时的时间内，也就是12*3600秒内，每秒钟三个指针的位置即可。如果度数相同，那么就认为三针重合。</p>

<!-- more -->


<p>更简单地来说，假设把时针的最小步长定位1，那么分针的步长就是12，而秒针的步长就是720。再针对各自一圈的步长取模，就可以得到每秒时每个位置的偏移量，如果三个偏移量相等的话，</p>

<p>编写程序如下：</p>

<figure class='code'><figcaption><span> (clock.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/clock.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/11/27</span>
</span><span class='line'><span class="sd"> * Time: 10:51</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Time</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="no">TOTAL_TIME</span> <span class="o">=</span> <span class="mi">12</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">60</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_hourNeedle</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_minuteNeedle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_secondNeedle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="nv">$_nextMinuteNeedle</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">date_default_timezone_set</span><span class="p">(</span><span class="s1">&#39;Asia/Shanghai&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$baseTime</span> <span class="o">=</span> <span class="nb">strtotime</span><span class="p">(</span><span class="s1">&#39;2018-01-01 00:00:00&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="k">static</span><span class="o">::</span><span class="na">TOTAL_TIME</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// 求时针的偏移量</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_hourNeedle</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">%</span> <span class="k">static</span><span class="o">::</span><span class="na">TOTAL_TIME</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 求分针的偏移量</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_minuteNeedle</span> <span class="o">=</span> <span class="p">(</span><span class="mi">12</span> <span class="o">*</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">%</span> <span class="k">static</span><span class="o">::</span><span class="na">TOTAL_TIME</span><span class="p">;</span>
</span><span class='line'>            <span class="c1">// 求秒针的偏移量</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondNeedle</span> <span class="o">=</span> <span class="p">(</span><span class="mi">720</span> <span class="o">*</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">%</span> <span class="k">static</span><span class="o">::</span><span class="na">TOTAL_TIME</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_hourNeedle</span> <span class="o">==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_minuteNeedle</span>
</span><span class='line'>                <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_minuteNeedle</span> <span class="o">==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_secondNeedle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">echo</span> <span class="nv">$i</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>                <span class="k">echo</span> <span class="nb">date</span><span class="p">(</span><span class="s2">&quot;H:i:s&quot;</span><span class="p">,</span> <span class="nv">$baseTime</span> <span class="o">+</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，在12个小时内，三针重合只有在0点和12点的时候才会出现。这个时候是真正的停止重合。</p>

<p>而在其他的条件下，时针和分针只会出现划过重合，不会出现停止重合。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PSR标准备忘]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/26/psrbiao-zhun-bei-wang/"/>
    <updated>2018-11-26T10:35:19+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/26/psrbiao-zhun-bei-wang</id>
    <content type="html"><![CDATA[<p>PSR 是 PHP Standard Recommendations 的简写，由 PHP FIG 组织制定的 PHP 规范，是 PHP 开发的实践标准。</p>

<p>项目的目的在于：通过框架作者或者框架的代表之间讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，避免各家自行发展的风格阻碍了 PHP 的发展，解决这个程序设计师由来已久的困扰。</p>

<!-- more -->


<p>目前的 PSR 中文翻译地址：<a href="https://laravel-china.org/docs/psr">https://laravel-china.org/docs/psr</a></p>

<p>基本的规范要求应该达到 PSR-4，随着项目工程的增长、人员的扩招，最终遵循的标准必须越来越高。</p>

<p>以下是从PSR-0到PSR-4的内容，需要详细了解。PSR-5已经废弃，PSR-6以上的有一定概念即可。</p>

<ul>
<li><p>PSR-0 自动加载规范（已弃用）- <a href="https://laravel-china.org/docs/psr/psr-0-automatic-loading-specification/1603">https://laravel-china.org/docs/psr/psr-0-automatic-loading-specification/1603</a></p></li>
<li><p>PSR-1 基础编码规范 &ndash; <a href="https://laravel-china.org/docs/psr/basic-coding-standard/1605">https://laravel-china.org/docs/psr/basic-coding-standard/1605</a></p></li>
<li><p>PSR-2 编码风格规范 &ndash; <a href="https://laravel-china.org/docs/psr/psr-2-coding-style-guide/1606">https://laravel-china.org/docs/psr/psr-2-coding-style-guide/1606</a></p></li>
<li><p>PSR-3 日志接口规范 &ndash; <a href="https://laravel-china.org/docs/psr/psr-3-logger-interface/1607">https://laravel-china.org/docs/psr/psr-3-logger-interface/1607</a></p></li>
<li><p>PSR-4 自动加载规范 &ndash; <a href="https://laravel-china.org/docs/psr/psr-4-autoloader/1608">https://laravel-china.org/docs/psr/psr-4-autoloader/1608</a></p></li>
<li><p>PSR-4 自动加载规范 &ndash; 示例文档 &ndash; <a href="https://laravel-china.org/docs/psr/psr-4-autoloader-example/1609">https://laravel-china.org/docs/psr/psr-4-autoloader-example/1609</a></p></li>
<li><p>PSR-4 自动加载规范 &ndash; 说明文档 &ndash; <a href="https://laravel-china.org/docs/psr/psr-4-autoloader-meta/1610">https://laravel-china.org/docs/psr/psr-4-autoloader-meta/1610</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思考题：直播弹幕系统的设计]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/25/zhi-bo-dan-mu-xi-tong-de-she-ji/"/>
    <updated>2018-11-25T20:45:36+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/25/zhi-bo-dan-mu-xi-tong-de-she-ji</id>
    <content type="html"><![CDATA[<p>从来没有开发过弹幕系统，今天在被问到这个问题的时候有点不知所措，以为是传统的像 BiliBili 这样的弹幕视频网站一样，从存储系统中拉取已有弹幕数据交付给前端按时间顺序显示就好，但是事后重新思考这个的问题的时候，发现不对——绝对不是这么简单。当时我应该误解了对方的意思，没有及时作出沟通，一下子就懵了。</p>

<p>面试官想考察我的真正场景是——<strong><em>如何设计一个直播平台的弹幕系统</em></strong>。</p>

<p>晚上回来赶紧再复盘一下这个问题。</p>

<!-- more -->


<p>我依稀记得面试官的问题是这样的：</p>

<blockquote><p>不使用PUSH方式，不使用长连接的方案下，如何设计一个（直播平台的）弹幕系统，并且能够突出显示我自己发的弹幕。</p></blockquote>

<p>在B站这样的弹幕网站里，除开直播频道之外，每个单独的视频应该都是把已有的弹幕都存储起来，而且由于B站每个视频的弹幕是有上限的，这样就保证了数据不会超载，所以最简单的方式就是可以直接使用 redis 的 list 来实现，单条数据存储的可能是像下面这样的数据结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;member_id&quot;</span><span class="p">,</span> <span class="c1">// 用户ID</span>
</span><span class='line'>    <span class="s2">&quot;content&quot;</span><span class="p">,</span> <span class="c1">// 弹幕内容</span>
</span><span class='line'>    <span class="s2">&quot;offset_time&quot;</span><span class="p">,</span> <span class="c1">// 相对于视频时长的偏移时间，用于确定弹幕出现的位置</span>
</span><span class='line'>    <span class="s2">&quot;timestamp&quot;</span><span class="p">,</span> <span class="c1">// 用户真正发表弹幕的时间</span>
</span><span class='line'>    <span class="s2">&quot;extra&quot;</span> <span class="c1">// 扩展字段，比如弹幕的效果（顶端，底端）、样式（颜色，字体大小）等等</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然如果稍做一些修改的话，也可以用 redis 的 sorted set 来实现。在这样的场景下，只需要在后端从存储中获取到每个视频对应的弹幕数据，排序好之后交给前端处理就好，甚至还可以不用后端做排序，让前端根据偏移时间自行做排序减少服务器的资源消耗。而要突出显示我自己的弹幕的话，只需要写完弹幕发送的时候，直接由前端处理先实时显示在屏幕上，然后再上报给后端接口存储起来就好。</p>

<p><strong><em>但是，直播系统的弹幕和这上面的思路完全不一样！！！</em></strong></p>

<p>直播间消息，相对于 IM 的场景，有其几个特点：1、消息要求及时，过时的消息对于用户来说不重要；2、松散的群聊，用户随时进群，随时退群；3、用户进群后，离线期间的消息不需要重发。</p>

<p>对于用户来说，在直播间有三个典型的操作：1、进入直播间，拉取正在观看直播的用户列表；2、接收直播间持续接收弹幕消息；3、自己发消息。</p>

<p>在这样的场景下，初步的设计可以做成这样——选择了 redis 的 sorted set 存储消息，基本操作如下:</p>

<blockquote><p>用户发弹幕，通过 zAdd 添加数据，其中 score 是弹幕的发送时间；</p>

<p>接收直播间的消息，通过 zRangeByScore 操作，两秒一次轮询；</p>

<p>进入直播间，获取用户的列表，通过 zRange 操作来完成；</p></blockquote>

<p>整个系统的流程应该是：</p>

<blockquote><p>写流程是:  前端提交弹幕给后端 &ndash;> 后端将弹幕推入队列 &ndash;> 队列处理机进行处理 &ndash;> 存储到 redis</p>

<p>读流程是:  前端轮询请求后端 &ndash;> 后端使用 zRangeByScore查询 redis &ndash;> 前端按时间顺序显示弹幕</p></blockquote>

<p>这个初步方案可能只能在直播人数较少的情况下起效，随着人数越来越多，瓶颈很快就能达到，会产生一些问题。</p>

<p>第一个问题——<strong><em>消息串行写入 redis，如果某个直播间消息量很大，那么消息会堆积在队列中，消息延迟较大。</em></strong></p>

<p>这个问题需要使用合适的消息队列来进行处理，由于我目前使用的最多的消息队列只有基于 redis 的 resque 和基于 Golang 的 nsque。没有做过详尽的性能测试来确定这两种队列能处理多大的 QPS，如果可以的话那就自然最好；如果不行的话，那就要选择更高性能的比如 Kafka 或者其他的分布式消息队列。</p>

<p>第二个问题——<strong><em>用户轮询最新消息，需要进行 redis 的 zRangeByScore 操作，redis slave 的性能瓶颈较大。</em></strong></p>

<p>解决这个问题可以额外增加一层缓存。后端每隔 1 秒左右取拉取一次直播间的弹幕，前端轮询数据时，从该缓存读取数据。弹幕的返回条数根据直播间的大小自动调整，小直播间返回允许时间跨度大一些的弹幕，大直播间则对时间跨度以及弹幕条数做更严格的限制。这里缓存与平常使用的本地缓存问题，有一个最大区别：成本问题。如果所有直播间的弹幕都进行缓存，假设同时有 1000 个直播间，每个直播间有5种弹幕类型，缓存每隔 1 秒拉取一次数据，40 台缓存处理机器，那么对 redis 的访问 QPS 是 1000 * 5 * 40 = 20W。成本太高，因此我们只有大直播间才自动开启缓存，小直播间不开启。</p>

<p>第三个问题——<strong><em>弹幕数据也支持回放，直播结束后，这些数据存放于 redis 中，在回放时，会与直播的数据竞争 redis 的 CPU 资源。</em></strong></p>

<p>解决方案——直播结束后，数据备份到 MySQL；增加一组回放的 redis；增加回放的缓存。回放时，读取数据顺序是: 缓存 &ndash;> redis &ndash;> MySQL。缓存与回放 redis 都可以只存某个直播间某种弹幕类型的部分数据，有效控制容量；缓存与回放 redis 使用 sorted set数据结构，这样整个系统的数据结构都保持一致。</p>

<p>我个人能力有限，暂时只能想到这么多。除了上面这些之外，还需要考虑整个系统的高可用保障——包括机房部署、降级和熔断、全面的业务监控、轮询方案的优化等等。</p>

<p>暂时就这些，我的知识面还需要不断完善，业务场景还需要不断扩充。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法题：爬楼梯算法]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/25/pa-lou-ti-suan-fa/"/>
    <updated>2018-11-25T18:16:40+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/25/pa-lou-ti-suan-fa</id>
    <content type="html"><![CDATA[<p>有这样一个题目：应该是大学时代的经典算法题了——小孩上楼梯。</p>

<blockquote><p>有个小孩正在上楼梯，楼梯有s阶台阶，小孩一次可以上1阶或2阶。实现一个算法，计算小孩有多少种上楼梯的方式。输入n，返回一个整数。</p></blockquote>

<p>稍微想了一下，这个题目可以用递归来解决。根据题目的规则，最后一步只有两种走法：要么走1阶，要么走2阶。所以可以得出这么一个递归公式：<code>f(s) = f(s-1) + f(s-2)</code>。好像就是一个斐波那契数列公式？</p>

<!-- more -->


<p>这个问题的边界值就是在只有1阶的情况下，只有1种方式(1)；在只有2阶的情况下，有两种方式(1,1)、(2)。</p>

<p>编写程序如下：</p>

<figure class='code'><figcaption><span> (stair.go)</span> <a href='http://caiknife.github.io/downloads/code/stair/stair.go'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 默认走10阶</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">GoStair</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GoStair</span><span class="p">(</span><span class="nx">s</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="mi">3</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">s</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">GoStair</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nx">GoStair</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用正常的递归，在递归层数过多的情况下，可能会有stack overflow的风险，所以可以改写为用循环处理的方式：</p>

<figure class='code'><figcaption><span> (stair_with_loop.go)</span> <a href='http://caiknife.github.io/downloads/code/stair/stair_with_loop.go'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 默认走10阶</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">GoStairWithLoop</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GoStairWithLoop</span><span class="p">(</span><span class="nx">s</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// f(1) = 1</span>
</span><span class='line'>  <span class="c1">// f(2) = 2</span>
</span><span class='line'>  <span class="c1">// result是f(1)的值 tmp是f(2)-f(1)的值</span>
</span><span class='line'>  <span class="nx">result</span><span class="p">,</span> <span class="nx">tmp</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">;</span> <span class="nx">s</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">tmp</span> <span class="p">=</span> <span class="nx">result</span> <span class="o">+</span> <span class="nx">tmp</span>
</span><span class='line'>      <span class="nx">result</span> <span class="p">=</span> <span class="nx">tmp</span> <span class="o">-</span> <span class="nx">result</span>
</span><span class='line'>      <span class="nx">s</span><span class="o">--</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>将循环中使用到的变量提取出来作为函数的参数使用，就成了尾递归。在方法最后被调用时，线程栈里面的临时变量与参数此时已经没任何用了，可以被GC回收，所以理论上就是同上面的循环方法是一致的，无论有多深，都不会发生内存异常。</p>

<figure class='code'><figcaption><span> (stair_with_tail.go)</span> <a href='http://caiknife.github.io/downloads/code/stair/stair_with_tail.go'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 默认走10阶</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">GoStairWithTail</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GoStairWithTail</span><span class="p">(</span><span class="nx">s</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">result</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">tmp</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">GoStairWithTail</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">tmp</span><span class="p">,</span> <span class="nx">result</span><span class="o">+</span><span class="nx">tmp</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这种情况下，该算法的时间复杂度是<code>O(n)</code>。</p>

<p>下面扩展一下思路：</p>

<blockquote><p>这小屁孩的老师作业留少了，闲着没事爬楼梯，楼梯有s阶台阶(steps)，小孩一次可以上m阶（maxStep）。计算小孩有多少种上楼梯的方式。输入s,m，返回一个整数。</p></blockquote>

<p>一样分析可以得到公式：<code>f(s) = f(s-1) + f(s-2) + ... + f(s-m)</code>。</p>

<p>参照上例思路，我们可以在递归里分为两大部分，一部分是steps > maxStep时，参照f(s,m) = f(s-1) + f(s-2) + f(s-3) + &hellip; + f(s-m)进行累加。</p>

<p>我们现在看steps &lt;= maxStep时，怎么给出类似上例里f(2)，f(3)的返回值。其实，上例中的f(3)，就是台阶一共3级，最大可以跨2步的值，即f(2) 就是f(2,2)，f(3)就是f(3,2)。分析一下就得出下面的图解：</p>

<p><a href="http://caiknife.github.io/downloads/image/go/stair.jpg" title="爬楼梯算法 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/go/stair.jpg" alt="爬楼梯算法 " /></a></p>

<p>根据以上图解，分析如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>steps &gt; maxStep 时，f(s,m) = f(s-1) + f(s-2) + f(s-3) + ··· + f(s-m);
</span><span class='line'>steps &lt;= maxStep时，f(s,s) = f(s,s-1) +1;
</span><span class='line'>steps = 1时，return 1;
</span><span class='line'>steps = 0时，return 0;</span></code></pre></td></tr></table></div></figure>


<p>编码如下：</p>

<figure class='code'><figcaption><span> (stair_with_s_m.go)</span> <a href='http://caiknife.github.io/downloads/code/stair/stair_with_s_m.go'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// 默认走10阶，每次最多2阶</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">GoStairWithSM</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GoStairWithSM</span><span class="p">(</span><span class="nx">s</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">m</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">result</span> <span class="o">:=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">s</span> <span class="p">&gt;</span> <span class="nx">m</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">m</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">result</span> <span class="o">+=</span> <span class="nx">GoStairWithSM</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span> <span class="nx">m</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">result</span> <span class="p">=</span> <span class="nx">GoStairWithSM</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">s</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>打完收工。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思维导图：Go语言基础知识]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/24/goyu-yan-ji-zhi-shi/"/>
    <updated>2018-11-24T18:37:37+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/24/goyu-yan-ji-zhi-shi</id>
    <content type="html"><![CDATA[<p>工作以来一直都是用的PHP，不过其实我还会写Python，Ruby，就是没有用在公司的项目上。</p>

<p>没关系，我一样写得很溜。</p>

<p>最近又开始接触Go了，应该是很早就已经开始接触Go了，看了一些教程之后，我真的想说：真的很棒！</p>

<!-- more -->


<p><a href="http://caiknife.github.io/downloads/image/go/go.png" title="Go语言基础知识 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/go/go.png" alt="Go语言基础知识 " /></a></p>

<p>我现在只想尽快成为一个优秀的Go工程师。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思维导图：如何设计一个秒杀系统]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/24/ru-he-she-ji-ge-miao-sha-xi-tong/"/>
    <updated>2018-11-24T12:13:21+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/24/ru-he-she-ji-ge-miao-sha-xi-tong</id>
    <content type="html"><![CDATA[<p>秒杀是一个非常常见的应用场景了，我也做过一些秒杀类的需求。</p>

<p>做过这么多同类型的需求之后，我查阅了一些资料，总结了一下在设计一个秒杀系统中，可能会用到的一些知识点。</p>

<!-- more -->


<p><a href="http://caiknife.github.io/downloads/image/miaosha/miaosha.png" title="如何设计一个秒杀系统 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/miaosha/miaosha.png" alt="如何设计一个秒杀系统 " /></a></p>

<p>这个思维导图我还会不断完善，不断迭代。</p>

<p>无规矩不成方圆，方法论就是规矩，动手实操才能成方圆。</p>

<p>这就是知识带来的力量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP安装IMAP扩展]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan/"/>
    <updated>2018-11-21T20:43:49+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/21/phpan-zhuang-imapkuo-zhan</id>
    <content type="html"><![CDATA[<p>在经历了MacOS上的homebrew升级之后，imap就不再是homebrew的PHP里默认安装的扩展了，这样如果你在composer.json中引用了一个需要用到imap扩展的库，那么久没有办法更新composer库，这样着实让人内伤。</p>

<p>所以今天就来解决这个问题。</p>

<!-- more -->


<h3>第一步</h3>

<p>你需要通过brew安装imap-uw</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install imap-uw
</span></code></pre></td></tr></table></div></figure>


<p>注：在完成第一步之后，你需要安装openssl，不管通过何种方式。这里简单介绍一下通过brew安装openssl，非常的简单。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install openssl
</span></code></pre></td></tr></table></div></figure>


<p>这就是安装拓展的准备工作，接下来才开始：</p>

<h3>第二步</h3>

<p>你需要去官网下载跟你现在环境所对应的PHP版本，我的是7.1的，所以我下载了PHP7.1的，然后解压。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -zxvf ~/Downloads/php-7.1.24.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>解压之后进入到当前PHP文件的ext/imap文件当中。注意，解压是解压到当前目录下，当然，你也可以指定目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>php-7.1.19/ext/imap
</span></code></pre></td></tr></table></div></figure>


<p>进入到该目录后，第一个命令就是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo phpize
</span></code></pre></td></tr></table></div></figure>


<p>如果你不执行该命令，是无法在这个目录下进行编译安装的。接下来就是编译安装了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure --with-imap<span class="o">=</span>/usr/local/Cellar/imap-uw/2007f --with-kerberos --with-imap-ssl<span class="o">=</span>/usr/local/opt/openssl
</span></code></pre></td></tr></table></div></figure>


<p>注：imap的目录就是imap-uw的安装目录，凡是通过brew安装的都是在/usr/local/Cellar目录下，ssl的目录就是你之前的openssl的目录。这些都要改为自己的。然后再是执行之前的编译。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make
</span></code></pre></td></tr></table></div></figure>


<p>执行完成之后，会在imap目录下生成许多的文件，此时需要创建一个文件夹。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /usr/local/opt/php71-imap
</span></code></pre></td></tr></table></div></figure>


<p>这个文件夹用来存放刚才执行编译生成的imap.so文件。当前你所在的目录还是在imap里面，需要把imap.so文件拷贝到刚才创建的文件夹中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv modules/imap.so /usr/local/opt/php71-imap/imap.so
</span></code></pre></td></tr></table></div></figure>


<p>最后你需要在你的/usr/local/etc/php/7.1/conf.d/imap.ini里面添加这样一句话即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[imap]</span>
</span><span class='line'><span class="na">extension</span><span class="o">=</span><span class="s">&quot;/usr/local/opt/php71-imap/imap.so&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>第三步</h3>

<p>检查是否安装好:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>php -m | grep imap
</span></code></pre></td></tr></table></div></figure>


<p>如果出现了imap，那么大功告成。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[思维导图两张]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang/"/>
    <updated>2018-11-20T14:03:41+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/20/si-wei-dao-tu-liang-zhang</id>
    <content type="html"><![CDATA[<p>更新两张思维导图，有关于数据结构和算法，以及Linux性能优化的知识框架。</p>

<!-- more -->


<p><a href="http://caiknife.github.io/downloads/image/composer/ds.png" title="数据结构与算法 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/composer/ds.png" alt="数据结构与算法 " /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/composer/linux.png" title="Linux性能优化 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/composer/linux.png" alt="Linux性能优化 " /></a></p>

<p>一时偷懒造成的问题可能花数十倍的时间精力去善后。</p>

<p>人生艰难。</p>

<p>人间不值得，我自己最值得。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[趣味题：求字符串的全排列]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-qiu-zi-fu-chuan-de-quan-pai-lie/"/>
    <updated>2018-11-17T18:47:57+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-qiu-zi-fu-chuan-de-quan-pai-lie</id>
    <content type="html"><![CDATA[<p>这是一个面试题。</p>

<blockquote><p>给定一个字符串，输出这个字符串的全排列。比如给定了字符串abc，那么输出结果就是
abc acb bac bca cab cba</p></blockquote>

<p>如果用Python来解决这个问题的话，那真的是非常非常简单的了，因为Python有个<code>itertools</code>工具包，这个包下有个工具类叫<code>permutations</code>。</p>

<p>几行代码就可以实现功能：</p>

<!-- more -->




<figure class='code'><figcaption><span> (perm.py)</span> <a href='http://caiknife.github.io/downloads/code/quiz/perm.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding:utf8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">permutations</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">permutations</span><span class="p">(</span><span class="s">&#39;abc&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">v</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然我们不能这么赖皮地使用Python的内置库来解决这个问题，更重要的是，我们需要了解全排列的算法。</p>

<p>所谓全排列，就是打印出字符串中所有字符的所有排列。例如输入字符串abc，则打印出 a、b、c 所能排列出来的所有字符串 abc、acb、bac、bca、cab 和 cba 。</p>

<p>一般最先想到的方法是暴力循环法，即对于每一位，遍历集合中可能的元素，如果在这一位之前出现过了该元素，跳过该元素。例如对于abc，第一位可以是 a 或 b 或 c 。当第一位为 a 时，第二位再遍历集合，发现 a 不行，因为前面已经出现 a 了，而 b 和 c 可以。当第二位为 b 时 ， 再遍历集合，发现 a 和 b 都不行，c 可以。可以用递归或循环来实现，但是复杂度为 O(n<sup>n</sup>) 。有没有更优雅的解法呢。</p>

<p>首先考虑bac和cba这二个字符串是如何得出的。显然这二个都是abc中的 a 与后面两字符交换得到的。然后可以将abc的第二个字符和第三个字符交换得到acb。同理可以根据bac和cba来得bca和cab。</p>

<p>因此可以知道，全排列就是从第一个数字起每个数分别与它后面的数字交换，也可以得出这种解法每次得到的结果都是正确结果，所以复杂度为 O(n!)。</p>

<p>最后我写了一个PHP版本的实现：</p>

<figure class='code'><figcaption><span> (perm.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/perm.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/11/17</span>
</span><span class='line'><span class="sd"> * Time: 15:09</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">StringPlace</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">stringPlace</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">stringPlace</span><span class="p">(</span><span class="nv">$stringSize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$tmpString</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$stringSize</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$tmpString</span><span class="p">[]</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="nx">rand</span><span class="p">(</span><span class="mi">97</span><span class="p">,</span> <span class="mi">122</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;Origin string is &quot;</span> <span class="o">.</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$tmpString</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">perm</span><span class="p">(</span><span class="nv">$tmpString</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">sizeof</span><span class="p">(</span><span class="nv">$tmpString</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">perm</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$arr</span><span class="p">,</span> <span class="nv">$k</span><span class="p">,</span> <span class="nv">$m</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$k</span> <span class="o">==</span> <span class="nv">$m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$arr</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="nv">$k</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="nv">$m</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_swap</span><span class="p">(</span><span class="nv">$arr</span><span class="p">[</span><span class="nv">$k</span><span class="p">],</span> <span class="nv">$arr</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">perm</span><span class="p">(</span><span class="nv">$arr</span><span class="p">,</span> <span class="nv">$k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$m</span><span class="p">);</span>
</span><span class='line'>                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_swap</span><span class="p">(</span><span class="nv">$arr</span><span class="p">[</span><span class="nv">$k</span><span class="p">],</span> <span class="nv">$arr</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">_swap</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$a</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$b</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">list</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span> <span class="nv">$a</span><span class="p">)</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>全排列就是这样，代码看起来还是有点点难懂，需要深入了解才能融会贯通。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[趣味题：找出N个数字中最大的K个]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-zhao-chu-nge-shu-zi-zhong-zui-da-de-kge/"/>
    <updated>2018-11-17T17:58:40+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/17/qu-wei-ti-zhao-chu-nge-shu-zi-zhong-zui-da-de-kge</id>
    <content type="html"><![CDATA[<p>算是一个面试题吧，内容就是如标题所写的一样：</p>

<blockquote><p>给定N个指定的数字，输出前K个最大的数字，比如给出了1，2，3，4，5，6，7，8，要求输出前3个最大的数字，那么就输出8，7，6</p></blockquote>

<p>其实这个题目，看起来很简单，其实只需要从大到小排序之后，输出前K个数字就可以了，只是排序有很多种算法——常用的就有冒泡排序、选择排序、插入排序、归并排序、快速排序等等，冒泡、选择、插入的时间复杂度是O(n<sup>2</sup>)，归并、快速的时间复杂度是O(n*lgn)。如果需要自己手动实现排序算法的话，那么使用快速排序和归并排序的效果肯定是最好的。</p>

<!-- more -->


<p>不过这道题里，我选择了PHP中自带的数据结构 <code>SplMaxHeap</code> 来完成这个问题，也就是用了堆排序。</p>

<p>其实源码很简单：</p>

<figure class='code'><figcaption><span> (heap.php)</span> <a href='http://caiknife.github.io/downloads/code/quiz/heap.php'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Created by PhpStorm.</span>
</span><span class='line'><span class="sd"> * User: caiknife</span>
</span><span class='line'><span class="sd"> * Date: 2018/11/17</span>
</span><span class='line'><span class="sd"> * Time: 14:54</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Cron</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Number</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">printKMaxFromN</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">printKMaxFromN</span><span class="p">(</span><span class="nv">$n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$n</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="nv">$k</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;BOTH n k must be positive.&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>            <span class="k">exit</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$n</span> <span class="o">&lt;</span> <span class="nv">$k</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="s2">&quot;n MUST geq k.&quot;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>            <span class="k">exit</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$tmpHeap</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\SplMaxHeap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$n</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$tmpHeap</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">(</span><span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$k</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">echo</span> <span class="nv">$tmpHeap</span><span class="o">-&gt;</span><span class="na">current</span><span class="p">()</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>            <span class="nv">$tmpHeap</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码就是给定了10个0到50的随机数，每生成一个就放入到SplMaxHeap中。</p>

<p>堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] >= A[i]。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。</p>

<p><em>总结</em></p>

<p>在找出前K个最小(或最大)的元素时，如果元素个数较少，可以采用简单选择排序；如果元素较多，可以采用堆排序；如果元素基本有序，可以采用冒泡排序。本文采用的是堆排序，时间复杂度是O(n*lgk)。</p>

<p>虽然PHP的数组几乎是万能的，但是也别忘了PHP还是提供了更多更强大的数据结构可以让我们使用，在特定的场景下使用合适的数据结构，不要一股脑儿地只使用PHP的数组，这对于技术人员才是最重要的——要学会思考，要有自己的想法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用glide进行Go的包管理]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/16/shi-yong-glidejin-xing-gode-bao-guan-li/"/>
    <updated>2018-11-16T19:05:17+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/16/shi-yong-glidejin-xing-gode-bao-guan-li</id>
    <content type="html"><![CDATA[<p>长话短说，一切从简。</p>

<p>今天开始使用 <code>glide</code> 进行 <code>Golang</code> 的包管理。</p>

<!-- more -->


<p>先安装 <code>glide</code> ：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install glide
</span></code></pre></td></tr></table></div></figure>


<p>然后进入工作目录，使用 <code>glide</code> 进行初始化：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>glide init
</span></code></pre></td></tr></table></div></figure>


<p>由于有些库放在 golang.org 上，不能直接下载，所以需要使用代理。我自己本身用了 <code>ShadowSocks</code> 作为翻墙工具，所以使用 <code>SS</code> 代理即可。</p>

<p>把下面的代码写到一个脚本里，命名为 <code>proxy</code> ，位置是 <code>/usr/local/bin/</code> 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="nb">export </span><span class="nv">http_proxy</span><span class="o">=</span>socks5://127.0.0.1:1080
</span><span class='line'><span class="nb">export </span><span class="nv">https_proxy</span><span class="o">=</span>socks5://127.0.0.1:1080
</span><span class='line'><span class="nv">$*</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后执行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>proxy glide install
</span></code></pre></td></tr></table></div></figure>


<p>就可以顺利下载库了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Python脚本抓取早期知乎页面里的图片]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/15/shi-yong-pythonjiao-ben-zhua-qu-zao-qi-zhi-hu-ye-mian-li-de-tu-pian/"/>
    <updated>2018-11-15T11:38:54+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/15/shi-yong-pythonjiao-ben-zhua-qu-zao-qi-zhi-hu-ye-mian-li-de-tu-pian</id>
    <content type="html"><![CDATA[<p>很久很久以前，我在知乎看到了一个问题<a href="https://www.zhihu.com/question/37709992">长得好看，但没有男朋友是怎样的体验？</a>。</p>

<p>出于男性本能的需求，我就花了一个中午的时间写了个脚本，专门用于抓取知乎问题页面下的图片，然后就把我的代码写到了这个问题的<a href="https://www.zhihu.com/question/37709992/answer/121184589">答案</a>里。接着，又过了几天——我的答案被折叠了……</p>

<!-- more -->


<p>使用的 <code>Python</code> 版本是 2.7 ，用到的库是 <code>requests</code> 和 <code>pyquery</code> 。</p>

<p>Python 源码如下：</p>

<figure class='code'><figcaption><span> (dl_with_names.py)</span> <a href='http://caiknife.github.io/downloads/code/zhihu/dl_with_names.py'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c"># coding:utf8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pyquery</span> <span class="kn">import</span> <span class="n">PyQuery</span> <span class="k">as</span> <span class="n">pq</span>
</span><span class='line'>
</span><span class='line'><span class="n">entity</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">images</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">get_url</span><span class="p">()</span>
</span><span class='line'>        <span class="n">load_page</span><span class="p">()</span>
</span><span class='line'>        <span class="n">save_imgs</span><span class="p">()</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">e</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_url</span><span class="p">():</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span>
</span><span class='line'>    <span class="c"># 如果不是dl.py zhihu_url这种格式的话，抛出异常</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">u&quot;Wrong number for args, please use Zhihu question url!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">zhihu_url</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="c"># zhihu_url不符合问题页面url格式的话，抛出异常</span>
</span><span class='line'>    <span class="n">re_exp</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">ur&quot;^https://www\.zhihu\.com/question/(\d+)&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">match</span> <span class="o">=</span> <span class="n">re_exp</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">zhihu_url</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">match</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">u&quot;Zhihu url is invalid!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">entity</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">zhihu_url</span>
</span><span class='line'>    <span class="n">entity</span><span class="p">[</span><span class="s">&#39;question&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">match</span><span class="o">.</span><span class="n">groups</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">print</span> <span class="n">entity</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">load_page</span><span class="p">():</span>
</span><span class='line'>    <span class="n">header</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">ur&#39;User-Agent&#39;</span><span class="p">:</span> <span class="s">ur&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Host&#39;</span><span class="p">:</span> <span class="s">ur&#39;www.zhihu.com&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Accept&#39;</span><span class="p">:</span> <span class="s">ur&#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Accept-Language&#39;</span><span class="p">:</span> <span class="s">ur&#39;zh-CN,zh;q=0.8,en;q=0.6&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Accept-Encoding&#39;</span><span class="p">:</span> <span class="s">ur&#39;gzip, deflate, sdch&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Connection&#39;</span><span class="p">:</span> <span class="s">ur&#39;keep-alive&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s">ur&#39;Cache-Control&#39;</span><span class="p">:</span> <span class="s">ur&#39;max-age=0&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">entity</span><span class="p">[</span><span class="s">&#39;url&#39;</span><span class="p">],</span> <span class="n">headers</span><span class="o">=</span><span class="n">header</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">resp</span><span class="o">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s">u&quot;Http error!&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="n">pq</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">d</span><span class="p">(</span><span class="s">&#39;title&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">()</span>
</span><span class='line'>    <span class="n">entity</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">title</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">u&quot; &quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">imgs</span> <span class="o">=</span> <span class="n">d</span><span class="p">(</span><span class="s">&quot;img.origin_image.zh-lightbox-thumb.lazy&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">ele</span> <span class="ow">in</span> <span class="n">imgs</span><span class="p">:</span>
</span><span class='line'>        <span class="n">images</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pq</span><span class="p">(</span><span class="n">ele</span><span class="p">)</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s">&quot;data-original&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">save_imgs</span><span class="p">():</span>
</span><span class='line'>    <span class="n">dest_dir</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span> <span class="o">+</span> <span class="s">&quot;/images/&quot;</span> <span class="o">+</span> <span class="n">entity</span><span class="p">[</span><span class="s">&#39;question&#39;</span><span class="p">]</span> <span class="o">+</span> \
</span><span class='line'>               <span class="n">entity</span><span class="p">[</span><span class="s">&#39;title&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">dest_dir</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">dest_dir</span><span class="p">):</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">dest_dir</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="n">images</span><span class="p">:</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span><span class='line'>        <span class="n">filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">dest_dir</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span> <span class="o">+</span> <span class="n">filename</span><span class="p">,</span> <span class="s">&quot;wb&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">img</span> <span class="o">+</span> <span class="s">&quot; done.&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">main</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法很简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python dl_with_names.py https://www.zhihu.com/question/37709992
</span></code></pre></td></tr></table></div></figure>


<p>嗯，由于知乎页面改版了，所以现在并没有办法再下载了…… 只能再另外通过解决登录态的问题，看到问题页之后再想办法抓取图片。</p>

<p>上面这种方法适合有一定命令行基础的人群，对于普通人来说，更简单的方法是使用 <code>javascript</code> 。</p>

<figure class='code'><figcaption><span> (dl.js)</span> <a href='http://caiknife.github.io/downloads/code/zhihu/dl.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by caiknife on 16/9/9.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div id=&quot;showImg&quot;&gt;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">prependTo</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img.origin_image.zh-lightbox-thumb.lazy&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#showImg&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;original&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&lt;br/&gt;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>先在地址栏里输入 <code>javascript:</code> ， 再把上面的 JS 代码复制到地址栏里，回车之后就会在页面顶端出现问题页之内图片的链接。</p>

<p>不过由于现在知乎已经不用 <code>jQuery</code> 了，所以这段代码也失效了……</p>

<p>那还是写篇文章纪念一下吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLI 环境高级配置]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/14/cli-improvement/"/>
    <updated>2018-11-14T12:40:07+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/14/cli-improvement</id>
    <content type="html"><![CDATA[<p>最近又发现了几个在 CLI 环境下，对几个已有命令的强化，可以提高用户体验，现在来总结一下。</p>

<!-- more -->


<h2>bat</h2>

<p>安装方式 <code>brew install bat</code></p>

<p>这是一个取代 <code>cat</code> 的命令。通常情况下 <code>cat</code> 只显示普通文本的内容，而 <code>bat</code> 还会根据文件的扩展名高亮显示语法。效果如下图：</p>

<p><a href="http://caiknife.github.io/downloads/image/cli/bat.gif" title="bat " class="fancybox"><img src="http://caiknife.github.io/downloads/image/cli/bat.gif" alt="bat " /></a></p>

<h2>prettyping</h2>

<p>安装方式 <code>brew install prettyping</code></p>

<p>这是一个取代 <code>ping</code> 的命令。可以更加直观地显示 ping 的进度。</p>

<p><a href="http://caiknife.github.io/downloads/image/cli/ping.gif" title="prettyping " class="fancybox"><img src="http://caiknife.github.io/downloads/image/cli/ping.gif" alt="prettyping " /></a></p>

<p>可以用别名来替换已有的 <code>ping</code> 命令：<code>alias ping='prettyping --nolegend'</code></p>

<h2>fd</h2>

<p>安装方式 <code>brew install fd</code></p>

<p>这个命令自然是用来取代 <code>find</code> 。</p>

<p><a href="http://caiknife.github.io/downloads/image/cli/fd.png" title="fd " class="fancybox"><img src="http://caiknife.github.io/downloads/image/cli/fd.png" alt="fd " /></a></p>

<p>下面是一些常用的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>fd cli <span class="c"># all filenames containing &quot;cli&quot;</span>
</span><span class='line'>fd -e md <span class="c"># all with .md extension</span>
</span><span class='line'>fd cli -x wc -w <span class="c"># find &quot;cli&quot; and run `wc -w` on each file</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ncdu</h2>

<p>安装方式 <code>brew install ncdu</code></p>

<p>这个命令可以取代 <code>du</code> 。而且还可以在界面内进行操作，通过操作光标进入不同的目录查看文件大小。</p>

<p><a href="http://caiknife.github.io/downloads/image/cli/ncdu.png" title="ncdu " class="fancybox"><img src="http://caiknife.github.io/downloads/image/cli/ncdu.png" alt="ncdu " /></a></p>

<p>别名配置可以写成：<code>alias du="ncdu --color dark -rr -x --exclude .git --exclude node_modules"</code></p>

<hr />

<p>今天就先到这里，下回再继续吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[摇摆舞者乐感入门指南]]></title>
    <link href="http://caiknife.github.io/blog/2018/11/01/yao-bai-wu-zhe-le-gan-ru-men-zhi-nan/"/>
    <updated>2018-11-01T10:24:18+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/11/01/yao-bai-wu-zhe-le-gan-ru-men-zhi-nan</id>
    <content type="html"><![CDATA[<p>很久以前，我想成为一个牛逼的吉他手；多年以后，我致力于做音乐的传播者，提高身边朋友们的音乐素养，告诉大家如何去欣赏音乐。</p>

<p>自从 2017 年开始学习摇摆舞以来，我一直都把之前学习吉他的经验应用到学习摇摆舞中，进步还算明显，跳舞之余，还给大家分享了一些有关乐理和乐感的知识。</p>

<!-- more -->


<p>最终，我写出了一张摇摆舞者可以用得上的有关乐理和乐感的思维导图：</p>

<p><a href="http://caiknife.github.io/downloads/image/about/swing.png" title="摇摆舞者乐感入门指南 " class="fancybox"><img src="http://caiknife.github.io/downloads/image/about/swing.png" alt="摇摆舞者乐感入门指南 " /></a></p>

<p>配合几次分享的录音，加上这张图，我相信会对各位舞者的乐感有所帮助。</p>

<p>20180819乐感讲座（1）-打拍子 <a href="https://music.163.com/program?id=1370712472">https://music.163.com/program?id=1370712472</a></p>

<p>20180909乐感讲座（2）-听乐器 <a href="https://music.163.com/program?id=2056478909">https://music.163.com/program?id=2056478909</a></p>

<p>20180916乐感讲座（3）-识风格 <a href="https://music.163.com/program?id=2056582052">https://music.163.com/program?id=2056582052</a></p>

<p>20180925乐感讲座浓缩版-打拍子&amp;听乐器 <a href="https://music.163.com/#/program?id=2056693131">https://music.163.com/#/program?id=2056693131</a></p>

<p>为了音乐，我实在是付出了不少，回报也微乎其微，苦中作乐不容易啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH配置备忘]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/22/zhi-bei-wang/"/>
    <updated>2018-10-22T19:46:38+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/22/zhi-bei-wang</id>
    <content type="html"><![CDATA[<p>记录一下我机器上的SSHConfig，防止将来忘记了。</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host jserver
</span><span class='line'>    HostName ********
</span><span class='line'>    User caiknife
</span><span class='line'>
</span><span class='line'>Host j2server
</span><span class='line'>    HostName ********
</span><span class='line'>    User caiknife
</span><span class='line'>    StrictHostKeyChecking no
</span><span class='line'>    Port 2222</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[composer问题排查]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/19/composepai-cha/"/>
    <updated>2018-10-19T14:48:38+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/19/composepai-cha</id>
    <content type="html"><![CDATA[<p>今天更新 composer 库的时候出现了一个问题：</p>

<p><a href="http://caiknife.github.io/downloads/image/composer/1.png" title="Composer Issue " class="fancybox"><img src="http://caiknife.github.io/downloads/image/composer/1.png" alt="Composer Issue " /></a></p>

<p>上图不是我的电脑出现的问题，是通过搜索引擎搜到的图片，我和提出这个问题的题主碰到了一样的问题。</p>

<!-- more -->


<p>查了半天没找到原因是什么，后来在查当前代码库的时候，composer.json 文件里的配置是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;repositories&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;packagist&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;composer&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;packagist.phpcomposer.com&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>搜索了问题之后，发现 packagist.phpcomposer.com 这个镜像已经很久没有更新了，所以就造成了目前的问题。只需要把仓库换个镜像源就可以了。</p>

<p>用下面的命令将镜像地址替换为 <a href="https://packagist.laravel-china.org">https://packagist.laravel-china.org</a> 即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>composer config -g repo.packagist composer https://packagist.laravel-china.org
</span><span class='line'>
</span><span class='line'>composer config repo.packagist composer https://packagist.laravel-china.org
</span></code></pre></td></tr></table></div></figure>


<p>Problem resolved.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RVM使用]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/16/rvmshi-yong/"/>
    <updated>2018-10-16T16:07:18+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/16/rvmshi-yong</id>
    <content type="html"><![CDATA[<p>之前因为 Ruby 版本的问题，博客一直用不了。前段时间使用了 RVM 来管理 Ruby 的版本，所以博客又复活了。</p>

<p>所以今天就来总结一下如何用 RVM 来管理不同的 Ruby 版本。</p>

<!-- more -->


<h2>RVM 的安装</h2>

<p>先安装 RVM</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
</span><span class='line'>
</span><span class='line'><span class="se">\c</span>url -sSL https://get.rvm.io | bash -s stable
</span></code></pre></td></tr></table></div></figure>


<h2>Ruby 的安装和切换</h2>

<p>列出已知的 Ruby 版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm list known
</span></code></pre></td></tr></table></div></figure>


<p>安装一个 Ruby 版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm install 2.2.0
</span></code></pre></td></tr></table></div></figure>


<p>切换 Ruby 版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 2.2.0
</span></code></pre></td></tr></table></div></figure>


<p>如果想设置为默认版本，这样一来以后新打开的控制台默认的 Ruby 就是这个版本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 2.2.0 --default
</span></code></pre></td></tr></table></div></figure>


<p>查询已经安装的ruby</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm list
</span></code></pre></td></tr></table></div></figure>


<p>卸载一个已安装版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm remove 1.8.7
</span></code></pre></td></tr></table></div></figure>


<h2>gemset 的使用</h2>

<p>RVM 不仅可以提供一个多 Ruby 版本共存的环境，还可以根据项目管理不同的 gemset。gemset 可以理解为是一个独立的虚拟 gem 环境，每一个 gemset 都是相互独立的。</p>

<p>比如你有两个项目，一个是 Rails 2.3 一个是 Rails3。gemset 可以帮你便捷的建立两套 gem 开发环境，并且方便的切换。gemset 是附加在 Ruby 语言版本下面的，例如你用了 1.9.2, 建立了一个叫 rails3 的 gemset,当切换到 1.8.7 的时候，rails3 这个 gemset 并不存在。</p>

<p>建立 gemset</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 1.8.7
</span><span class='line'>rvm gemset create rails23
</span></code></pre></td></tr></table></div></figure>


<p>然后可以设定已建立的 gemset 做为当前环境。use 可以用来切换语言或者 gemset，前提是他们已经被安装(或者建立)，并可以在 list 命令中看到。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 1.8.7
</span><span class='line'>rvm use 1.8.7@rails23
</span></code></pre></td></tr></table></div></figure>


<p>然后所有安装的 gem 都是安装在这个 gemset 之下。</p>

<p>列出当前 Ruby 的 gemset</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm gemset list
</span></code></pre></td></tr></table></div></figure>


<p>如果你想清空一个 gemset 的所有 gem， 想重新安装所有 gem，可以这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm gemset empty 1.8.7@rails23
</span></code></pre></td></tr></table></div></figure>


<p>删除一个 gemset</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm gemset delete rails2-3
</span></code></pre></td></tr></table></div></figure>


<p>RVM 还可以自动加载 gemset。 例如我们有一个 Rails 3.1.3 项目，需要 1.9.3 版本 Ruby，整个流程可以这样。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm install 1.9.3
</span><span class='line'>rvm use 1.9.3
</span><span class='line'>rvm gemset create rails313
</span><span class='line'>rvm use 1.9.3@rails313
</span></code></pre></td></tr></table></div></figure>


<p>下面进入到项目目录，建立一个 .rvmrc 文件。在这个文件里可以很简单的加一个命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm use 1.9.3@rails313
</span></code></pre></td></tr></table></div></figure>


<p>然后无论你当前 Ruby 设置是什么，cd 到这个项目的时候，RVM 会帮你加载 Ruby 1.9.3 和 rails313 gemset.</p>

<h2>使用 .ruby-gemset 和 .ruby-version</h2>

<p>在项目目录下创建这两个文件 <code>.ruby-gemset</code> 和 <code>.ruby-version</code>，在 <code>.ruby-gemset</code> 中填入 gemset 的名称，在 <code>.ruby-version</code> 填入 Ruby 版本的名称，当 cd 到这个目录的时候，就会自动加载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改了一下zsh主题]]></title>
    <link href="http://caiknife.github.io/blog/2018/10/12/xiu-gai-liao-%5B%3F%5D-xia-zshzhu-ti/"/>
    <updated>2018-10-12T15:41:19+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/10/12/xiu-gai-liao-[?]-xia-zshzhu-ti</id>
    <content type="html"><![CDATA[<p>把原来的 zsh 主题做了一下修改。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Color shortcuts</span>
</span><span class='line'><span class="nv">RED</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>red<span class="o">]</span>
</span><span class='line'><span class="nv">YELLOW</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>yellow<span class="o">]</span>
</span><span class='line'><span class="nv">GREEN</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>green<span class="o">]</span>
</span><span class='line'><span class="nv">WHITE</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>white<span class="o">]</span>
</span><span class='line'><span class="nv">BLUE</span><span class="o">=</span><span class="nv">$fg</span><span class="o">[</span>blue<span class="o">]</span>
</span><span class='line'><span class="nv">RED_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>red<span class="o">]</span>
</span><span class='line'><span class="nv">YELLOW_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>yellow<span class="o">]</span>
</span><span class='line'><span class="nv">GREEN_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>green<span class="o">]</span>
</span><span class='line'><span class="nv">WHITE_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>white<span class="o">]</span>
</span><span class='line'><span class="nv">BLUE_BOLD</span><span class="o">=</span><span class="nv">$fg_bold</span><span class="o">[</span>blue<span class="o">]</span>
</span><span class='line'><span class="nv">RESET_COLOR</span><span class="o">=</span><span class="nv">$reset_color</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for git_prompt_info()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_PREFIX</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_SUFFIX</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for parse_git_dirty()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_DIRTY</span><span class="o">=</span><span class="s2">&quot; %{$RED%}(*)&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_CLEAN</span><span class="o">=</span><span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for git_prompt_status()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_UNMERGED</span><span class="o">=</span><span class="s2">&quot; %{$RED%}unmerged&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_DELETED</span><span class="o">=</span><span class="s2">&quot; %{$RED%}deleted&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_RENAMED</span><span class="o">=</span><span class="s2">&quot; %{$YELLOW%}renamed&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_MODIFIED</span><span class="o">=</span><span class="s2">&quot; %{$YELLOW%}modified&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_ADDED</span><span class="o">=</span><span class="s2">&quot; %{$GREEN%}added&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_UNTRACKED</span><span class="o">=</span><span class="s2">&quot; %{$WHITE%}untracked&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for git_prompt_ahead()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_AHEAD</span><span class="o">=</span><span class="s2">&quot; %{$RED%}(!)&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format for git_prompt_long_sha() and git_prompt_short_sha()</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_SHA_BEFORE</span><span class="o">=</span><span class="s2">&quot; %{$WHITE%}[%{$YELLOW%}&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_SHA_AFTER</span><span class="o">=</span><span class="s2">&quot;%{$WHITE%}]&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Prompt format</span>
</span><span class='line'><span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;%{$BLUE_BOLD%}%D{[%H:%M]}%{$RESET_COLOR%} %{$GREEN_BOLD%}%n%{$RESET_COLOR%}@%{$RED_BOLD%}%m%{$RESET_COLOR%}:%{$YELLOW_BOLD%}%~%u$(parse_git_dirty)$(git_prompt_ahead)%{$RESET_COLOR%}</span>
</span><span class='line'><span class="s1">%{$GREEN_BOLD%}-&gt;%{$RESET_COLOR%}&#39;</span>
</span><span class='line'><span class="nv">RPROMPT</span><span class="o">=</span><span class="s1">&#39;%{$GREEN_BOLD%}$(current_branch)$(git_prompt_short_sha)$(git_prompt_status)%{$RESET_COLOR%}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意不要留最后一行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[入手了一个新玩具]]></title>
    <link href="http://caiknife.github.io/blog/2018/09/30/ru-shou-liao-yi-ge-xin-wan-ju/"/>
    <updated>2018-09-30T17:08:57+08:00</updated>
    <id>http://caiknife.github.io/blog/2018/09/30/ru-shou-liao-yi-ge-xin-wan-ju</id>
    <content type="html"><![CDATA[<p>今天是2018年9月30日，按照常理，我们应该都会听一首歌。</p>

<p><embed src="https://imgcache.qq.com/tencentvideo_v1/playerv3/TPout.swf?max_age=86400&v=20161117&vid=c0668elhqi3&auto=0" allowFullScreen="true" quality="high" width="480" height="400" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>

<!-- more -->


<p>同时在今天，我也给自己准备了一件礼物。</p>

<p><a href="http://caiknife.github.io/downloads/image/clarinet/1.jpeg" title="Buffet Crampon Prodige Clarinet " class="fancybox"><img src="http://caiknife.github.io/downloads/image/clarinet/1.jpeg" alt="Buffet Crampon Prodige Clarinet " /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/clarinet/2.jpeg" title="Buffet Crampon Prodige Clarinet " class="fancybox"><img src="http://caiknife.github.io/downloads/image/clarinet/2.jpeg" alt="Buffet Crampon Prodige Clarinet " /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/clarinet/3.jpeg" title="Buffet Crampon Prodige Clarinet " class="fancybox"><img src="http://caiknife.github.io/downloads/image/clarinet/3.jpeg" alt="Buffet Crampon Prodige Clarinet " /></a></p>

<p><a href="http://caiknife.github.io/downloads/image/clarinet/4.jpeg" title="Buffet Crampon Prodige Clarinet " class="fancybox"><img src="http://caiknife.github.io/downloads/image/clarinet/4.jpeg" alt="Buffet Crampon Prodige Clarinet " /></a></p>

<p><strong>Buffet Crampon Prodige Clarinet</strong></p>

<p>在知乎的这篇回答里<a href="https://www.zhihu.com/question/39718466/answer/83423060">https://www.zhihu.com/question/39718466/answer/83423060</a>我提到了我中学时代在学校的铜管乐团里的经历，那个时候我吹的是Tenor Saxphone。</p>

<p>现在我已经30多岁了，出于对中学时代的这段经历的怀念，今天我给自己送了这件礼物，也算是今年生日的补偿——今年的生日我被需求方折腾到凌晨1点多才下班，呵呵呵。</p>

<p>年龄摆在这里，我从小练习萨克斯的基础也并没有打好，所以肯定还是要找老师学习的。学习单簧管只是想让自己开心开心，吹古典曲子我就不指望了，只希望能打好基础，积累足够的语汇，好好练习一下即兴技巧，也许过几年可以在爵士乐队中JAM一下。</p>

<p>希望将来有一天真的可以办到。</p>
]]></content>
  </entry>
  
</feed>
