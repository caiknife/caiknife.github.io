---
layout: post
title: "算法题：三针重叠问题"
date: 2018-11-27 19:23:06 +0800
comments: true
categories: 算法 编程 实战
---
经典问题——三针重叠问题。

> 在时针走满一圈的情况下，也就是12小时内，时针、分针、秒针会重合多少次？

分析一下：秒针60s走完一整圈，每秒的旋转角度是6度，分针速度是秒针的1/60，每s的旋转角度是1/10度，时针速度是分针的1/12，每s的旋转角度是1/120度。那么就需要计算出12个小时的时间内，也就是12*3600秒内，每秒钟三个指针的位置即可。如果度数相同，那么就认为三针重合。

<!-- more -->

更简单地来说，假设把时针的最小步长定位1，那么分针的步长就是12，而秒针的步长就是720。再针对各自一圈的步长取模，就可以得到每秒时每个位置的偏移量，如果三个偏移量相等的话，

编写程序如下：

{% include_code quiz/clock.php %}

所以，在12个小时内，三针重合只有在0点和12点的时候才会出现。这个时候是真正的停止重合。

而在其他的条件下，时针和分针只会出现划过重合，不会出现停止重合。

下面更新一个Golang写的版本，了解一下Golang时间处理的奇葩……

{% include_code quiz/clock.go %}